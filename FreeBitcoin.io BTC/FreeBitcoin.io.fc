

//============================================//
//script Written first by: cgerabit
//last update by: AviramDayan 08/07/2019 06:35AM - Version: 2
//============================================//

using System;
using FaucetCollector.Script;
using OpenQA.Selenium;
using System.IO;
using System.Globalization;
//css_inc ShortLinkUtilities
//css_inc RecaptchaUtilities


public class FreebitcoinioScript : FaucetScript
{
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://freebitcoin.io")
            {
                new FaucetSetting() { Name = "Email", Display = "Email", Type = EditorType.TextBox, Required = true },
                new FaucetSetting() { Name = "Password", Display = "Password", Type = EditorType.Password, Required = true },
                new FaucetSetting(){Name="DoShortLink",Display="DoShortLink",Type=EditorType.CheckBox,Default=false},

                new FaucetSetting(){Name="AutoWithdraw",Display="AutoWithdraw - on/off",Type=EditorType.CheckBox,Default=false},	
                new FaucetSetting() { Name = "LimiToWithdraw", Display = "LimiToWithdraw", Type = EditorType.TextBox, Default = MinimumWithdraw},	
		          
            };
        }
    }
    const double MinimumWithdraw=0.0002;
    public override void Start()
    {	
	    Title = "Free";
		
      
        SuccessXPath = "//div[@class='result' and contains(text(),'You have received')]";  //div[@id='btc-balance']
        FailXPath = "//div[@class='result' and not(contains(text(),'You have received'))]"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }

    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath( "//a[@href='/logout']" ) != null;		
		
    }
  

    public override int DoLogin()
    {
		
        //Find the input field that holds the email address
        var signInEmail = ElementByName("email");
        if (signInEmail == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Signin email input not found.");
        }

        var signInPassword = ElementByName("password");
        if (signInPassword == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Signin password input not found.");
        }

        //Email and password input found, update the value of the input with the email address and password the user entered in Faucet Collector
        SetText(signInEmail, GetSetting("Email"));
    
		SetText(signInPassword, GetPassword("Password"));


        //Now we search for the login submit button
        var loginButton = ElementByXPath("//button[@class='main-button main-button-yellow login bg-3']");
        if (loginButton == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Login button not found.");
        }
         Click ( loginButton );

        Wait();
        var Error = ElementByXPath("//div[@class='error']");
        if (IsVisible(Error))
        {
            if ( Error.Text.Contains ( "email" ) || Error.Text.Contains("password") )
            {
                Disable ( );
                return Fail ( "You have entered invalid credentials, ErrorMsg:\n " + Error.Text );
            }
            Log(Error.Text);
        }
			 
        //This faucet has nothing to do here.    
        return base.DoLogin();
    }

 public override int GetFaucetWaitTime()
 {

        if (!Driver.Url.Contains("https://freebitcoin.io//free"))
        {
            GoToUrl("https://freebitcoin.io//free");
            Wait();
        }
        
         var WaitTimerMin = ElementByXPath("//div[@class='minutes']/div[@class='digits']");
        var WaitTimerSeg = ElementByXPath("//div[@class='seconds']//div[@class='digits']");
         if (IsVisible(WaitTimerMin) && IsVisible(WaitTimerSeg))
         {
            return Convert.ToInt32(WaitTimerMin.Text) * 60 + Convert.ToInt32(WaitTimerSeg.Text);            

         } // end WaitTimerText


        Log("End wait time");
   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
    //=============//
    //GetFaucetWaitTime
    //=============//

    public override int BeforeSolveFaucet ( )
    {
        if ( GetBoolSetting ( "AutoWithdraw" ) )
        {
            var BalanceBox=ElementByXPath("//li[@class='navbar-coins bg-1']//a");
            double Balance;
            double UserSetting;
            if ( BalanceBox!=null &&
                double.TryParse ( BalanceBox.Text.Trim ( ) , NumberStyles.Any , CultureInfo.InvariantCulture , out Balance ) &&
                Balance>MinimumWithdraw  && double.TryParse(GetSetting( "LimiToWithdraw" ), NumberStyles.Any , CultureInfo.InvariantCulture , out UserSetting ) && Balance>UserSetting  )
            {
                var BtnWithdraw=ElementByXPath("//button[contains(text(),'Withdraw')]");
                if ( IsVisible ( BtnWithdraw ) )
                {
                    Click ( BtnWithdraw );
                }
                var WithdrawAll=ElementByXPath("//a[@class='profile-amount color-1']");
                var USeProfileAddress=ElementByXPath("//a[@class='profile-wallet color-1']");
                if ( IsVisible ( WithdrawAll )&&IsVisible ( USeProfileAddress ) )
                {
                    Click ( WithdrawAll );
                    Wait ( 1 );
                    Click ( USeProfileAddress );
                    Wait ( 1 );

                    var BtnWithdrawFinal=ElementByXPath("//button[@class='main-button-2 main-button-blue withdraw-now bg-3']");
                    if ( IsVisible ( BtnWithdrawFinal ) )
                    {
                        Click ( BtnWithdrawFinal );
                    }
                }

                Wait ( 1 );
            }
        }
        return base.BeforeSolveFaucet ( );  
    }

    public override int DoSolveFaucet()
    {

            if (!Driver.Url.Contains("https://freebitcoin.io//free"))
            {
                GoToUrl("https://freebitcoin.io//free");
                Wait();
            }

            var ButtonClaim = ElementByXPath("//button[@class='main-button-2 roll-button bg-2']");
            if (!IsVisible(ButtonClaim))
            {
                return Fail("Button claim not visible");
            }
        
            Click(ButtonClaim);
            Wait();             
	 //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
    public override int AfterSolveFaucet ( )
    {
        if ( GetBoolSetting ( "DoShortLink" ) )
        {
            Log ( "DoShortLink" );
            GoToUrl ( "https://freebitcoin.io/free-rolls" );
            Wait ( );

            int N = CheckIfShortLinkIsAvailable();
            if ( N!=-1 )
            {
                Log ( "Shortlink N÷:"+N.ToString ( )+" Available" );
                var ShortLinks = ElementsByXPath("//a[contains(text(),'Link')]");
                if ( ShortLinks.Count>N )
                {
                    try
                    {
                        string Href = ShortLinks[N].GetAttribute("href");
                        if ( !string.IsNullOrEmpty ( Href ) )
                        {
                            GoToUrl ( Href );
                        }
                        else
                        {
                            CheckForPopupsEnabled=false;
                            Click ( ShortLinks[N] , false );
                            Driver.SwitchTo ( ).Window ( Driver.WindowHandles[1] );

                        }


                        ShortLinkBypasser bypasser = new ShortLinkBypasser(this);
                        Wait ( 2 , 3 );
                        bool cs = bypasser.DoShortLink();
                        if ( cs )
                        {
                            SetSetting ( "Link"+N.ToString ( ) , DateTime.Now );
                            Log ( "ShortlinkSuccess" );
                        }
                        else
                        {
                            Log ( "Fail Doing shortlink" );
                        }
                    }// end try
                    finally
                    {

                        CheckForPopups ( );
                        Driver.SwitchTo ( ).Window ( Driver.WindowHandles[0] );
                    }
                }
            }
            else
            {
                Log ( "No shortlinks avaible" );
            }

        }
        return base.AfterSolveFaucet ( );   
    }


    public int CheckIfShortLinkIsAvailable()
    {
        var ShortLinks = ElementsByXPath("//a[contains(text(),'Link')]");
        int NumberOf = -1;
       for(int i = 0; i < ShortLinks.Count; i++)
        {
            string SettingLink = GetSetting("Link" + i.ToString());
            DateTime LastUsed;
           
            if(!string.IsNullOrEmpty(SettingLink) && DateTime.TryParse(SettingLink,out LastUsed))
            {
                if (LastUsed.AddHours(24) < DateTime.Now)
                {
                    return i;
                }

            }
            else
            {
                return i;
            }
           
        }


        return NumberOf;
    }
	
	
} //public class 
