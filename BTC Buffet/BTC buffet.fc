
//============================================//
//script Written first by: cgerabit
//last update by: AviramDayan 29/09/2019 06:35AM - Version: 22 
//============================================//

using System;
using FaucetCollector.Script;

public class BtcBuffet : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.btcbuffet.com/")
            {
                new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
				
	            new FaucetSetting(){Name="AutoWithdraw",Display="AutoWithdraw - when you have 20000 satoshi",Type=EditorType.CheckBox,Default=true},
	            new FaucetSetting(){Name="WithdrawAmount",Display="WithdrawAmount",Default="20000",Type=EditorType.TextBox,Required=true},
                //new FaucetSetting(){Name="DeleteCookies",Display="Delete Cookies - Sometimes solves problems (Recommended)",Type=EditorType.CheckBox,Default=true},
	
				
                new FaucetSetting(){Name="Sfad",Display="Surf ads - Claim with normal way",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="CN",Display="Earn Bitcoin - Claim with captcha",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="CB",Display="Claim buffet (for Upgrade Account)",Type=EditorType.CheckBox,Default=false},

				
				
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "BTC Buffet|second"; 

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//b[@class='satos']";
        FailXPath = "//*[text()='']";

        //Let Faucet Collector start up everything
        base.Start();
    }


	
	
    public override int DoInit()
    {

        ad = false;
		
		//if it's Checked
       if (GetBoolSetting("DeleteCookies"))
       {

		//Delete Cookies
		 Log("DeleteCookies - Checked");
         Driver.Manage().Cookies.DeleteAllCookies();

       } //end DeleteCookies
		
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
	
	
	
    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
		 return ElementByXPath("//a[@href='/logout']") != null;
		
    }

	
	
	
	
	
//===========//
//BeforeLogin
//===========//	
    public override int BeforeLogin()
    {
		
     var ExitButton =ElementByXPath("//a[@href='/logout']"); //SIGN OUT

	 //if i already Login - go to "bonus"	 
	 if (IsVisible(ExitButton))
	 {
        //if we already login go to here
        GoToUrl("https://www.btcbuffet.com/m/dashboard");	
	 }	
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//===========//
//BeforeLogin
//===========//	
	
	

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
		
		
	 //var checks login or exit
	 var LoginStart =ElementByXPath("//a[@href='/signin']"); //Login


	 //if i NOT Login - go to Login Page
	 if (IsVisible(LoginStart))
	 {
		
        //go to normal login
		GoToUrl("https://www.btcbuffet.com/signin");
		
        Wait();
		
        var box_user = ElementByXPath("//input[@placeholder='Email Address']");
        SetText(box_user, GetSetting("User"));
		
        Wait(3);
		
        var box_pass = ElementByXPath("//input[@placeholder='Password']");
        SetText(box_pass, GetPassword("Pass"));
		
        Wait(3);
		
        var result = DoSolveImageCaptcha(ElementByXPath("//div[@class='cimage']"), ElementByXPath("//input[@placeholder='Captcha']"));
        if (result > 0)
        {
           return result;
			
        }
		
		
        Wait(5);
		
		
        var button = ElementByXPath("//button[@type='submit']");
        Click(button);
        
		
		var ErrorMessage = ElementByXPath("//h4[text()='Error']"); 		
		if (IsVisible(ErrorMessage))
	    {
		    Log("Login: Captcha fail - close browser ");	
			Wait(2);
			Driver.Navigate().Refresh();
			Wait(2);
		    Driver.Manage().Cookies.DeleteAllCookies();
			Wait(2);
			
	        Driver.Close();  // Close specific chrome window
            Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
            Driver.Dispose();  // Close the chromedriver.exe
	    }
				
        Wait(8);

        Driver.Navigate().Refresh();
		
		var SuccessMessage = ElementByXPath("//h4[text()='Success']"); 		
		if (IsVisible(SuccessMessage))
	    {
         Log("Login: SuccessMessage - You are login");	
	    }
		

	 }
	 
	
        Wait();
        Wait(7);		
	
        //This faucet has nothing to do here. 
     
        return base.DoLogin();
    }

	
	
	
	
	
    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {

        //if we already login go to here
        GoToUrl("https://www.btcbuffet.com/m/dashboard");	
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
	
	
	

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        if (ad)
        {
	        Driver.Close();  // Close specific chrome window
            Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
            Driver.Dispose();  // Close the chromedriver.exe
            return GetWaitSetting();
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }

	
	
	
	
	
    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

	
	
	
	
	
	
    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
	
	
    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	
	
	
	
	

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	
	
	
    private static bool ad;	
	
	
	
	
	

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        ad = false;
		
		
	//===============//
	//AutoWithdraw//
	//==============//
		
    if (GetBoolSetting("AutoWithdraw"))
    {
		
        GoToUrl("https://www.btcbuffet.com/m/withdraw");
		Log ("AutoWithdraw: check");

	    Wait(3);
		
        var BalanceAlert = ElementByXPath("//div[@class='alertBox alert']");
		
        if (IsVisible(BalanceAlert))
        {
		 //Do not do anything	
		 Log ("AutoWithdraw: not available");
	
		}	
			
        if (!IsVisible(BalanceAlert))
        {		
        SetText(BalanceAlert, GetSetting("WithdrawAmount"));
	    Log ("AutoWithdraw: set");
		
        Wait(3);		
		
        var WithdrawButton = ElementByXPath("//button[@class='btn']");
	    Click(WithdrawButton);		
		Log ("AutoWithdraw: Success click on WithdrawButton");
		
        Wait(3);	

        var InfoBalance = ElementByXPath("//span/b[@class='satos']");
		Log (InfoBalance.Text);	
		
        Wait(2);	

        }

    } 
	//==============//
		



		
		
		
		
		//==================//
		//Sfad - Normal Way//
		//=================//
        if (GetBoolSetting("Sfad"))
        {
			
		
            while (true)
            {
                GoToUrl("https://www.btcbuffet.com/m/surfads");
                Wait();
                var button = ElementByXPath("//button[@class='btn']");
                if (IsVisible(button))
                {
                    button.Click();
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    Wait(3, 4);
                    while (IsVisible(ElementByXPath("//div[@class='clockrun']")))
                    {
                        Wait();
                    }
                    Wait();
                    var button2 = ElementByXPath("//button[@class='btn btn-ok try smBtn']");
                    if (IsVisible(button2))
                    {
                        Click(button2);
                    }


                }
                else
                {
                    break;
                }
            }
        }

	
		
		//=================//
		//CN - Earn Bitcoin with Captcha
		//=================//		
        if (GetBoolSetting("CN"))
        {
            GoToUrl("https://www.btcbuffet.com/m/earnbitcoin");
            var annonces = ElementsByXPath(" //a[@href='javascript:void(0)']");
            while (annonces.Count > 0) {
                annonces = ElementsByXPath(" //a[@href='javascript:void(0)']");
                var curl = annonces[0].GetAttribute("class").Replace("btcbox d_","");
                GoToUrl("http://www.btcbuffet.com/m/claimbtc/"+curl);
                Wait(2, 3);
                while (IsVisible(ElementByXPath("//span[@id='_clock']")) || IsVisible(ElementByXPath("//div[@id='loading-view']")))
                {
                    Wait();
                }
                Wait();
                if(IsVisible(ElementByXPath("//div[@class='cimageSurf']"))&& IsVisible(ElementByXPath("//input[@id='ch']")))
                {
                    var result = DoSolveImageCaptcha(ElementByXPath("//div[@class='cimageSurf']"), ElementByXPath("//input[@id='ch']"));

                    
                }
                Wait(5);
                var button = ElementByXPath("//button[@class='btn btn-ok submitBtn smBtn']");
                if (IsVisible(button))
                {
                    Click(button);
                }
                Wait(2, 3);
                
                GoToUrl("https://www.btcbuffet.com/m/earnbitcoin");
                Wait(2,3);

            }

        }

		
		//=====================================//
		//CB - Claim buffet (for Upgrade Account)
		//=====================================//
        if (GetBoolSetting("CB"))
        {
           
            bool anc_t = false;
            while (!anc_t)
            {
                GoToUrl("http://www.btcbuffet.com/m/buffet");
                Wait(2, 3);
                if(IsVisible(ElementByXPath("//h2[contains(text(),'You have claimed all buffet ads for now.')]")))
                {
                    break;
                }
                while (IsVisible(ElementByXPath("//span[@id='_clock']")) || IsVisible(ElementByXPath("//div[@id='loading-view']")))
                {
                    Wait();
                }
                Wait();
                if (IsVisible(ElementByXPath("//div[@class='cimageSurf']")) && IsVisible(ElementByXPath("//input[@id='ch']")))
                {
                    var result = DoSolveImageCaptcha(ElementByXPath("//div[@class='cimageSurf']"), ElementByXPath("//input[@id='ch']"));


                }
                Wait(2, 3);
                var button = ElementByXPath("//button[@class='btn btn-ok submitBtn smBtn']");
                if (IsVisible(button))
                {
                    Click(button);
                }
                Wait(2, 3);
                var next_B = ElementByXPath("//a[@title='Next Session']");
                if (IsVisible(next_B))
                {
                    Click(next_B);
                }
               
                
            }
        }
		
			
		
        ad = true;
		
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
	
	

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	
} //end class
