using System;
using FaucetCollector.Script;
using OpenQA.Selenium;

public class BitcoinMineGame : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {		
		
            return new FaucetSettings("https://BitcoinMineGame.com")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="BuyCollect",Display="BitcoinMineGame - Buy and Collect 50 satoshi every 24h",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="Game",Display="BitcoinMineGame - AutoGame DOLLAR vs BITCOIN - hit 5 times (minimum 100 satoshi)",Type=EditorType.CheckBox,Default=false},

				
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }


	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "BitcoinMineGame.com";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
		SuccessXPath = "//*[@id='cave-1']/div[4]/p/a[@href='caves/?act=nall&plan=']";
        FailXPath = "//div[@class='']";
		
        TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
	
    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
	
    public override int DoInit()
    {

        cs = false;
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
		
	   //save Login Cookies - Check if the image of balance is there
       return ElementByXPath("//a[text()='Sign Out']") != null;

    }
//==================//
//save Login Cookies 
//==================//	

	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }


	
	
//================================//
//start DoLogin
//================================//
 public override int DoLogin()
 {

	 //var checks login or exit
	 var LoginStart =ElementByXPath("//a[text()='Log in']"); //Log in
     var ExitButton =ElementByXPath("//a[text()='Sign Out']"); //Sign Out
	 

	 //if i already Login - go to "bonus"	 
	 if (IsVisible(ExitButton))
	 {
        GoToUrl("https://bitcoinminegame.com/caves/");
     }


	 //if i NOT Login - go to Login Page
	 if (IsVisible(LoginStart))
	 {
	
		//if i already login - go to here
        GoToUrl("https://bitcoinminegame.com/login/");

        Wait(2);

        var Email_Box =ElementByXPath("//input[@placeholder='Username']");
        SetText(Email_Box, GetSetting("user"));
		
        Wait(2);
		
        var Password_Box = ElementByXPath("//input[@placeholder='Password']");
        SetText(Password_Box, GetPassword("Pass"));
		
        Wait(2);
		
		//SolveCaptcha if apper
        var result = SolveCaptcha();
        if (result > 0)
        {
            //SolveCaptcha returned there was something wrong - we also need to return that .
            return result;
        }
        ExecuteScript("___grecaptcha_cfg.clients[0].aa.l.callback('" + Context.CaptchaResult.Result + "');");
		
        Wait(2);
		
        //Click on LoginButtonVar
        var LoginButtonVar = ElementByXPath("//BUTTON[@type='submit']");
        Wait(2);
        Click(LoginButtonVar);

	 }	
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
 }
//================================//
//end DoLogin
//================================//
	
	
	
	
	
//================================//
//start AfterLogin
//================================//
    public override int AfterLogin()
    {
		
	
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
//================================//
//end AfterLogin
//================================//
	
	
	
	
		
	//loop
    public static bool cs;
	
	
    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
		//wait 36 min
        if (cs)
        {
            return 60 * 60;
        }

        //0 mean let Faucet Collector continue.
        //return 0;
		
		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();

    }

	
	
    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

	
	

	
	
	
	
	
    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
	

	
	
    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
		

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	

	
	
	
	
//================================//
//start BeforeSolveFaucet
//================================//
    public override int BeforeSolveFaucet()
    {

	
	if (GetBoolSetting("Game"))
    {

	  //go to game page
      GoToUrl("https://bitcoinminegame.com/game/");

      var toggle1 = ElementByXPath("//*[@class='select-bet__list']");
      var MenuBidAmunt = ElementByXPath("//div[text()='0.00000100']");
	  
	  var toggle2 = ElementByXPath("//*[@class='select-wallet__list']");
      var MenuWallet = ElementByXPath("//div[text()='On the conclusion']");
	 
	  var ButtonGame = ElementByXPath("//*[@id='coin_btn']");	 
	 
	  //Menu BidAmunt
      Click(toggle1);
	  
      Wait(3);
	  
      Click(MenuBidAmunt);
     //==============//
	 

	  //Menu Wallet
      Click(toggle2);

      Wait(3);
	  
      Click(MenuWallet);
     //==============//
	 
	 
	 //ButtonGame
	 Click(ButtonGame);

     Wait(3);
	 
	 Click(ButtonGame);
	 
     Wait(4);
	 
	 Click(ButtonGame);
	 
     Wait(5);
	 
	 Click(ButtonGame);
	 
     Wait(6);
	 
	 Click(ButtonGame);
	 
     Wait(5);
     //==============// 
	 
	}	
	
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

//================================//
//end BeforeSolveFaucet
//================================//








//================================//
//end DoSolveFaucet
//================================//
	
public override int DoSolveFaucet()
{

		if (GetBoolSetting("BuyCollect"))
    {

		//first go to "Cave page"
        GoToUrl("https://bitcoinminegame.com/caves/");

		var BuyCaveVar = ElementByXPath("//button[text()='Open']");
		var CollectRobotNoVar = ElementByXPath("//p[text()='Income: 0.00000000  ']");
		var CollectRobotYesVar = ElementByXPath("//a[text()='Collect']");


		//====================================//
		//BuyRobot - if we only just start
		//====================================//
	
		if (IsVisible(BuyCaveVar))
        {
        //Click on BuyRobot
        Click(BuyCaveVar);
        }
		//====================================//

        Wait(3);
		
		//====================================//
		//CollectRobot - if we already buy Robot
		//====================================//
		if (IsVisible(CollectRobotNoVar))
        {
		return 180 * 60; //Faucet Collector - will wait 36min - for next claim
        }

	
		if (IsVisible(CollectRobotYesVar))
	    {
        //Click on Collect
        Click(CollectRobotYesVar);
		Log("Success: Collect");
        }
		
		//====================================//
	
    }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
}
//================================//
//end DoSolveFaucet
//================================//
	
	
	
	
	
//================//
//AfterSolveFaucet//
//================//
 public override int AfterSolveFaucet()
 {
 
	//This faucet has nothing to do here. We will let Faucet Collector handle it.
    return base.AfterSolveFaucet();
		
 }
//================================//
//end AfterSolveFaucet
//================================//
	
	
	
	


    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}