using System;
using FaucetCollector.Script;
using OpenQA.Selenium;


public class MoneyClicker : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://money-clicker.com/")
            {
                new FaucetSetting(){Name="Email",Display="Your UserName",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Your Password",Type=EditorType.Password,Required=true},
				
                new FaucetSetting() { Name = "UseSolveMedia", Display = "Use SolveMedia", Type = EditorType.CheckBox, Default = true},
                new FaucetSetting() { Name = "FaucetClaim", Display = "FaucetClaim", Type = EditorType.CheckBox, Default = true},	
				
				
            };
        }
    }
	
	
	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "MoneyClicker";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
		SuccessXPath = "//span[starts-with(text(),'You won')]";
        FailXPath = "//div[@class='']";
		
        TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	

	//loop
    public static bool cs;


	
	
    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
	
    public override int DoInit()
    {

        cs = false;
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
		
     //save Login Cookies - Check if the image of balance is there
     return ElementByXPath("//a[text()='Logout']") != null;  

    }
//==================//
//save Login Cookies 
//==================//	



	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

	
	
	
	
//================================//
//start DoLogin
//================================//
    public override int DoLogin()
    {

        //var checks login or exit



        //if i NOT Login - go to Login Page

        GoToUrl("https://money-clicker.com/index.php?p=login");
        Wait(2);

        //Find the input field that holds the email address
        var signInEmail = ElementByXPath("//input[@id='mc_username']");
        SetText(signInEmail, GetSetting("Email"));
	
		
        Wait(2);
			
        var signInPassword = ElementByXPath("//input[@id='mc_password']");
        SetText(signInPassword, GetPassword("Password"));
		
		
        Wait(2);

        //SolveCaptcha if apper
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            //Unable to solve the captcha - return the failure
            return result;
        }

		Wait(2);
        //Click login button
        var loginButton = ElementByXPath("//button[@type='submit']"); //button[text()='Log in']
        Click(loginButton);
		Log("Login: Click Button");
		
	 
	 
        //Let Faucet Collector continue
        return base.DoLogin();
    }
//================================//
//end DoLogin
//================================//
 

 
 
	
//================================//
//start AfterLogin
//================================//
 public override int AfterLogin()
 {
	 

    //we are good to continue
    return base.AfterLogin();

 }
	
//================================//
//end AfterLogin
//================================//
	
	

	
	
	
	
    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
		//wait 36 min
        if (cs)
        {
            return 60 * 60;
        }

        //0 mean let Faucet Collector continue.
        //return 0;
		
		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();

    }

	
	
	
	
    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
		/*
		
        //Check if the user wants to do SolveMedia or reCAPTCHA.
        if (GetBoolSetting("UseSolveMedia"))
        {
            //Make sure SolveMedia is active by clicking the link.
            Click(ElementByLinkText("Switch to SolveMedia captcha"));
        }
        else
        {
            //Make sure reCAPTCHA is active by clicking the link.
            Click(ElementByLinkText("Switch to Recaptcha"));
        }

        //Wait a little (1 - 2 seconds) for the captcha to switch.
        Wait();

		*/
		
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }
	
	
	
	
	
    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
	
	
    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
	

	
	
//================================//
//start BeforeSolveFaucet
//================================//

public override int BeforeSolveFaucet()
  {
	 

	 
	 
        //Let Faucet Collector Continue.
        return base.BeforeSolveFaucet();
  }
  
//================================//
//end BeforeSolveFaucet
//================================//
	

	
	
	
//================================//
//start DoSolveFaucet
//================================//
 public override int DoSolveFaucet()
 {
	 
	  
   if (GetBoolSetting("FaucetClaim"))
   {  
		//first go to free roll
        GoToUrl("https://money-clicker.com/dashboard.php?p=free");
		Log("go to free Roll page");	
	
	
        //var check
        var WaitTextVar = ElementByXPath("//span[starts-with(text(),'You need to wait ')]");
        var TextApproveVar = ElementByXPath("//span[text()='You can participate in a free roll every day to gain some MCC!']");		
        var ClaimTextVar = ElementByXPath("//button[starts-with(text(),'Roll & Win')]");
		

		// if Wait text apper
	    if (IsVisible(WaitTextVar))
	    {		
	    Log("return 180min");
		return 180*60;
		}
		
		
		//if TextApproveVar available


        Wait(3);	
		
        //Click the Roll
        var claimButton = ElementByXPath("//button[@type='submit']");
        Click(claimButton);
		Log("click on Roll button");

        
	  
		
   } 	
		
        //We are good to continue
        return base.DoSolveFaucet();
 }
//================================//
//end DoSolveFaucet
//================================//
	
	
	
	
	
	
    public override int AfterSolveFaucet()
    {
        //Let Faucet Collector continue
        return base.AfterSolveFaucet();
    }

	
	


    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
 

} //END public class moneyclickerScript
