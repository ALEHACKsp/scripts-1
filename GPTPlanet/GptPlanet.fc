using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;

public class GptPlanetScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.gptplanet.com")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="TwoPass",Display="Second Password(Only if you did set it)",Type=EditorType.Password,Default="none"},
                new FaucetSetting(){Name="Security",Display="Security Question",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Bonus",Display="Do BonusAds",Type=EditorType.CheckBox,Default=false},
          
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "GPTPlanet";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//a[@class='btn btn-danger']";
        FailXPath = "//div[@class='Dsa']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
	Driver.Manage().Cookies.DeleteAllCookies();
        //Let Faucet Collector continue.
		Driver.Navigate().Refresh();
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[@class='register-header' and @href='index.php?view=logout']") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        if (!Driver.Url.Contains("https://www.gptplanet.com/index.php?view=loginz"))
        {
            GoToUrl("https://www.gptplanet.com/index.php?view=loginz");
        }
        else
        {
            Driver.Navigate().Refresh();
        }
        var UsernameBox = ElementByXPath("//input[@name='username']");
        if (!IsVisible(UsernameBox))
        {
            return Fail("User Box Isn't visible");
        }
        SetText(UsernameBox, GetSetting("User"));
        var PasswordBox = ElementByXPath("//input[@name='psword']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("User Box Isn't visible");
        }
        SetText(PasswordBox, GetPassword("Pass"));
        Wait(1);
        if (GetPassword("TwoPass") != "none")
        {
            SetText(ElementByXPath("//input[@placeholder='Only when you did set']"),GetPassword("TwoPass"));
        }
        var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimglogin']"), ElementByXPath("//input[@id='captcha_login']"));
        if (result > 0)
        {
            return Fail("Solve captcha in login Failed,");
        }
        var button = ElementByXPath("//input[@value='Login']");
        if (!IsVisible(button))
        {
            return Fail("Button login isn't visible");
        }
        Click(button);
        Wait();
        if(IsVisible(ElementByXPath("//div[@class='l2errorloginform error_box']")))
        {
            return Fail(ElementByXPath("//div[@class='l2errorloginform error_box']").Text);
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        var security = ElementByXPath("//input[@id='security_answer']");
        if (IsVisible(security))
        {
            SetText(security, GetSetting("Security"));
            Click(ElementByXPath("//input[@value='Send']"));
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        GoToUrl("http://www.gptplanet.com/index.php?view=ads");
        Wait();
        var access = ElementByXPath("//input[@value='Give me access']");
        int cont = 0;
        do
        {

            if (IsVisible(access))
            {
                var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimg']"), ElementByXPath("//input[@id='captcha']"));
                if (result > 0)
                {
                    return Fail("Problem with captcha");
                }
                Click(access);
            }
            Wait(2, 3);
            access = ElementByXPath("//input[@value='Give me access']");
            if (cont >= 3)
            {
                break;
            }
            cont++;
        } while (IsVisible(access));


        Wait(3);
        var Ads = ElementsByXPath("//div[@class='ad-block ' or @class='ad-block  ' or @class='ad-block  ' or @class='ad-block  ']//div[@class='ad-title']//span[@class='pointer']");

        int count_ads = Ads.Count;

        foreach (IWebElement ad in Ads)
        {
            if (ad.Text.Contains("DO NOT CLICK") || ad.Text.Contains("BOT CHECK") || !IsVisible(ad))
            {
                count_ads--;
            }


        }
        if (count_ads > 0)
        {
            return 0;
        }
        return 7200;
        //let Faucet Collector continue.

    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveFaucet();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>

    public override int DoSolveFaucet()
    {

        GoToUrl("http://www.gptplanet.com/index.php?view=ads");
        Wait();
        var access = ElementByXPath("//input[@value='Give me access']");
        if (IsVisible(access))
        {
            var result = DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Problem with captcha");
            }
        }
        Click(access);
        Wait(3);
        var Ads = ElementsByXPath("//div[@class='ad-block ' or @class='ad-block  ' or @class='ad-block  ' or @class='ad-block  ']//div[@class='ad-title']//span[@class='pointer']");

        Log(Ads.Count + " Standard ads detected");
        try
        {
            var n = 0;
            CheckForPopupsEnabled = false;
            while (Ads.Count > n)
            {
                try
                {
                    if (Ads[n].Text.Contains("DO NOT CLICK") || Ads[n].Text.Contains("BOT CHECK") || !IsVisible(Ads[n]))
                    {
                        n++;
                    }
                    else
                    {
                        CheckForPopupsEnabled = false;
                        Click(Ads[n], false);
                        Wait();

                        Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                        Wait(5);
                        var verify = ElementByXPath("//input[@value='Continue']");
                        var countdown = ElementByXPath("//div[@id='progress']");
                        var tozero = ElementByXPath("//map[@id='Map']");
                        if (IsVisible(verify))
                        {
                            var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimglogin']"), ElementByXPath("//input[@id='captcha_login']"));
                            if (result > 0)
                            {
                                return Fail("Problem with captcha");
                            }
                            Click(verify);
                        }
                        DateTime t2 = DateTime.Now.AddSeconds(20);
                        while (IsVisible(ElementByXPath("//div[@class='adwait']")))
                        {

                            Wait();
                            if (DateTime.Now > t2)
                            {
                                break;
                            }
                        }
                        Wait();
                        DateTime t1 = DateTime.Now.AddSeconds(100);
                        var errorbox = ElementByXPath("//div[@class='errorbox']");
                        if (IsVisible(errorbox))
                        {
                            if(IsVisible(ElementByXPath("//div[@class='errorbox' and contains(text(),'You are not loged in')]")))
                            {
                                Driver.Manage().Cookies.DeleteAllCookies();
                                return Fail("Something is wrong you are not login in , Deleting cookies");
                               
                                
                            }
                            n++;
                            Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                            CheckForPopupsEnabled = true;
                            CheckForPopups();
                            CheckForPopupsEnabled = false;
                            Driver.Navigate().Refresh();
                        }
                        while (IsVisible(countdown) && !IsVisible(tozero))
                        {
                            Wait();
                            countdown = ElementByXPath("//div[@id='progress']");
                            tozero = ElementByXPath("//map[@id='Map']");
                            if (DateTime.Now > t1)
                            {
                                break;
                            }
                        }
                        tozero = ElementByXPath("//map[@id='Map']");
                        if (IsVisible(tozero))
                        {
                            solve_image_catpcha();
                        }
                        else
                        {

                            Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                            Wait(5);

                        }
                        Wait();

                    }
                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    Wait();
                    if (!Driver.Url.Contains("http://www.gptplanet.com/index.php?view=ads"))
                    {
                        Driver.Navigate().GoToUrl("http://www.gptplanet.com/index.php?view=ads");
                    }
                    else
                    {
                        Driver.Navigate().Refresh();
                    }
                    Wait(2, 3);
                    var access_ = ElementByXPath("//input[@value='Give me access']");
                    if (IsVisible(access))
                    {
                        var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimg']"), ElementByXPath("//input[@id='captcha']"));
                        if (result > 0)
                        {
                            return Fail("Problem with captcha");
                        }
                        Click(access);
                        Wait(2, 3);
                    }
                    Ads = ElementsByXPath("//div[@class='ad-block' or @class='ad-block ' or @class='ad-block  ']//div[@class='ad-title']//span[@class='pointer']");

                }
                catch (Exception)
                {
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    Wait(6);
                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    Wait();
                    if (Driver.Url.Contains("http://www.gptplanet.com/index.php?view=ads"))
                    {
                        GoToUrl("http://www.gptplanet.com/index.php?view=ads");
                    }
                    else
                    {
                        Driver.Navigate().Refresh();
                    }
                    Wait(2, 3);
                    var access_ = ElementByXPath("//input[@value='Give me access']");
                    if (IsVisible(access))
                    {
                        var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimg']"), ElementByXPath("//input[@id='captcha']"));
                        if (result > 0)
                        {
                            return Fail("Problem with captcha");
                        }
                        Click(access);
                        Wait(2, 3);
                    }
                    Ads = ElementsByXPath("//div[@class='ad-block ' or @class='ad-block  ' or @class='ad-block  ' or @class='ad-block  ']//div[@class='ad-title']//span[@class='pointer']");

                }
            }
        }
        catch (Exception)
        {
            Driver.Navigate().Refresh();
            Wait();
        }
        if (GetBoolSetting("Bonus"))
        {
            //Bonus Ads
            var Ads_ = ElementsByXPath("//div[@class='ad-block' and not(contains(@style,'display: none'))]//div[@class='ad-title']//span[@class='pointer']");
            int n2 = 0;
            int BeforeAds = Ads_.Count;
            while (Ads_.Count > n2)
            {
                //progress
                CheckForPopupsEnabled = false;
                Click(Ads_[n2], false);
                Wait(2);
                Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                Wait(1);
                DateTime t1 = DateTime.Now.AddSeconds(5);
                while (IsVisible(ElementsByXPath("//div[@class='ad-block' and not(contains(@style,'display: none'))]//progress")[n2]))
                {
                    if (DateTime.Now > t1)
                    {
                        break;
                    }
                }
                Wait();

                CheckForPopupsEnabled = true;
                CheckForPopups();
                Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                Wait(1);

                Wait(1);
                Ads_ = ElementsByXPath("//div[@class='ad-block' and not(contains(@style,'display: none'))]//div[@class='ad-title']//span[@class='pointer']");
                if (BeforeAds == Ads_.Count)
                {
                    n2++;
                }
                BeforeAds = Ads_.Count;
            }
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
    public bool solve_image_catpcha()
    {
        bool IsSolved = false;
        try
        {
            var capt = ElementByXPath("//img[@src='modules.php?m=surfer&show=captcha']");
            if (!IsVisible(capt))
            {
                capt = ElementByXPath("//img[contains(@src, 'data:image/png;base64')]");
            }
            Bitmap captcha = TakeScreenshot(Base.Captcha.CaptchaService.Manual, capt);
            if (captcha.Width != 300 || captcha.Height != 50)
            {
                captcha = ChangeImageSize(captcha, 300, 50);

            }

            Bitmap[] icons = new Bitmap[6];
            icons[0] = captcha.Clone(new Rectangle(0, 0, 50, 50), captcha.PixelFormat);
            icons[1] = captcha.Clone(new Rectangle(50, 0, 50, 50), captcha.PixelFormat);
            icons[2] = captcha.Clone(new Rectangle(100, 0, 50, 50), captcha.PixelFormat);
            icons[3] = captcha.Clone(new Rectangle(150, 0, 50, 50), captcha.PixelFormat);
            icons[4] = captcha.Clone(new Rectangle(200, 0, 50, 50), captcha.PixelFormat);
            icons[5] = captcha.Clone(new Rectangle(250, 0, 50, 50), captcha.PixelFormat);


            string asset_d = AssetDir("Other");
            int result_ = -1;
            asset_d += "\\Images Ptcwall\\";
            bool enc = false;

            for (int i = 0; i < 6; i++)
            {
                for (int j = 1; j <= 10; j++)
                {

                    string dir = asset_d + j.ToString() + ".png";
                    FileStream s = new FileStream(dir, FileMode.Open);
                    Bitmap imgtocomp = new Bitmap(Image.FromStream(s));
                    s.Close();
                    bool result = CompareImage(icons[i], imgtocomp);
                    if (result)
                    {
                        result_ = i;
                        enc = true;
                        break;
                    }
                }
            }
            if (enc)
            {
                result_++;
                ExecuteScript("endprogress(" + result_.ToString() + ");");
                Wait();
                IsSolved = true;
            }
        }
        catch (Exception ex)
        {
            Log(ex.ToString());
            IsSolved = false;
        }

        return IsSolved;
    }
    private bool CompareImage(Bitmap image1, Bitmap image2)
    {
        for (int i = 0; i < image1.Height; i++)
        {
            for (int j = 0; j < image1.Width; j++)
            {
                if (!SameColor(image1.GetPixel(j, i), image2.GetPixel(j, i), 100))
                {
                    return false;
                }
            }
        }
        return true;
    }
    private bool SameColor(Color c1, Color c2, double thre)
    {
        int r = c1.R - c2.R;
        int g = c1.G - c2.G;
        int b = c1.B - c2.B;
        if (r * r + g * g + b * b > thre * thre)
        {
            return false;
        }
        return true;
    }

    public Bitmap ChangeImageSize(Bitmap pImg, int pWidth, int pHeigth)
    {

        //Creating new bitmap

        Bitmap vBitmap = new Bitmap(pWidth, pHeigth);

        using (Graphics vGraphics = Graphics.FromImage((Image)vBitmap))

        {

            //Specifi interpolation

            vGraphics.InterpolationMode = InterpolationMode.HighQualityBicubic;

            //Draw

            vGraphics.DrawImage(pImg, 0, 0, pWidth, pHeigth);

        }

        //return image

        return vBitmap;

    }
    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
