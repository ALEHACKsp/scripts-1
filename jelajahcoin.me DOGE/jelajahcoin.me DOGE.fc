//==================//
//first script Written by: AviramDayan 24/08/2019 19:09PM version 1
//Last Update: 15/09/2019 10:00AM - Version 9
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
//css_inc recaptchaUtilities

public class cakirfaucetScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://jelajahcoin.me/reward/doge/")
            {
                new FaucetSetting(){Name="Bitcoin",Display="FaucetHub - DOGE Address",Type=EditorType.TextBox,Required=true },
				new FaucetSetting(){Name="Time",Display="Minutes to wait - to try to claim again if fail",Type=EditorType.Numeric,Default=240},
				
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
	    ad=false;
	
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Jelajahcoin";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //div[@class='alert alert-success']
        FailXPath = "//*"; //div[@class='alert alert-danger']

        //Let Faucet Collector start up everything
        base.Start();
    }
	

	
	
    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }
	

	bool ad;
	
	
	
    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return true;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }


	
	
//=============//
//GetFaucetWaitTime
//=============//
    public override int GetFaucetWaitTime()
    {
	   
        if (ad)
        {

         Driver.Navigate().Refresh(); //Refresh 
		 Wait();
		 Wait(2);
		 
		 ad=false;
		 
         //Time
         var TimeExist = ElementByXPath("//p[@class='alert alert-info']");         
         if(IsVisible(TimeExist)) //Visible
         {
         Log("CountDownTimer");  
         int min_INT;
		 min_INT = Convert.ToInt32(TimeExist.Text.Trim().Split(' ')[4])*60;
         return min_INT; 
         }
		 
        }// end ad
		
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//=============//
//GetFaucetWaitTime
//=============//
	
	

    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }



    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
	
		//BeforeSolveFaucet();
		 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	

	
	
    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
		
        GoToUrl("https://jelajahcoin.me/reward/doge/");
		Wait();	
		Wait(10);	
        
        //Time
        var TimeExist = ElementByXPath("//p[@class='alert alert-info']");         
        if(IsVisible(TimeExist)) //Visible
        {
        Log("CountDownTimer");  
        int min_INT;
		min_INT = Convert.ToInt32(TimeExist.Text.Trim().Split(' ')[4])*60;
        return min_INT; 
        }
		
        //StepsNext_Function(); //call if visible	
	
        var Addy = ElementByXPath("//center[1]/div/input[@class='form-control']");
        if (IsVisible(Addy))
        {
            SetText(Addy, GetSetting("Bitcoin"));
        }
		
		Wait(2);
        
        //SolveCaptcha if apper
        var result = base.DoSolveCaptcha();
        RecaptchaUtility utility = new RecaptchaUtility(this);
        utility.DoSolve();
		
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }

		Wait(2);
        
        var ClaimButton = ElementByXPath("//input[@value='CLAIM'] | //input[@class='btn btn-primary btn-lg claim-button']");
        if (IsVisible(ClaimButton))
        {
            Click(ClaimButton);
		    Log("ClaimButton");
        }
		
		Wait(2);
			
		if (IsVisible(ElementByXPath("//div[@class='alert alert-danger']") )) //danger message
        {
         int MyCustomTimeINT;
         MyCustomTimeINT = GetIntSetting("Time") * 60; 
         return MyCustomTimeINT;  
        }	
		
		if (IsVisible(ElementByXPath("//div[@class='alert alert-success']") )) //success message
        {
		//CheckFaucetResult(); //skip all actions - and call to --> CheckFaucetResult - to make sure That FC mark as "Payout" before
        ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();
        }
		
		Wait(2);
		
		return GetWaitSetting(); 
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
	
    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
            //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	


	
	//================//		
	//Steps - next stuff
	//================//
		
    public void StepsNext_Function()
    {

        var Step_1_Next = ElementByXPath("//input[@class='btn btn-primary btn-lg claim-button' and @name='1']");
        if (IsVisible(Step_1_Next))
        {
            Click(Step_1_Next);
			Wait(15);
        }

        var Step_2_Next = ElementByXPath("//input[@class='btn btn-primary btn-lg claim-button' and @name='2']");
        if (IsVisible(Step_2_Next))
        {
            Click(Step_2_Next);
			Wait(15);
        }		

        var Step_3_Next = ElementByXPath("//input[@class='btn btn-primary btn-lg claim-button' and @name='3']");
        if (IsVisible(Step_3_Next))
        {
            Click(Step_3_Next);
			Wait(15);
        }		
		
        var Step_4_Next = ElementByXPath("//input[@class='btn btn-primary btn-lg claim-button' and @name='4']");
        if (IsVisible(Step_4_Next))
        {
            Click(Step_4_Next);
			Wait(15);
        }	
		
        var Step_5_Next = ElementByXPath("//input[@class='btn btn-primary btn-lg claim-button' and @name='5']");
        if (IsVisible(Step_5_Next))
        {
            Click(Step_5_Next);
			Wait(15);
        }	

        var Step_6_Next = ElementByXPath("//input[@class='btn btn-primary btn-lg claim-button' and @name='6']");
        if (IsVisible(Step_6_Next))
        {
            Click(Step_6_Next);
			Wait(15);
        }	

        var Step_7_Next = ElementByXPath("//input[@class='btn btn-primary btn-lg claim-button' and @name='7']");
        if (IsVisible(Step_7_Next))
        {
            Click(Step_7_Next);
			Wait(15);
        }	

        var Step_8_Next = ElementByXPath("//input[@class='btn btn-primary btn-lg claim-button' and @name='8']");
        if (IsVisible(Step_8_Next))
        {
            Click(Step_8_Next);
			Wait(15);
        }
		
		//============//
		
    }// StepsNext_Function
	

	
}
