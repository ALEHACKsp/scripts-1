

//==================//
//script Written by: ••AviramDayan•• 04/05/2019 10:30AM
//Last Update: 25/09/2019 10:30AM - Version 2
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
//css_inc ShortLinkUtilities
//css_inc RecaptchaUtilities


public class Bitvest : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("http://Bitvest.io/")
            {
                new FaucetSetting(){Name="Email",Display="UserName",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="Address",Display="Bitcoin Address",Type=EditorType.TextBox,Required=true},
				
                new FaucetSetting(){Name="FaucetClaim",Display="FaucetClaim - every 10Hours",Type=EditorType.CheckBox,Default=true},		
                new FaucetSetting() { Name = "LimitFaucet", Display = "LimitFaucet", Type = EditorType.Numeric, Default = 50 },
				
				
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

	
	
	
	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
		ad=false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Bitvest";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //div[@id='btc-balance']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
	
	
	
	bool ad;
	
	
    public override int DoInit()
    {
		

	   
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
		 return ElementByXPath("//div[@data-channel='3' and contains(text(),'Inbox')]") != null;
		
    }
//==================//
//save Login Cookies 
//==================//
	
	
	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
	
	
	
	
	

	
//=============//
//start DoLogin
//=============//
    public override int DoLogin()
    {
		
	 //var checks login or exit
     var ExitButton = ElementByXPath("//div[@data-channel='3' and contains(text(),'Inbox')]"); //SIGN OUT

		 
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

        //else go to normal login
		GoToUrl("https://Bitvest.io/");
        Wait();	
	    Wait(2);		
	
          
        var AccountClose = ElementByXPath("//div[@class='side-tabs']/div[@class='tab']/i[@class='icon-account']");
		if (IsVisible(ExitButton))
	    {
        var AccountTab = ElementByXPath("//div[@data-tab='account']");	
		Click(AccountTab);	
		Log("AccountTab");
		}
	
        var box_user = ElementByXPath("//input[@name='username']");
        SetText(box_user, GetSetting("Email"));
		
        Wait(2);
		
        var box_pass = ElementByXPath("//input[@name='password']");
        SetText(box_pass, GetPassword("Pass"));
		
        Wait(2);
/*
        //SolveCaptcha if apper
        var result = base.DoSolveCaptcha();
        RecaptchaUtility utility = new RecaptchaUtility(this);
        utility.DoSolve();
        if (result > 0)
        {
          return Fail("fail not solve"); //return to solve again - if something wrong
        }
		ExecuteScript("___grecaptcha_cfg.clients[0].aa.l.callback('" + Context.CaptchaResult.Result + "');");
*/		 
        Wait();	
	    Wait(2);
		
        var ButtonLog = ElementByXPath("//button[@data-submit='submit']");
        Click(ButtonLog);
		
        Wait();		
        Wait(2);		

/*
	    var ErrorMessage = ElementByXPath("//p[@class='error']");	 
	    if (IsVisible(ErrorMessage))
		{			
		Log(ErrorMessage.Text);
        Wait();	
		return 1*60;		
		}
	
        Wait();		
        Wait(4);		

	    if (!IsVisible(ErrorMessage))
		{			
		GoToUrl("https://Bitvest.io/");	
		}
*/		
		
	 }	//end ExitButton
	 
	 
        //This faucet has nothing to do here.    
        return base.DoLogin();
    }
//=============//
//start DoLogin
//=============//
	

	
	
	
	
//==========//
//AfterLogin
//=========//
 public override int AfterLogin()
 {
 
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
 }
//==========//
//AfterLogin
//=========//
	
	
	

	
//=============//
//GetFaucetWaitTime
//=============//
 public override int GetFaucetWaitTime()
 {

    if(ad)
	{
        Driver.Close();  // Close specific chrome window
        Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
        Driver.Dispose();  // Close the chromedriver.exe
        //ad=false; //solve the problem in start - after he return to script again
        return GetWaitSetting();    
	
		/*
        var WaitTimerText = ElementByXPath("//div[@id='timer']");
        if (IsVisible(WaitTimerText))
        {
            try {
				Log("FaucetClaim: WaitTimerText apper"); 
                int m, s;
                m = Convert.ToInt32(WaitTimerText.Text.Split(':')[0])*60;
                s = Convert.ToInt32(WaitTimerText.Text.Split(':')[1]);
                
				Driver.Close();  // Close specific chrome window
                Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
                Driver.Dispose();  // Close the chromedriver.exe
                return m + s;

            }
            catch (Exception)
            {
                return 1800;

            }

        } // end WaitTimerText
		*/
		
		
    }	//end ad
		
		
   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
//=============//
//GetFaucetWaitTime
//=============//
	
	
	
	

    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	
	

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	
	
	


//=============//
//DoSolveFaucet
//=============//
  public override int DoSolveFaucet()
  {
	
    //=========================//
    //FaucetClaim - Normal Way//
    //=========================//
    if (GetBoolSetting("FaucetClaim"))
	{
			
      //else go to normal login
      GoToUrl("https://Bitvest.io/");
		
	  Wait();
	  Wait(2);

      var FaucetTab = ElementByXPath("//div[@data-tab='faucet' and @class='tab']"); 
      if (IsVisible(FaucetTab))
      {
      Click(FaucetTab);	
      Log("FaucetTab");		
      }
		
	  Wait();
	  Wait(2);
	  
      var ChooseTokenTab = ElementByXPath ("//div[2]/button[3 and @data-currency='tokens']"); //("//button[@class='blue side-input side-input-50 currency' and @data-currency='tokens']")
      Click(ChooseTokenTab);	
      Log("ChooseTokenTab");		
		
	  Wait();
	  Wait(2); 
	  

      var balance = ElementByXPath("//div[7 and @class='quick-access']/table/tbody/tr[1]/td[2]/div[2]/span");  //("//div[2]/span[@class='token-balance']")
      string BalanceSTRING = balance.Text.Trim().Split('.')[0];
      int BalanceINT = Convert.ToInt32(BalanceSTRING);

      int MyAmount;
      Int32.TryParse(GetSetting("LimitFaucet"), out MyAmount);


      if (BalanceINT > MyAmount) // the LIMIT Default 0.00000100 BTC 
      {
		Log("Balance > Above - Not good"); 
	  }


      if (BalanceINT < MyAmount) // the LIMIT Default 0.00000100 BTC 
      {
		  
		Log("Balance < Under - good we claim faucet");
		  
        var iframe2MainTag = ElementByXPath("//div[@class='g-recaptcha']/div/div/iframe[contains(@src,'google.com/recaptcha/api')]");
        if (IsVisible(iframe2MainTag))
		{
          var result = base.DoSolveCaptcha();
          RecaptchaUtility utility = new RecaptchaUtility(this);
          utility.DoSolve();
          if (result > 0)
          {
            return Fail("fail not solve"); //return to solve again - if something wrong
          }
		  ExecuteScript("___grecaptcha_cfg.clients[0].aa.l.callback('"+Context.CaptchaResult.Result+"');");
		}
		
	    Wait();		
	    Wait(2);
	
        var Button_Claim = ElementByXPath("//button[@id='submitCaptcha']"); 
        if (IsVisible(Button_Claim))
		{
		Click(Button_Claim);
        Log("Button_Claim");
		}
		
	    Wait();		
	    Wait(2);
	
        var Success_Claim = ElementByXPath("//div[@class='alert alert-success']"); //and contains(text(),'sent to you')
        if (IsVisible(Success_Claim))
		{
		Log("FaucetClaim - Success_Claim ");  
        //ad = true; //call to timer / and do success
		}
		
        ad = true; //call to timer / and do success
		
		
      } //end  MyAmount < under
		
	} //end FaucetClaim

	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
  }
	
	


	
	
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
	
	
	

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	
	
} //public class dogeto
