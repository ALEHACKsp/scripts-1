using System;
using System.Text.RegularExpressions;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;


public class Rotate4AllScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.rotate4all.com/ptp/")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="TT",Display="TimeToWait(min)",Type=EditorType.TextBox,Default=120},
                new FaucetSetting(){Name="PN",Display="Get Random % every watch(this will make it difficult to receive a ban)", Type=EditorType.CheckBox,Default=true},
              
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "rotate4all.com";
        FirstTime = true;
        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//a[@href='/ptp/statistics']//span[@class='btn btn-success btn-xs ubut']";
        FailXPath = "//a[@href='/ptp/statistics']//span[@class='btn btn-fail btn-xs ubut']";

        //Let Faucet Collector start up everything
        base.Start();
    }
    bool FirstTime;
    int TT;
    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        try
        {
            TT = Convert.ToInt32("TT")*60;
        }
        catch (Exception)
        {
            TT = 3600;
        }

        Log("Deleting Cookies, This website doesn't support save cookies");
                Driver.Manage().Cookies.DeleteAllCookies();
                Driver.Navigate().Refresh();
                Wait();
                FirstTime = false;
            
      
        OnFail = 0;
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[@href='/ptp/?logout']") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        if (!Driver.Url.Contains("https://www.rotate4all.com/ptp/login"))
        {
            GoToUrl("https://www.rotate4all.com/ptp/login");
        }
        Wait();
        var UserBox = ElementByXPath("//input[@name='vser_name']");
        if (!IsVisible(UserBox))
        {
            return Fail("User Box not visible");
        }
        UserBox = ElementByXPath("//input[@name='vser_name']");
        Wait();
      
        SetText(UserBox, GetSetting("User"));
        var PasswordBox = ElementByXPath("//input[@name='user_password']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password Box not visible");
        }
        SetText(PasswordBox, GetPassword("Pass"));
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solve captcha login");
        }
        Wait();
        var button = ElementByXPath("//button[@value='Login']");
        if (!IsVisible(button))
        {
            return Fail("Button isn't visible");
        }
        Click(button);
        Wait();
        if(IsVisible(ElementByXPath("//div[@class='swal-icon swal-icon--error']")))
        {
            var textError = ElementByXPath("//div[@class='swal-title']");
            if (IsVisible(textError))
            {
                Log(textError.Text);
            }
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    /// 
    int OnFail;
    string response;
    public override int DoSolveFaucet()
    {
        response = "";
        string PastText = "";
        Driver.Manage().Window.Maximize();
        int Ntoview;
        if (GetBoolSetting("PN")) {
            Ntoview = Random(30, 100);
        }
        else {
            Ntoview = 100;
                }

        int ActualAds=0;
        bool FirstWatch = false;
        Log("You will see " + Ntoview.ToString() + "  % of Ads");
        int NSites = (1250 * Ntoview) / 100;
        if (!Driver.Url.Contains("https://www.rotate4all.com/ptp/statistics"))
        {
            GoToUrl("https://www.rotate4all.com/ptp/statistics");
        }
        Wait();
        string Xpath_ = "//input[contains(@style,'top:')]";
        var Start = ElementByXPath("//div[@class='btn-toolbar']//a[@href='http://www.rotate4all.com/ptp/surf']");
        if (IsVisible(Start))
        {
            Click(Start);
            Wait();
            bool IsFinished = false;
            
			
            while (!IsFinished)
            {
                try
                {

                    if (IsVisible(ElementByXPath("//a[@href='/ptp/login']")))
                    {
                        IsFinished = true;
                        return Fail("Something is wrong, You are not login in");
                    }
                    DateTime t = DateTime.Now.AddSeconds(20);
                    while(ElementByXPath(Xpath_)==null && ElementByXPath("//iframe[contains(@src,'google.com/recaptcha')]")==null)
                    {
                        if (DateTime.Now > t)
                        {
                            break;
                        }
                        Wait(1);
                    }
                   
                    var ProgressBar = ElementByXPath("//div[@class='shd']");
                    if (ProgressBar != null)
                    {
                        Log(ProgressBar.GetAttribute("data-original-title"));
                        if (ProgressBar.GetAttribute("data-original-title").Contains("1249") || ProgressBar.GetAttribute("data-original-title").Contains((Ntoview-1).ToString()))
                        {
                            return TT;
                        }
                    }
                 if(IsVisible(ElementByXPath("//div[@class='alert alert-danger' and contains(text(),'limit reached for today')]"))){
			
			return TT;
			}
                    if (ElementByXPath("//iframe[contains(@src,'google.com/recaptcha')]") != null)
                    {
					try{
					
					IWebElement web_Element_To_Be_Hovered = ElementByXPath("//iframe[contains(@src,'google.com/recaptcha')]");
                        Actions builder= new Actions(Driver);
                            builder.MoveToElement(web_Element_To_Be_Hovered).Build().Perform();
                            Wait(1);
							}
							catch(Exception){
							
							}
							
                        var result = DoSolveCaptcha();
                        if (result > 0)
                        {
                            return Fail("Fail solve captcha");
                        }
                        Wait();
                      

                       

                       string callback=ExecuteScript("return ___grecaptcha_cfg.clients[0].RY.W.callback.toString();") as string;
                     
                        ExecuteScript(callback + "('" + Context.CaptchaResult.Result + "');");
                   
                  
                        Wait();
                       
                    }
                    else
                    {
                        var button = ElementByXPath(Xpath_);
                        if (button != null)
                        {
                           
                            IWebElement web_Element_To_Be_Hovered = ElementByXPath("//article//article");
                        Actions builder= new Actions(Driver);
                            builder.MoveToElement(web_Element_To_Be_Hovered).Build().Perform();
                            Wait(1);
                          


 
                            button = ElementByXPath(Xpath_);
                            Actions builder_ = new Actions(Driver);
                            builder_.MoveToElement(button).Build().Perform();
                            System.Threading.Thread.Sleep(300);
                            button = ElementByXPath(Xpath_);
                          
                            Click(button);

                        }
                        else
                        {
                            Log("Javascript Error trying to restore session, Resize Browser");
                            try
                            {
                                Driver.Manage().Window.Maximize();
                            }
                            catch (Exception)
                            {

                            }
                            Log("Remember that this script doesn't support HideBrowser the browser windows need to be full screenmode");

                            if (!Driver.Url.Contains("https://www.rotate4all.com/ptp/statistics"))
                                {
                                    GoToUrl("https://www.rotate4all.com/ptp/statistics");
                                }
                            else
                            {
                                Driver.Navigate().Refresh();
                            }
                                Wait(2);

                                var Start_ = ElementByXPath("//a[@href='http://www.rotate4all.com/ptp/surf']");
                                if (IsVisible(Start_))
                                {
                                    Click(Start_);
                                }
                                Wait();
                            

                        }
                    }
                   
                }
                catch (Exception)
                {

                }
            }

        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
    private string GetRecaptchaCallback()
    {
        string Callback = "";
        try
        {
            //To get properties of a object 
            string GetProperties = "function getPropertyNames(obj) {var proto = Object.getPrototypeOf(obj);return ( (typeof proto === 'object' && proto !== null ? getPropertyNames(proto) : []).concat(Object.getOwnPropertyNames(obj)).filter(function(item, pos, result) { return result.indexOf(item) === pos; }).sort()    );}";
            //Call Method Get properties with recaptcha clients to see number of clients available in recaptcha
            string FirstExecute = "return getPropertyNames(___grecaptcha_cfg.clients).toString();";
            int NumberOfCharactersFirst = 2; // the first element contains recaptcha callback has two characters
           int NumberOfCharactersSecond = 1; // second element has one character
            string Response = ExecuteScript(GetProperties+FirstExecute) as string;
            var Response_ = Response.Replace("\"","").Split(',');

            if (Response_.Length > 0) //grecaptcha.clients exist
            {
                for (int i = 0; i < Response_.Length; i++)
                {
                    if (IsANumber(Response_[i]))
                    {
                        //actual response for clients
                        string GetActualClient = "return getPropertyNames(___grecaptcha_cfg.clients[" + Response[i] + "]).toString();";
                        var ActualResponse = ExecuteScript(GetProperties + GetActualClient) as string;
                        var ActualResponse_ = ActualResponse.Split(',');
                        // This response contains 
                        if (ActualResponse_.Length > 0)// if this response has other properties
                        {
                            for (int j = 0; j < ActualResponse_.Length; j++)
                            {

                                if (ActualResponse_[j].Length == NumberOfCharactersFirst)
                                {
                                    string GetActualClientTwo = "return getPropertyNames(___grecaptcha_cfg.clients[" + Response[i] + "]." + ActualResponse_[j] + ").toString();";
                                    var SecondResponse = ExecuteScript(GetProperties + GetActualClientTwo) as string;
                                    var SecondResponse_ = SecondResponse.Replace("\"", "").Split(',');
                                    if (SecondResponse_.Length > 0) // If second response contains other element
                                    {
                                        for (int k = 0; k < SecondResponse_.Length; k++)
                                        {
                                            if (SecondResponse_[k].Length == NumberOfCharactersSecond)
                                            {
                                                string GetActualClientThree = "return getPropertyNames(___grecaptcha_cfg.clients[" + Response[i] + "]." + ActualResponse_[j] + "." + SecondResponse_[k] + ").toString();";
                                                string ThreeResponse = ExecuteScript(GetProperties + GetActualClientThree) as string;
                                                if (ThreeResponse.Contains("callback"))
                                                {
                                                    Callback = " ___grecaptcha_cfg.clients[" + Response[i] + "]." + ActualResponse_[j] + "." + SecondResponse_[k] + ".callback";
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                }
            }
            else
            {
                Log("Could not find callback");
            }

        }
        catch (Exception)
        {
            Log("Could not find callback");
        }
        return Callback;

    }
    private bool CallRecaptcha()
    {
        bool IsSolved = false;
        string callback = GetRecaptchaCallback();
        string IsSolved_=ExecuteScript("try{" + callback+ "('" + Context.CaptchaResult.Result + "');return 'true'}catch(Exception){return 'false'}") as string;
        if (!IsSolved_.Contains("true"))
        {
            string callback2= ExecuteScript("return" + callback+".toString();") as string;
            if (!String.IsNullOrWhiteSpace(callback2))
            {
           
                IsSolved_ = ExecuteScript("try{" + callback2 + "('"+Context.CaptchaResult.Result+"');return 'true'}catch(Exception){return 'false'}") as string;
                if (IsSolved_.Contains("true"))
                {
                    IsSolved = true;
                }
            }
        }
        else
        {
            IsSolved = true;
        }

        return IsSolved;
    }
    private static bool IsANumber(string number)
    {
        Regex r = new Regex("^[0-9 ]");
        if (r.IsMatch(number))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
