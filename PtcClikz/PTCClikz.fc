using System;
using System.Drawing;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Remote;
using Base.Captcha;
using System.Drawing.Drawing2D;

public class PTCClikz : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.ptcclikz.com/")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
            
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "PTCCLIKZ|Just a moment...";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//td[contains(text(),'$')]";
        FailXPath = "//div[@class='']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
		Driver.Manage().Cookies.DeleteAllCookies();
		GoToUrl("https://www.ptcclikz.com/index.php?view=login");
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[@class='logout']") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        GoToUrl("https://www.ptcclikz.com/index.php?view=login");
        var LoginBox = ElementByXPath("//input[@name='username']");
        if (!IsVisible(LoginBox))
        {
            return Fail("Login box not visible");
        }
        SetText(LoginBox, GetSetting("User"));
        var PassBox = ElementByXPath("//input[@name='password']");
        if (!IsVisible(PassBox))
        {
            return Fail("Password box not visible");
        }
        SetText(PassBox, GetPassword("Pass"));
		Wait(2, 3);
		var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimglogin']"), ElementByXPath("//input[@id='captcha_login']"));
		if (result > 0)
		{
			return Fail("Problem with captcha");
		}
		var agree = ElementByXPath("//input[@value='Login']");
        if (agree == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Login button not found.");
        }
		Click(agree);
		Wait(5);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
		//var security = ElementByXPath("//input[@id='security_answer']");
		//if (IsVisible(security))
		//{
		//	SetText(security, "Vietnam");
		//}
		//Click(ElementByXPath("//input[@value='Send']"));
		//Wait(40);
		//var bagin = ElementByXPath("//a[contains(text(),'Click to open your account')]");
		//if (IsVisible(bagin))
		//{
		//	Click(bagin);
		//}
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        GoToUrl("http://www.ptcclikz.com/index.php?view=ads");
		Wait();
        var access = ElementByXPath("//input[@value='Give me access']");
        int cont = 0;
        do
        {
            
            if (IsVisible(access))
            {
                var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimg']"), ElementByXPath("//input[@id='captcha']"));
                if (result > 0)
                {
                    return Fail("Problem with captcha");
                }
                Click(access);
            }
            Wait(2, 3);
            access = ElementByXPath("//input[@value='Give me access']");
            if (cont >= 3)
            {
                break;
            }
            cont++;
        } while (IsVisible(access));


        Wait(3);
		var Ads = ElementsByXPath("//div[@class='ad-block  ' or @class='ad-block ']//span[contains(@onclick,'window')]");
        int count_ads = Ads.Count;
   
        foreach(IWebElement ad in Ads)
        {
            if (ad.Text.Contains("DO NOT CLICK") || ad.Text.Contains("BOT CHECK") || !IsVisible(ad))
            {
                count_ads--;
            }


        }
        if (count_ads>0)
        {
            return 0;
        }
        return 7200;
        //let Faucet Collector continue.
       
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
       

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveFaucet();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
	private static bool cs;
    public override int DoSolveFaucet()
    {
		cs = false;
		GoToUrl("http://www.ptcclikz.com/index.php?view=ads");
		Wait();
		var access = ElementByXPath("//input[@value='Give me access']");
		if (IsVisible(access))
		{
			var result = DoSolveCaptcha();
			if (result > 0)
			{
				return Fail("Problem with captcha");
			}
		}
		Click(access);
		Wait(3);
		
			try
			{
				var n = 0;
				var Ads = ElementsByXPath("//div[@class='ad-block  ' or @class='ad-block ']//span[contains(@onclick,'window')]");
			
				Log(Ads.Count + " Standard ads detected");
				CheckForPopupsEnabled = false;
				while (Ads.Count > n)
				{
                try
                {
                    if (Ads[n].Text.Contains("DO NOT CLICK") || Ads[n].Text.Contains("BOT CHECK") || !IsVisible(Ads[n]))
                    {
                        n++;
                    }
                    else
                    {

                        //var curl = Ads[0].GetAttribute("onclick").Replace("_blank", "_self");
                        //ExecuteScript(curl);
                        CheckForPopupsEnabled = false;
                        Click(Ads[n], false);
                        Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                        Wait(5);
                        var verify = ElementByXPath("//input[@value='Continue']");
                        var countdown = ElementByXPath("//div[@id='progressbar']");
                        var tozero = ElementByXPath("//img[@src='modules.php?m=surfer&show=captcha']");
                        if (IsVisible(verify))
                        {
                            var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimglogin']"), ElementByXPath("//input[@id='captcha_login']"));
                            if (result > 0)
                            {
                                return Fail("Problem with captcha");
                            }
                            Click(verify);
                        }
                        DateTime t2 = DateTime.Now.AddSeconds(20);
                        while (IsVisible(ElementByXPath("//div[@class='adwait']")))
                        {

                            Wait();
                            if (DateTime.Now > t2)
                            {
                                break;
                            }
                        }
                        Wait();
                        countdown = ElementByXPath("//div[@id='progressbar']");
                        tozero = ElementByXPath("//img[@src='modules.php?m=surfer&show=captcha']");
                        DateTime t1 = DateTime.Now.AddSeconds(100);
                        while (IsVisible(countdown) && !IsVisible(tozero))
                        {
                            Wait();
                            countdown = ElementByXPath("//div[@id='progressbar']");
                            tozero = ElementByXPath("//img[@src='modules.php?m=surfer&show=captcha']");
                            if (DateTime.Now > t1)
                            {
                                break;
                            }
                        }
                        if (IsVisible(tozero))
                        {
                            bool solving = Solve_Image();
                            //Log("SOLVED");
                            Wait();
                            if (!solving)
                            {
                                Driver.Navigate().Refresh();
                            }
                            Wait();
                        }
                    }
                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    Wait();
                    if (Driver.Url.Contains("http://www.ptcclikz.com/index.php?view=ads"))
                    {
                        GoToUrl("http://www.ptcclikz.com/index.php?view=ads");
                    }
                    else
                    {
                        Driver.Navigate().Refresh();
                    }

                    Wait(2, 3);
                    var access_ = ElementByXPath("//input[@value='Give me access']");
                    if (IsVisible(access))
                    {
                        var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimg']"), ElementByXPath("//input[@id='captcha']"));
                        if (result > 0)
                        {
                            return Fail("Problem with captcha");
                        }
                        Click(access);
                        Wait(2, 3);
                    }


                    Ads = ElementsByXPath("//div[@class='ad-block  ' or @class='ad-block ']//span[contains(@onclick,'window')]");

                }
                catch (Exception)
                {
                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    Wait();
                    if (Driver.Url.Contains("http://www.ptcclikz.com/index.php?view=ads"))
                    {
                        GoToUrl("http://www.ptcclikz.com/index.php?view=ads");
                    }
                    else
                    {
                        Driver.Navigate().Refresh();
                    }

                    Wait(2, 3);
                    var access_ = ElementByXPath("//input[@value='Give me access']");
                    if (IsVisible(access))
                    {
                        var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimg']"), ElementByXPath("//input[@id='captcha']"));
                        if (result > 0)
                        {
                            return Fail("Problem with captcha");
                        }
                        Click(access);
                        Wait(2, 3);
                    }


                    Ads = ElementsByXPath("//div[@class='ad-block  ' or @class='ad-block ']//span[contains(@onclick,'window')]");
                }
                }
			}
			catch (Exception)
			{
				Driver.Navigate().Refresh();
				Wait();
			}
			//var ads = ElementsByXPath("//div[@class='ad-block  ' or @class='ad-block ']//span[contains(@onclick,'window')]");
			//if (ads.Count == 0)
			//{
			//	cs = true;
				
			//}
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
	
	public bool Solve_Image()
	{
		bool IsSolved = false;
        try
        {
            var capt = ElementByXPath("//img[@src='modules.php?m=surfer&show=captcha']");
            Bitmap captcha = TakeScreenshot(Base.Captcha.CaptchaService.Manual, capt);
            if (captcha.Width != 300 || captcha.Size.Height != 50)
            {

                captcha = ChangeImageSize(captcha, 300, 50);
            }
            Bitmap[] icons = new Bitmap[6];
            icons[0] = captcha.Clone(new Rectangle(0, 0, 50, 50), captcha.PixelFormat);
            icons[1] = captcha.Clone(new Rectangle(50, 0, 50, 50), captcha.PixelFormat);
            icons[2] = captcha.Clone(new Rectangle(100, 0, 50, 50), captcha.PixelFormat);
            icons[3] = captcha.Clone(new Rectangle(150, 0, 50, 50), captcha.PixelFormat);
            icons[4] = captcha.Clone(new Rectangle(200, 0, 50, 50), captcha.PixelFormat);
            icons[5] = captcha.Clone(new Rectangle(250, 0, 50, 50), captcha.PixelFormat);
            int solution = -1;
            bool[] img = new bool[5];
            int cont = 0;
            for(int i = 0; i < 5; i++)
            {
                img[i] = IsSame(icons[0], icons[i + 1]);
                if (!img[i])
                {
                    cont++;

                    if (cont >= 2)
                    {
                        break;
                    }
                }
            }
            if (cont >= 2)
            {
                solution = 1;
            }
            else
            {
                for(int i = 1; i < 5; i++)
                {
                    if (!img[i - 1])
                    {
                        solution = i + 1;
                        break;
                    }
                }
            }
            if (solution == -1)
            {
                return false;
            }
            else
            {
                ExecuteScript("endprogress(" + solution.ToString() + ");");
                Wait();
                IsSolved = true;
            }

        }
        catch (Exception)
        {
            IsSolved = false;
        }
        return IsSolved;
    }

	public Bitmap ChangeImageSize(Bitmap pImg, int pWidth, int pHeigth)
    {

        //Creating new bitmap

        Bitmap vBitmap = new Bitmap(pWidth, pHeigth);

        using (Graphics vGraphics = Graphics.FromImage((Image)vBitmap))

        {

            //Specifi interpolation

            vGraphics.InterpolationMode = InterpolationMode.HighQualityBicubic;

            //Draw

            vGraphics.DrawImage(pImg, 0, 0, pWidth, pHeigth);

        }

        //return image

        return vBitmap;

    }
	
	private bool IsSame(Bitmap image1,Bitmap image2)
    {
        bool IsSame = false;
        int cont = 0;
        for(int i = 0; i < image1.Width && !IsSame; i++)
        {
            for(int j = 0; j < image1.Height && !IsSame; j++){

                if (image1.GetPixel(i, j) == image2.GetPixel(i, j))
                {
                    cont++;
                }
                if (cont >= 2250)
                {
                    IsSame = true;
                    
                }
            }
        }

        return IsSame;
    }
    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
		GoToUrl("http://www.ptcclikz.com/index.php?view=account");
        return base.CheckFaucetResult();
    }
	
	
}