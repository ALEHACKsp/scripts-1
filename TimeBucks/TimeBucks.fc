using System;
using FaucetCollector.Script;
//css_inc RecaptchaUtilities
public class TimeBucks : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://timebucks.com/")
            {
                new FaucetSetting(){Name="User",Display="Enail",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="Roll",Display="Claim Roll",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="Watch",Display="WathAvaible Videos",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="PTC",Display="PTC",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="TT",Display="Time to wait",Type=EditorType.Numeric,Default=60},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "TimeBucks|Earn";
        cs = false;
        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//span[@id='counter2']";
        FailXPath = "//span[@id='Failed']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        var FormLoginButton = ElementByXPath("//span[@class='button-top btnLogin']");
        if (IsVisible((FormLoginButton)))
        {
            Click(FormLoginButton);
            Wait(1);
        }

        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[contains(@href,'action.php?action=logout')]") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    bool cs;
    public override int DoLogin()
    {
        var UsernameBox = ElementByXPath("//input[@id='username_box']");
        if (!IsVisible(UsernameBox))
        {
            return Fail("Username Box isn't visible");
        }
        SetText(UsernameBox, GetSetting("User"));

        Wait(2);
		
        var PasswordBox = ElementByXPath("//input[@id='password_box']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password Box isn't visible");
        }
        SetText(PasswordBox, GetPassword("Pass"));
		
        Wait(2);

        //SolveCaptcha if apper
        var result = DoSolveCaptcha();
        if (result > 0)
        {
        return result;
        }
		
        Wait(4);	
		
        var Button_Login = ElementByXPath("//input[@value='Log in Here']");
        if (!IsVisible(Button_Login))
        {
            return Fail("Login button not found");
        }
        Click(Button_Login);
	
        Wait(1);
		
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        if (cs)
        {
            int s;
            try
            {
                s = Convert.ToInt32(GetSetting("TT"));
            }
            catch (Exception)
            {
                s = 60;
            }
            cs = false;
            return s*60;
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        if (GetBoolSetting("PTC"))
        {
            if (!Driver.Url.Contains("https://timebucks.com/publishers/index.php?pg=earn&tab=view_content_timecave_slideshows")){

                GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=view_content_timecave_slideshows");
            }
            Wait();
            var ViewButtons = ElementsByXPath("//input[@value='View']");
            int n = 0;
            while (ViewButtons.Count>n)
            {
                CheckForPopupsEnabled = false;
                Click(ViewButtons[n],false);
                Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                Wait();
                if (IsVisible(ElementByXPath("//iframe[contains(@src,'google.com/recaptcha')]")))
                {
                    var result = DoSolveCaptcha();
                    if (result > 0)
                    {
                        return Fail("Fail solve recaptcha");
                    }
                    var SolverR = new RecaptchaUtility(this);
                    SolverR.DoSolve();
                    Wait(1);
                }
                bool AdCredited = false;
                DateTime t1 = DateTime.Now.AddSeconds(90);
                while (!AdCredited)
                {
                    int Tt;
                    try
                    {
                        Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                        Wait(4,6);
                        var TimerMessage = ElementByXPath("//h2[@class='timerMessage']");
                        if (IsVisible(TimerMessage))
                        {
                            Tt = Convert.ToInt32(TimerMessage.Text);
                        }
                        else
                        {
                            AdCredited = true;
                            break;
                        }

                    }
                    catch (Exception)
                    {
                        Tt = 5;
                    }
                    finally
                    {
                        Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                    }
                    if (t1 < DateTime.Now) { break; }
                    Wait(Tt);

                }
                Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                CheckForPopupsEnabled = true;
                CheckForPopups();
                Wait();
                if (!Driver.Url.Contains("https://timebucks.com/publishers/index.php?pg=earn&tab=view_content_timecave_slideshows"))
                {

                    GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=view_content_timecave_slideshows");
                }
                else
                {
                    Driver.Navigate().Refresh();
                    if (!Driver.Url.Contains("https://timebucks.com/publishers/index.php?pg=earn&tab=view_content_timecave_slideshows"))
                    {

                        GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=view_content_timecave_slideshows");
                    }

                }
                Wait(5);
                ViewButtons = ElementsByXPath("//input[@value='View']");
            }

        }
        if (GetBoolSetting("Watch"))
        {
            if (!Driver.Url.Contains("https://timebucks.com/publishers/index.php?pg=earn&tab=watch_video"))
            {
                GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=watch_video");
            }
            Wait(4);

            var Watch = ElementsByXPath("//input[@value='Watch']");
            int n = 0;
            while (Watch.Count > n)
            {
                CheckForPopupsEnabled = false;
                Click(Watch[n],false);
                Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                Wait(4);
                var Watch_ = ElementByXPath("//a[contains(@href,'check-watchVideo')]");
                if (IsVisible(Watch_))
                {
                    Click(Watch_);
                    Wait(5,9);
                }
                else
                {
                    n++;
                }
                CheckForPopupsEnabled = true;
                CheckForPopups();
                Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                Wait();

                if (!Driver.Url.Contains("https://timebucks.com/publishers/index.php?pg=earn&tab=watch_video"))
                {
                    GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=watch_video");
                }
                else
                {
                    Driver.Navigate().Refresh();
                    Wait(2);
                    if (!Driver.Url.Contains("https://timebucks.com/publishers/index.php?pg=earn&tab=watch_video"))
                    {
                        GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=watch_video");
                    }

                }
                Wait(4);

                Watch = ElementsByXPath("//input[@value='Watch']");
            }


        }
        if (GetBoolSetting("ClaimRoll"))
        {
            if (!Driver.Url.Contains("https://timebucks.com/publishers/index.php?pg=earn&tab=free_money"))
            {
                GoToUrl("https://timebucks.com/publishers/index.php?pg=earn&tab=free_money");
            }
            Wait(1);
            var rollButton = ElementByXPath("//input[@id='spin']");
            if (IsVisible(rollButton))
            {
                try
                {
                    Click(rollButton);

                }
                catch (Exception)
                {
                    Log("It's probably that the roll isn't avaible at that moment");
                }
            }
            else
            {
                Log("It's probably that the roll isn't avaible at that moment");
            }
        }
        cs = true;
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
