
using System;
using FaucetCollector.Script;
//css_inc ShortlinkUtilities
public class BitcoinsformeScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {

            return new FaucetSettings("https://bitcoinsfor.me/") 
			{ 
				
                new FaucetSetting(){Name="Email",Display="Email Address",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
				
                new FaucetSetting() { Name = "UseSolvemedia", Display = "UseSolvemedia (Checked) OR ReCaptcha (UnChecked)", Type = EditorType.CheckBox, Default = true},   

	            new FaucetSetting(){Name="CheckIn",Type=EditorType.CheckBox,Default=true, Display="Do check in"},
	            new FaucetSetting() { Name = "Auto1FreeSpin", Display = "Auto 1 Free Spin (Roll) - every 60 min ", Type = EditorType.CheckBox, Default = true},			
				
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

	
	
	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "bitcoinsfor.me";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='alert alert-success text-center']";
        FailXPath = "//div[@class='alert alert-danger text-center']";

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//



    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }
	
	

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	   //save Login Cookies - Check if the image of balance is there
        return ElementByXPath("//a[@href='/logout.php']") != null;
    }
//==================//
//save Login Cookies 
//==================//
	
	

	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

	
	
	
	
//=======//
//DoLogin 
//=======//
    public override int DoLogin()
    {

        //var checks login or exit
        GoToUrl("https://bitcoinsfor.me/login");
        Wait();
        if (GetBoolSetting("UseSolvemedia"))
        {
            var ChangeSolvemedia = ElementByXPath("//a[contains(text(),'Switch to SolveMedia captcha')]");
            if (IsVisible(ChangeSolvemedia))
            {
                Click(ChangeSolvemedia);
                Wait();
            }

        }
        else
        {
            var ChangeRecaptcha = ElementByXPath("//a[contains(text(),'Switch to reCAPTCHA captcha')]");
            if (IsVisible(ChangeRecaptcha))
            {
                Click(ChangeRecaptcha);
                Wait();
            }
        }

        var EmailBox = ElementByXPath("//input[@placeholder='Your Email']");
        if (!IsVisible(EmailBox))
        {
            return Fail("Email box is not visible");
        }
        SetText(EmailBox, GetSetting("Email"));

        var PasswordBox = ElementByXPath("//input[@placeholder='Your Password']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password box is not visible");
        }
        SetText(PasswordBox, GetPassword("Password"));

        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return result;
        }

        var ButtonLogin = ElementByXPath("//input[@value='Login']");
        if (!IsVisible(ButtonLogin))
        {
            return Fail("Fail button login is not found");
        }
        Click(ButtonLogin);
        Wait();
        var TextDanger = ElementByXPath("//span[@class='text-danger']");
        if (IsVisible(TextDanger))
        {
            Log(TextDanger.Text);
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }
//=======//
//DoLogin 
//=======//
	
	
	


    public override int AfterLogin()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

	
	
	
	
	
//================//
//GetFaucetWaitTime 
//================//
    public override int GetFaucetWaitTime()
    {
		if(IsVisible(ElementByXPath("//*[contains(text(),'have reached your daily claim limit')"))){
		
		return 3600;
		
		}
        var FaucetTimer = ElementByXPath("//span[@id='faucettimer']");
        if (IsVisible(FaucetTimer))
        {
            var SplitedTimer = FaucetTimer.Text.Trim().Split(':');
            int min = Convert.ToInt32(SplitedTimer[0])*60;
            int seg = Convert.ToInt32(SplitedTimer[1]);

            return min + seg;

        }

        var FaucetTimerDashBoard = ElementByXPath("//span[@id='faucet_timer']");
        if (IsVisible(FaucetTimerDashBoard))
        {
            var SplitedTimer = FaucetTimerDashBoard.Text.Trim().Split(':');
            int min = Convert.ToInt32(SplitedTimer[0]) * 60;
            int seg = Convert.ToInt32(SplitedTimer[1]);
            return min + seg;
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime 
//================//
    
	
	
	
	
	
    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

	
	

    public override int DoSolveCaptcha()
    {
        var DivCaptchaBlock = ElementByXPath("//div[contains(@onclick,'cca_pop_click()')]");
        if (IsVisible(DivCaptchaBlock))
        {
            try
            {
                ExecuteScript("arguments[0].setAttribute('style','display: none; ');");
            }
            finally
            {
                Wait();
            }
       
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	

    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
	
    public override int BeforeSolveFaucet()
    {
        if (GetBoolSetting("CheckIn"))
        {
            if (!Driver.Url.Contains("https://bitcoinsfor.me/checkin"))
            {

                GoToUrl("https://bitcoinsfor.me/checkin");
            }
           
            var ButtonCheckIn = ElementByXPath("//a[@class='btn btn-success' and contains(@href,'/checkin')]");
            if (IsVisible(ButtonCheckIn))
            {
                ShortLinkBypasser bypasser = new ShortLinkBypasser(this);
                ExecuteScript("arguments[0].setAttribute('target','');", ButtonCheckIn);
                System.Threading.Thread.Sleep(500);
                Click(ButtonCheckIn);
                bool Success=bypasser.DoShortLink();
                if (Success)
                {
                    Log("Shortlink Success");
                }
                else
                {
                    if (!Driver.Url.Contains("https://bitcoinsfor.me/checkin"))
                    {

                        GoToUrl("https://bitcoinsfor.me/checkin");
                    }
                    Wait(1);
                    ButtonCheckIn = ElementByXPath("//a[@class='btn btn-success' and contains(@href,'/checkin')]");
                    if (IsVisible(ButtonCheckIn))
                    {
                        Log("Shortlink Success");
                    }
                    else
                    {
                        return Fail
                            ("Shortlink Failed, We need try it again");

                    }
                }
              
            }
            else
            {
                Log
                  ("Button Check in is not visible seems that you are already check in today");
            }
          
         
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	
	
	
	
	
	
//==============//
//DoSolveFaucet	
//==============//
 public override int DoSolveFaucet()
 {


        //============//
        //Auto1FreeSpin
        //============//
 if (GetBoolSetting("Auto1FreeSpin"))
        {


            if (Driver.Url != "https://bitcoinsfor.me/"){
        GoToUrl("https://bitcoinsfor.me/");
        }

            var RollTimeVar = ElementByXPath("//span[@id='slots_timer']");


        if (!IsVisible(RollTimeVar))
        {
			
        //go to slot page
	
        GoToUrl("https://bitcoinsfor.me/slots");
	
        Wait(2);
		
        var RollButton = ElementByXPath("//input[@id='playFancy']");
                if (IsVisible(RollButton))
                {
                
                   
                        while (IsVisible(RollButton) && RollButton.Enabled)
                        {
                            Click(RollButton);
                        Wait(1);

                            DateTime t_ = DateTime.Now.AddSeconds(15);
                        RollButton = ElementByXPath("//input[@id='playFancy']");
                        while (IsVisible(RollButton) && RollButton.GetAttribute("value").Contains("Spinning..."))
                            {
                                Wait();
                                RollButton = ElementByXPath("//input[@id='playFancy']");
                                if (DateTime.Now > t_)
                                {
                                    break;
                                }
                            }
                            if (IsVisible(RollButton))
                            {
                                Log(RollButton.GetAttribute("value"));
                            }
                      
                        RollButton = ElementByXPath("//input[@id='playFancy']");
                       
                    }


                    
                }
        }
   }

   

   //===========//
   //FaucetClaim
   //===========//

                GoToUrl("https://bitcoinsfor.me/faucet.php");
                Wait();
				
                if (GetBoolSetting("UseSolvemedia"))
                {
                    var SwitchSolvemedia = ElementByXPath("//a[@id='switch_captcha_medthod' and contains(text(),'Switch to Solvemedia captcha')]");
                    if (IsVisible(SwitchSolvemedia))
                    {
                        Click(SwitchSolvemedia);
                        Wait();
                    }
                }
                else
                {
                    var SwitchToRecaptcha = ElementByXPath("//a[@title='Change your preferred captcha method' and contains(text(),'Switch to Google recaptcha')]");
                    if (IsVisible(SwitchToRecaptcha))
                    {
                        Click(SwitchToRecaptcha);
                        Wait();
                    }
                }
                var result = DoSolveCaptcha();
                if (result > 0)
                {
                    return Fail("Fail solving Captcha");
                }
                int Tries = 0;
                while(Context.CaptchaResult.Result=="cat" || Context.CaptchaResult.Result == "car")
                {
            var AdcopyRefresh = ElementByXPath("//a[@id='adcopy-link-refresh']");
               if (IsVisible(AdcopyRefresh))
                 {
                Click(AdcopyRefresh);
                Wait(2);
                 }
                    result = DoSolveCaptcha();
                     if (result > 0)
                    {
                      return Fail("Fail solving Captcha");
                      }

                  Tries++;
                     if (Tries > 3)
                      {
                    break;
                      }
                 }
                Wait(1);
                var ButtonClaim = ElementByXPath("//button[contains(text(),'Claim Now!')]");
                if (!IsVisible(ButtonClaim))
                {
                    return Fail("Button Claim is not visible");
                }
                Click(ButtonClaim);
                Wait();
                var AlertDanger = ElementByXPath("//div[@class='alert alert-danger text-center']");
                if (IsVisible(AlertDanger))
                {
                    Log(AlertDanger.Text);
                }

            

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet	
//==============//
	
	
	
	

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
