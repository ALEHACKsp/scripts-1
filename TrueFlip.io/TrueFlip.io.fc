
//==================//
//script Written by: ••AviramDayan•• 24/07/2019 06:00AM - Version 1
//Last Update: 24/07/2019 08:00AM - Version 2
//==================//

using System;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
//css_inc recaptchaUtilities

public class trueflip : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://trueflip.io/")
            {
                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},
                new FaucetSetting() { Name = "FaucetClaim", Display = "FaucetClaim - ON/OFF - Get free FLC (FlipCoin) Faucet - every 24hour.", Type = EditorType.CheckBox, Default = true},				
                new FaucetSetting(){Name="StoreCookies",Display="StoreCookies - ON/OFF ",Type=EditorType.CheckBox,Default=false },
            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "TrueFlip - Blockchain fair games";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //StoreCookies
        if (GetBoolSetting("StoreCookies"))            
        {
         StoreCookies = true;  //on
        }
		
        if (!GetBoolSetting("StoreCookies"))            
        {
         StoreCookies = false; //off
        }	
			
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {

		
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//div[@class='dropdown headernav headernav__user'] ") != null;  //find user menu
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		

     GoToUrl("https://trueflip.io/");


		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {
	
      var ExitButton = ElementByXPath("//div[@class='dropdown headernav headernav__user'] ") ; //find user menu

	
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

		GoToUrl("https://trueflip.io/");
		Wait();		
		Wait(2);

        var LoginButton_Start = ElementByXPath("//div[@class='headernav__guest headernav__guest-login']") ; 
        if (IsVisible(LoginButton_Start))
	    { 
	     Click(LoginButton_Start);
		 Log("Click on LoginButton_Start");	 
		}
		
		Wait();	
		Wait(3);
		
        var box_user = ElementByXPath("//input[@name='email']");
        SetText(box_user, GetSetting("Email"));
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[@name='password']");
        SetText(box_pass, GetPassword("Password"));
		
		Wait(2);	

        //SolveCaptcha if apper
         var result_1_var = DoSolveCaptcha();
         if (result_1_var > 0)
         {
             return Fail("Fail solving captcha - result_1_var");
         }	
		
        var ButtonLog = ElementByXPath("//button[@data-action='signin_user'] ");
        Click(ButtonLog);	
		
		Wait(3);

        var RobotMessage = ElementByXPath("//div[@class='toast-message' and contains(text(),'Confirm' | 'robot') ] ");
        if (IsVisible(RobotMessage))
	    { 
		 Log("RobotMessage");	
         //SolveCaptcha if apper
         var result_2_var = DoSolveCaptcha();
         if (result_2_var > 0)
         {
             return Fail("Fail solving captcha - result_2_var");
         }		 
		}//end RobotMessage
	
		Wait();
		
		/*
        if (Driver.Url.Contains("https://trueflip.io/dashboard"))   //if driver NOT Contains - GoToUrl
        {
            GoToUrl("https://trueflip.io/");
        }		
		
		Wait();
		*/
		
        /*		
        var Error_Message = ElementByXPath ("//div[@id='add_err']/div/div[@class='message' and contains(text(),'fille' | 'captcha' ) ]");
        if (IsVisible(Error_Message))
        {
            Log("Error_Message - Appear - we return after 1 min ");
            return 1*60; //we return after 1 min
        }
        */		


	 } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 



//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
 
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {	
		    ad=false;
		 
            Driver.Close();  // Close specific chrome window
            Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
            Driver.Dispose();  // Close the chromedriver.exe
		    return GetWaitSetting();	
        }
		

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {

		//==============//
		//FaucetClaim//
		//==============//
        if (GetBoolSetting("FaucetClaim"))
        {
			Log("FaucetClaim here");

            //CLOSE
            var DepositMenu_Close = ElementByXPath("//a[@class='navtitle'] ");
            if(!IsVisible(DepositMenu_Close)) 	//if not open - click to open		
            {
			  Log("DepositMenu_Close");			
			  Click(DepositMenu_Close); //click to open
              Wait();				   
              Wait(3);			  
			}
			
			//OPEN	
            var DepositMenu_Open = ElementByXPath("//a[@class='navtitle dropup'] ");		
            if(IsVisible(DepositMenu_Open))  //if open - do all stuff
            {
			   Log("DepositMenu_Open");

               var Balance_Full = ElementByXPath("//li/strong[@class='small' and contains(text(), '1' | '0' ) ]");			   
               if(IsVisible(Balance_Full)) //if the balance 1000 - do stuff
               {
                 Driver.Close();
                 Driver.Quit(); 
                 Driver.Dispose(); 
		         return GetWaitSetting();	
			   }//end Balance_Full - if the balance 1000			   
			   
               if(!IsVisible(Balance_Full)) //if the balance not 1000 - do stuff
               {
					  
                  var FaucetClaim_Start = ElementByXPath("//button[@class='btn btn-blue' and contains(text(),'Faucet') ] ");
                  if(IsVisible(FaucetClaim_Start)) 
                  {
				      Click(FaucetClaim_Start);
				      Log("Click on FaucetClaim_Start");
				   
                      Wait();				   
                      Wait(3);
				   
                      var FaucetClaim_Real = ElementByXPath("//button[@class='btn btn-green btn-lg' and contains(text(),'Get') ] ");
                      if(IsVisible(FaucetClaim_Real)) 
                      {
				          Click(FaucetClaim_Real);
				          Log("Click on FaucetClaim_Real");				
			          }
				   
			      }// end FaucetClaim_Start

               } //Balance NOT Full
			   
			}//end DepositMenu_Open

        }//end FaucetClaim
		//==============//
		
			
		ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	
        //return GetWaitSetting();	


        //We are good to continue
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }


	
} //end public class

