using System;
using FaucetCollector.Script;
using OpenQA.Selenium;

public class ClixBlueScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.clixblue.com")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="Security",Display="Security Question",Type=EditorType.TextBox,Required=true},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Clixblue";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='headerContainer']//div//div[3]";
        FailXPath = "//div[@class='banned']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//ul[@class='nav']//li//a[@href='index.php?view=logout']") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        var DivLogin = ElementByXPath("//a[contains(text(),'Login')]");
        if (IsVisible(DivLogin))
        {
            Click(DivLogin);
            Wait(1);
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
       
        var userBox = ElementByXPath("//input[@placeholder='Username']");
        if (!IsVisible(userBox))
        {
            return Fail("User box isn't visible");
        }
        SetText(userBox, GetSetting("User"));
        var PasswordBox = ElementByXPath("//input[@placeholder='Password']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password box isn't visible");
        }
        SetText(PasswordBox, GetPassword("Pass"));
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }

        var buttonLogin = ElementByXPath("//input[@value='Login']");
        if (IsVisible(buttonLogin))
        {
            Click(buttonLogin);
        }
        Wait();
        var ErrorBox = ElementByXPath("//div[@class='l2errorloginform error_box']");
        if (IsVisible(ErrorBox))
        {
            Log(ErrorBox.Text);
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        var ProgressBar = ElementByXPath("//div[@class='progressbar']");
        DateTime t1 = DateTime.Now.AddSeconds(15);
        while (IsVisible(ProgressBar))
        {
            Wait();
            ProgressBar=ElementByXPath("//div[@class='progressbar']");
            if (DateTime.Now > t1)
            {
                break;
            }
        }
        var Next = ElementByXPath("//a[contains(text(),'Click to open your account')]");
        if (IsVisible(Next))
        {
            Click(Next);
        }
        Wait(1);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        var security = ElementByXPath("//input[@id='security_answer']");
        if (IsVisible(security))
        {
            SetText(security, GetSetting("Security"));
            Click(ElementByXPath("//input[@value='Send']"));
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        GoToUrl("https://www.clixblue.com/index.php?view=ads");
        Wait();
        var Ads = ElementsByXPath("//div[@class='ad-block  ' or @class='ad-block ']//span[@class='pointer']");

        int count_ads = Ads.Count;

        foreach (IWebElement ad in Ads)
        {
            if (ad.Text.Contains("DO NOT CLICK") || ad.Text.Contains("BOT CHECK") || !IsVisible(ad))
            {
                count_ads--;
            }


        }
        if (count_ads > 0)
        {
            return 0;
        }
        return GetFaucetWaitTime();
        //let Faucet Collector continue.
       
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        var CaptchaLogin = ElementByXPath("//img[@id='captcha_image']");
        if (IsVisible(CaptchaLogin))
        {
            return DoSolveImageCaptcha(CaptchaLogin,ElementByXPath("//input[@id='captcha_code']"));


        }


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        GoToUrl("https://www.clixblue.com/index.php?view=ads");
        Wait();
        var access = ElementByXPath("//input[@value='Give me access']");
        if (IsVisible(access))
        {
            var result = DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Problem with captcha");
            }
        }
        Click(access);
        Wait(3);
        var Ads = ElementsByXPath("//div[@class='ad-block  ' or @class='ad-block ']//span[@class='pointer']");

        Log(Ads.Count + " Standard ads detected");
        try
        {
            var n = 0;
            CheckForPopupsEnabled = false;
            while (Ads.Count > n)
            {
                try
                {
                    if (Ads[n].Text.Contains("DO NOT CLICK") || Ads[n].Text.Contains("BOT CHECK") || !IsVisible(Ads[n]))
                    {
                        n++;
                    }
                    else
                    {
                        CheckForPopupsEnabled = false;
                        Click(Ads[n], false);

                        Wait();

                        Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                        Wait(2);
                        var GotoAd = ElementByXPath("//input[@id='EarnButton']");
                        DateTime t1 = DateTime.Now.AddSeconds(15);
                        while (!IsVisible(GotoAd))
                        {
                            Wait();
                            GotoAd = ElementByXPath("//input[@id='EarnButton']");
                            if (DateTime.Now > t1)
                            {
                                break;
                            }
                        }
                        if (IsVisible(GotoAd))
                        {
                            Click(GotoAd, false);
                        }
                        Wait(1);
                        Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                        Wait();
                        var progress = ElementByXPath("//progress[@id='ProgressBar']");
                        DateTime t2 = DateTime.Now.AddSeconds(120);
                        while (IsVisible(progress))
                        {
                            Wait(1);
                            progress = ElementByXPath("//progress[@id='ProgressBar']");
                            if (DateTime.Now > t2)
                            {
                                break;
                            }
                        }
                        Wait();
                        CheckForPopupsEnabled = true;
                        CheckForPopups();
                        Driver.SwitchTo().Window(Driver.WindowHandles[0]);

                       
                    }
                    Ads = ElementsByXPath("//div[@class='ad-block  ' or @class='ad-block ']//span[@class='pointer']");
                }
                catch (Exception)
                {
               
                 
                    CheckForPopupsEnabled = true;
                    CheckForPopups();
                    Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                    Wait();
                    if (Driver.Url.Contains("https://www.clixblue.com/index.php?view=ads"))
                    {
                        GoToUrl("https://www.clixblue.com/index.php?view=ads");
                    }
                    else
                    {
                        Driver.Navigate().Refresh();
                    }
                    Wait(2, 3);
                   
                    Ads = ElementsByXPath("//div[@class='ad-block  ' or @class='ad-block ']//span[@class='pointer']");

                }
            }
        }
        catch (Exception)
        {
            Driver.Navigate().Refresh();
            Wait();
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
