

//==================//
//script Written by: ••AviramDayan•• 26/05/2019 04:00PM
//Last Update: 22/08/2019 09:00AM - Version 4
//==================//

using System;
using System.Drawing;
using FaucetCollector.Script;
using System.Threading.Tasks;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;

//css_inc recaptchaUtilities
//css_inc AntiBotLinksUtility
//css_ref ImageProcessing
//css_ref ProcessingImagesUsingLockBits
//css_inc GetestCaptcha

public class stake : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the mdogeods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://stake.com/")
            {
                new FaucetSetting(){Name="Email",Display="Email OR UserName",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},
				
                new FaucetSetting() { Name = "btc", Display = "btc - claim", Type = EditorType.CheckBox, Default =false},	
                new FaucetSetting() { Name = "eth", Display = "eth - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "ltc", Display = "ltc - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "doge", Display = "doge - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "bch", Display = "bch - claim", Type = EditorType.CheckBox, Default = false},	
                new FaucetSetting() { Name = "xrp", Display = "xrp - claim", Type = EditorType.CheckBox, Default = false},	
				
                new FaucetSetting() { Name = "AffWithdraw", Display = "AffWithdraw", Type = EditorType.CheckBox, Default = false},	


            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "stake.com";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
	
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//button[@data-test='user-dropdown-menu']") != null;
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		

        //if we already login go to here
        GoToUrl("https://www.stake.com/");

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {
	
      var ExitButton = ElementByXPath("//button[@data-test='user-dropdown-menu']");

	
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

		GoToUrl("https://www.stake.com/");
		Wait();		
		Wait(2);
     
        var StartOpenLogin = ElementByXPath("//a[@data-test='login-link']");
	    if (IsVisible(StartOpenLogin))
	    { 
        Click(StartOpenLogin);
		}

		Wait(2);
		
        var box_user = ElementByXPath("//input[@name='emailOrName']");
        SetText(box_user, GetSetting("Email"));
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[@name='password']");
        SetText(box_pass, GetPassword("Password"));

		Wait(4);
		
        var ButtonLog = ElementByXPath("//button[@data-test='button-login']");
        Click(ButtonLog);
		
		Wait(2);
		
        var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); // iframe
        if (IsVisible(RecaptchaOpen_Iframe))
		{
        //SolveCaptcha if apper
        var result = base.DoSolveCaptcha();
        RecaptchaUtility utility = new RecaptchaUtility(this);
        utility.DoSolve();
		}
		
/*		
        var Error_Message = ElementByXPath ("//div[@id='add_err']/div/div[@class='message' and contains(text(),'fille' | 'captcha' ) ]");
        if (IsVisible(Error_Message))
        {
            Log("Error_Message - Appear - we return after 1 min ");
            return 1*60; //we return after 1 min
        }
*/		
		Wait();	

	 } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
 
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
		    //Log("return ad");
			ad=false;
			Driver.Close();  // Close specific chrome window
            Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
            Driver.Dispose();  // Close the chromedriver.exe
            return GetWaitSetting();
        }

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {
	  
	  
     //=============//
     //AffWithdraw
     //=============// 
     if (GetBoolSetting("AffWithdraw"))
     {
	 
		Log("AffWithdraw");
		GoToUrl("https://stake.com/affiliate/funds");

        var WithdrawCommission = ElementByXPath("//button[@class='Button-sc-1n30nq3-0 dyQPHX' and not (@disabled) ]");
        if (IsVisible(WithdrawCommission))
        {		
		Log("WithdrawCommission");		
        Click(WithdrawCommission);
        }//end WithdrawCommission
		
		
	 }//end AffWithdraw
     //=============//	 
 

        GoToUrl("https://www.stake.com/");
		Log("Go to faucet");	
		
		Wait();
		Wait(2);	
		

		//======//
		//btc//
		//======//
        if (GetBoolSetting("btc"))
        {	
        FaucetButton_Function(); //call
	
        Menu_Function(); //call

	    Wait(2);

        var btc_VAR = ElementByXPath("//ul[@class='styles__ActionList-sc-10xbq0o-0 gyYHwY styles__Ul-sc-18fkhar-0 gsiUwX']/li[1]");
        if (IsVisible(btc_VAR))
        {		
		Log("btc");		
        Click(btc_VAR);
        }//end btc_VAR
		
	    Wait(2);

        BalanceNeedToBeZero_Function();
		
	    Wait(2);

        Claim_Function(); //call
		
		}
        //=====//	
	
		//======//
		//eth//
		//======//
        if (GetBoolSetting("eth"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var eth_VAR = ElementByXPath("//ul[@class='styles__ActionList-sc-10xbq0o-0 gyYHwY styles__Ul-sc-18fkhar-0 gsiUwX']/li[2]");
        if (IsVisible(eth_VAR))
        {	
		Log("eth");		
        Click(eth_VAR);
        }//end eth_VAR
		
	    Wait(2);

        BalanceNeedToBeZero_Function();
	
	    Wait(2);
		
        Claim_Function(); //call
		}
        //=====//		
	
		//======//
		//ltc//
		//======//
        if (GetBoolSetting("ltc"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var ltc_VAR = ElementByXPath("//ul[@class='styles__ActionList-sc-10xbq0o-0 gyYHwY styles__Ul-sc-18fkhar-0 gsiUwX']/li[3]");
        if (IsVisible(ltc_VAR))
        {	
		Log("ltc");			
        Click(ltc_VAR);
        }//end ltc_VAR
		
	    Wait(2);

        BalanceNeedToBeZero_Function();
	
	    Wait(2);
		
        Claim_Function(); //call
		}
        //=====//		
			
		//======//
		//doge//
		//======//
        if (GetBoolSetting("doge"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var doge_VAR = ElementByXPath("//ul[@class='styles__ActionList-sc-10xbq0o-0 gyYHwY styles__Ul-sc-18fkhar-0 gsiUwX']/li[4]");
        if (IsVisible(doge_VAR))
        {	
		Log("doge");	
        Click(doge_VAR);
        }//end doge_VAR
		
	    Wait(2);

        BalanceNeedToBeZero_Function();
	
	    Wait(2);
		
        Claim_Function(); //call
		}
        //=====//				
			
		//======//
		//bch//
		//======//
        if (GetBoolSetting("bch"))
        {
        FaucetButton_Function(); //call
	
        Menu_Function(); //call

	    Wait(2);

        var bch_VAR = ElementByXPath("//ul[@class='styles__ActionList-sc-10xbq0o-0 gyYHwY styles__Ul-sc-18fkhar-0 gsiUwX']/li[5]");
        if (IsVisible(bch_VAR))
        {	
		Log("bch");
        Click(bch_VAR);
        }//end bch_VAR	
		
	    Wait(2);

        BalanceNeedToBeZero_Function();
	
	    Wait(2);
		
        Claim_Function(); //call
		}
        //=====//				
			
		//======//
		//xrp//
		//======//
        if (GetBoolSetting("xrp"))
        {
        FaucetButton_Function(); //call
		
        Menu_Function(); //call

	    Wait(2);

        var xrp_VAR = ElementByXPath("//ul[@class='styles__ActionList-sc-10xbq0o-0 gyYHwY styles__Ul-sc-18fkhar-0 gsiUwX']/li[6]");
        if (IsVisible(xrp_VAR))
        {	
		Log("xrp");
        Click(xrp_VAR);
        }//end xrp_VAR	
		
	    Wait(2);

        BalanceNeedToBeZero_Function();
	
	    Wait(2);
		
        Claim_Function(); //call
		}
        //=====//				
		


		ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	
        //return GetWaitSetting();	
	
	
        //We are good to continue
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This mdogeod gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet mdogeods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start mdogeod)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }


        //=========//
        //FaucetButton_Function
		//=========//
        public void FaucetButton_Function()
        {	
        var DepositButton = ElementByXPath("//a/span[contains(text(),'Deposit')]");
        Click(DepositButton);
		
		Wait(2);	
		
        var FaucetTAB = ElementByXPath("//a/span[contains(text(),'Faucet')]");
        Click(FaucetTAB);
		
		Wait(2);	

		}//end FaucetButton_Function
		//=========//
		
		
        //=========//
        //Menu_Function
		//=========//
        public void Menu_Function()
        {	
        Log("Menu_Function");		
        var MenuVAR = ElementByXPath("//div[2]/div/div[1]/span/button[@class='Button-sc-1n30nq3-0 hbLKty']");       			
        Click(MenuVAR);
		}//end Menu_Function
		//=========//
		
		
        //=========//
        //Claim_Function
		//=========//
        public void Claim_Function()
        {			
		
        var ClaimVAR = ElementByXPath("//button[@class='Button-sc-1n30nq3-0 feVsk' and not (@disabled) ]");   
        if (IsVisible(ClaimVAR))
        {	
        Log("Claim_Function");	
        Click(ClaimVAR);
        }//end ClaimVAR
		
		}//end Claim_Function
		//=========//
		

    public bool SeeIfThereisColor(Bitmap Image)
    {
        bool ContainsColor = false;
        for(int i = 0; i < Image.Width && ! ContainsColor; i++)
        {
            for(int j = 0; j < Image.Height; j++)
            {
                if(Image.GetPixel(i,j)!=Color.FromArgb(0,0,0) && Image.GetPixel(i,j)!=Color.FromArgb(255, 255, 255))
                {
                    ContainsColor = true;
                    break;
                }
            }
        }

        return ContainsColor;

    }
	
	
    private IWebElement FindCorrectArrow()
    {
        var Arrows = ElementsByXPath("//div[@class='verify-gap']");
        int n = 0;
        foreach(var arrow in Arrows)
        {
            if(SeeIfThereisColor(TakeScreenshot(Base.Captcha.CaptchaService.Manual,arrow)))
            {
                Log("Element is" + n.ToString());
                return arrow;

            }
            n++;

        }
        return null;

    }




        //=========//
        //BalanceNeedToBeZero_Function
		//=========//
        public void BalanceNeedToBeZero_Function()
        {	
		
        var BalanceNeedToBeZero = ElementByXPath("//p/span[contains(text(),'Balance must be')]");
        if (!IsVisible(BalanceNeedToBeZero)) //if is not visible - BalanceNeedToBeZero - DoSolveCaptcha 
        {	
        var result = DoSolveCaptcha();
		}
		
		}// end BalanceNeedToBeZero_Function
		//=========//



        //=========//
        //SolveCaptcha_RightSquare_Function
		//=========//
        public void SolveCaptcha_RightSquare_Function()
        {	
		
        /*
        GetestCaptchaUtilities.GetestCaptcha getestCaptcha = new GetestCaptchaUtilities.GetestCaptcha(this);
        bool res2=  getestCaptcha.DoInitSolve();
        */

        var Arrow = FindCorrectArrow();
        if(IsVisible(Arrow))
		{
            Log("SolveCaptcha_RightSquare_Function - Arrow");	

            var ToMove = ElementByXPath("//div[@class='verify-sub-block']");
            if (IsVisible(ToMove))
            {
                Log("SolveCaptcha_RightSquare_Function - ToMove");	
                Actions actions = new Actions(Driver);
                actions.DragAndDrop(ToMove, Arrow).Build().Perform();
                Wait();

			}
        }

	
		}// end SolveCaptcha_RightSquare_Function
		//=========//

	
} //end public class

