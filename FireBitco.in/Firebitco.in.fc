using System;
using System.Drawing;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;

public class FireBitco : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("http://www.firebitco.in")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "FireBitcoin";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='logged_stats']//ul//li[1]";
        FailXPath = "//div[@class='error']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        GotoiFimNot("http://www.firebitco.in/index.php?view=ads");
        Wait();
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[@href='index.php?view=logout']") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    private bool GotoiFimNot(string url)
    {
        if (!Driver.Url.Contains(url))
        {
            GoToUrl(url);
            return true;
        }
        return false;
    }
    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        // GO TO URL IF IM NOT HERE
        GotoiFimNot("http://www.firebitco.in/index.php?view=login");
        // INPUT USER
        var User_Box = ElementByXPath("//input[@name='username']");
        if (!IsVisible(User_Box))
        {
            return Fail("User box no visible");
        }
        SetText(User_Box, GetSetting("User"));
        Wait();
        var Pass_Box = ElementByXPath("//input[@name='password']");
        if (!IsVisible(Pass_Box))
        {
            return Fail("Fail, Pass Box not visible");
        }
        SetText(Pass_Box, GetPassword("Pass"));
        var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimglogin']"), ElementByXPath("//input[@id='captcha_login']"));
        var button = ElementByXPath("//input[@id='btn']");
        if (!IsVisible(button))
        {
            return Fail("Button Is not visible");
        }
        Click(button);
        Wait();
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }
    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        GotoiFimNot("http://www.firebitco.in/index.php?view=ads");
        Wait();
        // count number of ads
        var ads = ElementsByXPath("//div[@class='ad_back  ']");
        var ads_2 = ElementsByXPath("//div[@class='ad-block ']//span[contains(@onclick,'fixedads_surfer')]");
        if (ads.Count > 0 || ads_2.Count>0)
        {
            return 0;
        }
        else
        {
            return 4000;
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public bool WaitForElement(string XPathElement,int time_max,bool IsVisible_,bool not_visible)
    {
        DateTime t1 = DateTime.Now.AddSeconds(time_max);
        bool breaked = false;
        var element = ElementByXPath(XPathElement);
        if (IsVisible_)
        {
            if (not_visible)
            {

                while (IsVisible(element))
                {
                    Wait();
                    if (DateTime.Now > t1)
                    {
                        breaked = true;
                        break;
                    }
                    element = ElementByXPath(XPathElement);
                }
            }
            else
            {
                while (!IsVisible(element))
                {
                    Wait();
                    if (DateTime.Now > t1)
                    {
                        breaked = true;
                        break;
                    }
                    element = ElementByXPath(XPathElement);
                }
            }
        }
        else
        {
            if (not_visible)
            {
                while (!(element == null))
                {

                    Wait();
                    if (DateTime.Now > t1)
                    {
                        breaked = true;
                        break;
                    }
                    element = ElementByXPath(XPathElement);
                }

            }
            else
            {

                while (element == null)
                {

                    Wait();
                    if (DateTime.Now > t1)
                    {
                        breaked = true;
                        break;
                    }
                    element = ElementByXPath(XPathElement);
                }

            }
        }
        Wait();
        Log("Waited");
        return !breaked;
    }
    public override int DoSolveFaucet()
    {

        GotoiFimNot("http://www.firebitco.in/index.php?view=ads");
        Wait();
        // count number of ads
        var ads = ElementsByXPath("//div[@class='ad_back  ']");
        var ads_2 = ElementsByXPath("//div[@class='ad-block ']//span[contains(@onclick,'fixedads_surfer')]");
       while (ads.Count > 0 || ads_2.Count>0)
        {
            try
            {
                CheckForPopupsEnabled = false;
                if (ads.Count > 0)
                {
                    Click(ads[0]);
                }
                else
                {
                    Click(ads_2[0]);
                }
               
                Wait();
              
                    Driver.SwitchTo().Window(Driver.WindowHandles[1]);
              
             
         
                Wait(4);
              

                bool visible = WaitForElement("//div[@id='progressbar']", 90, true,true);
                Wait();
      
                if (visible)
                {

                    visible = WaitForElement("//map[@id='Map']", 30, true,false);

                    if (visible)
                    {
                        bool IsSolved = false;
                        int cont = 0;
                        while (!IsSolved)
                        {
               
                            IsSolved = solve_image_catpcha();
              
                            if (!IsSolved)
                            {
                                Driver.Navigate().Refresh();
                                visible = WaitForElement("//map[@id='Map']", 90, true,false);
                            }
                            if (cont >=3)
                            {
                                break;
                            }
                            cont++;
                        }



                    }



                }

                CheckForPopupsEnabled = true;
                CheckForPopups();
                Driver.SwitchTo().Window(Driver.WindowHandles[0]);

                if (!GotoiFimNot("http://www.firebitco.in/index.php?view=ads"))
                {
                    Driver.Navigate().Refresh();
                }
          
                Wait(2, 3);
                ads = ElementsByXPath("//div[@class='ad_back  ']");
                ads_2 = ElementsByXPath("//div[@class='ad-block ']//span[contains(@onclick,'fixedads_surfer')]");

            }
            catch (Exception ex)
            {
          
                CheckForPopupsEnabled = false;


            }
            finally {

                CheckForPopupsEnabled = false;


            }
        }
       
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
    public bool solve_image_catpcha()
    {
        bool IsSolved = false;
        var capt = ElementByXPath("//img[@src='modules.php?m=surfer&show=captcha']");

        Bitmap captcha=GetElementScreenShort(Driver, capt, "4");

        Bitmap[] icons = new Bitmap[6];

        icons[0]=captcha.Clone(new Rectangle(0, 0, 50, 50), captcha.PixelFormat);
        icons[1] = captcha.Clone(new Rectangle(50, 0, 50, 50), captcha.PixelFormat);
        icons[2] = captcha.Clone(new Rectangle(100, 0, 50, 50), captcha.PixelFormat);
        icons[3] = captcha.Clone(new Rectangle(150, 0, 50, 50), captcha.PixelFormat);
        icons[4] = captcha.Clone(new Rectangle(200, 0, 50, 50), captcha.PixelFormat);
        icons[5] = captcha.Clone(new Rectangle(250, 0, 50, 50), captcha.PixelFormat);


        string asset_d = AssetDir("Other");
        int result_=-1;
        asset_d += "\\Images FireBitcoin\\";
        bool enc = false;
        for(int i = 0; i < 6; i++)
        {
            for(int j = 1; j <= 10; j++)
            {
              
                string dir = asset_d + j.ToString() + ".png";
                FileStream s = new FileStream(dir, FileMode.Open);
                Bitmap imgtocomp = new Bitmap(Image.FromStream(s));
                s.Close();
                bool result = CompareImage(icons[i],imgtocomp);
                if (result)
                {
                    result_ = i;
                    enc = true;
                    break;
                   
                }
               
            }
        }

        if (enc)
        {

            result_++;
            ExecuteScript("endprogress(" + result_.ToString() + ");");
            Wait();
            IsSolved = true;
        }
       


        return IsSolved;
    }
    private bool CompareImage(Bitmap image1, Bitmap image2)
    {
        
        for (int i = 0; i < image1.Height; i++)
        {
            for (int j = 0; j < image1.Width; j++)
            {
                if (image1.GetPixel(j, i) != image2.GetPixel(j, i))
                {

                    return false;

                }
            }
        }

        return true;


    }
    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
   
    private Bitmap GetElementScreenShort(IWebDriver driver, IWebElement element, string name)
    {
        Actions actions = new Actions(driver);
        actions.MoveToElement(element);
        actions.Perform();
        Screenshot sc = ((ITakesScreenshot)driver).GetScreenshot();
        var img = Image.FromStream(new MemoryStream(sc.AsByteArray)) as Bitmap;
        var x = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.left;", element);
        var y = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.top;", element);
        int x2 = Convert.ToInt32(x);
        int y2 = Convert.ToInt32(y);
        var width = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.width;", element);
        var height = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.height;", element);
        int width2 = Convert.ToInt32(width);
        int height2 = Convert.ToInt32(height);

        if (Convert.ToInt32(name) != 4)
        {
            img = img.Clone(new Rectangle(x2, y2, width2, height2), img.PixelFormat);
        }
        else
        {
            img = img.Clone(new Rectangle(x2, y2, width2, height2), img.PixelFormat);
        }
    
        return img;
    }
}
