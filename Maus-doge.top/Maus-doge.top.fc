using System;
using FaucetCollector.Script;

public class MausDogescript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("http://maus-doge.top/account/bank")
            {
                new FaucetSetting() { Name = "Username or E-mail", Display = "Username or E-mail", Type = EditorType.TextBox, Required = true },
                new FaucetSetting() { Name = "Password", Display = "Password", Type = EditorType.Password, Required = true }
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to close popups
        Title = "Маус Додже";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//font[@color='blue' and contains(.,'Успешно!')]";
        FailXPath = "//div[contains(@class,'message message-error')]";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //If the earning-nav element is visible we are logged in
        return IsVisible(ElementByXPath("//a[contains(@href, '/account/exit')]"));
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        GoToUrl("http://maus-doge.top/login");
        //let Faucet Collector continue.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {

        var signInUser = ElementByXPath("//*[@name='log_email']");
        if (!IsVisible(signInUser))
        {

        }

        var signInPassword = ElementByXPath("//*[@name='pass']");
        if (!IsVisible(signInPassword))
        {

            return Fail("Password input not found.");
        }

        SetText(signInUser, GetSetting("Username or E-mail"));
        Wait();
        SetText(signInPassword, GetPassword("Password"));

        var loginButton = ElementByXPath("//*[@type='submit']");
        if (!IsVisible(loginButton))
        {

            return Fail("Login button not found.");
        }

        var result = SolveCaptcha();
        if (result > 0)
        {

            return result;
        }

        Click(loginButton);


        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
       
        //we don't need to do anything here for this faucet - let Faucet Collector do its stuff.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// </summary>
    public override int GetFaucetWaitTime()
    {

        {
            //We can claim now
            return 0;
        }


    }

    /// <summary>
    /// This method is called right before a captcha will be solved.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //Return we are ready to proceed
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. 
    /// Next methods that will be called are DoSolveFaucet and AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //Let Faucet Collector continue its work
        return base.BeforeSolveFaucet();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        GoToUrl("https://en.maus-doge.top/account/bonus0");
        var ButtonGetBonus = ElementByXPath("//input[@type='submit']");
        if (IsVisible(ButtonGetBonus))
        {
            var result_ = DoSolveCaptcha();
            if (result_ > 0)
            {
                return Fail("Fail solving captcha");
            }
            Click(ButtonGetBonus);
            Wait();
            var success = ElementByXPath("//font[@color='red']");
            if (IsVisible(success))
            {
                Log(success.Text);
            }
        }

        GoToUrl("https://en.maus-doge.top/account/bonus");
        var ButtonDailyBonus = ElementByXPath("//input[@type='submit']");
        if (IsVisible(ButtonGetBonus))
        {
            var result_ = DoSolveCaptcha();
            if (result_ > 0)
            {
                return Fail("Fail solving captcha");
            }
            Click(ButtonGetBonus);
            Wait();
            var success = ElementByXPath("//font[@color='red']");
            if (IsVisible(success))
            {
                Log(success.Text);
            }
        }



        //Find the submit button to claim on the faucet


        //We need to solve the captcha on this page before clicking the Login button.
        //We use the SolveCaptcha method for this. SolveCaptcha will call BeforeSolveCaptcha, DoSolveCaptcha and AfterSolveCaptcha
        //The DoSolveCaptcha method does the actual solving - it checks if there is a SolveMedia Captcha or a reCAPTCHA present on the page 
        //and will solves that one using the selected method entered in Faucet Collector on the Captcha tab.
        //In this script we only override BeforeSolveCaptcha (see above) to enable SolveMedia or reCAPTCHA based on the user settings.


        //Let Faucet Collector continue its work
        //return base.DoSolveFaucet();
        return GetWaitSetting();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// </summary>
    public override int AfterSolveFaucet()
    {

        //Let Faucet Collector continue
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>

    public override int CheckFaucetResult()
    {
        //we already checked the result in the DoSolveFaucet
        //var result = base.CheckFaucetResult();

        var result = GetWaitSetting();
        if (IsSuccess && result == 0)
        {
            //let them wait a minute at least.
            return 60;
        }

        return result;
    }
}