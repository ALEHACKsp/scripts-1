

//==================//
//script Written by: ••AviramDayan•• 04/05/2019 10:30AM
//Last Update: 03/10/2019 10:30AM - Version 5
//==================//

using System;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
//css_inc ShortLinkUtilities
//css_inc RecaptchaUtilities


public class CoinRush : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("http://RadioEarn.com/")
            {
                new FaucetSetting(){Name="Email",Display="UserName",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                //new FaucetSetting(){Name="Address",Display="Bitcoin Address from 'Cryptoo.me' (very important to insert the address from 'Cryptoo.me', otherwise you will not get Reward) ",Type=EditorType.TextBox,Required=true},
				
                new FaucetSetting(){Name="Radio_1",Display="Radio_1",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="Radio_2",Display="Radio_2",Type=EditorType.CheckBox,Default=true},	
                new FaucetSetting(){Name="CustomTimeToListen_1",Display="CustomTimeToListen - Radio 1 (in minutes) - for your protection set from 1 to 9 minutes max (not above 9)",Type=EditorType.Numeric,Default=9},
                new FaucetSetting(){Name="CustomTimeToListen_2",Display="CustomTimeToListen - Radio 2 (in minutes) - for your protection set from 1 to 4 minutes max (not above 4)",Type=EditorType.Numeric,Default=4},

                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

	


	
	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
		ad=false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = ""; //RadioEarn.com

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //div[@id='btc-balance']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
	
	
	
	bool ad;
	
	
    public override int DoInit()
    {

	   
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //In this case we check for en element with the class "loggedIn"
		return ElementByXPath("//span[@class='text'and contains(text(),'Logout')] ") != null;
		return true;
    }
//==================//
//save Login Cookies 
//==================//
	
	
	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
		
		GoToUrl("https://RadioEarn.com/");
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
	
	
		

	
//=============//
//start DoLogin
//=============//
    public override int DoLogin()
    {


	 //var checks login or exit
     var ExitButton = ElementByXPath("//span[@class='text'and contains(text(),'Logout')] "); //SIGN OUT

		 
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {
		
        //else go to normal login
		GoToUrl("https://RadioEarn.com/login/");
        Wait();	
	    Wait(2);		
	
        var box_user = ElementByXPath("//input[@name='nickname']");
        SetText(box_user, GetSetting("Email"));
		
        Wait(2);
		
        var box_pass = ElementByXPath("//input[@name='passwort']");
        SetText(box_pass, GetPassword("Pass"));
		
        Wait();	
        Wait(2);
/*	
        //SolveCaptcha if apper
        var result = base.DoSolveCaptcha();
        //RecaptchaUtility utility = new RecaptchaUtility(this);
        //utility.DoSolve();
        if (result > 0)
        {
          return Fail("fail not solve"); //return to solve again - if something wrong
        }
*/
        Wait();	
	    Wait(2);
		
        var ButtonLog = ElementByXPath("//button[@value='Login']");
        Click(ButtonLog);
		
        Wait();		
        Wait(2);		
			
	 }	//end ExitButton

	 
        //This faucet has nothing to do here.    
        return base.DoLogin();
    }
//=============//
//start DoLogin
//=============//
	

	
	
	
	
//==========//
//AfterLogin
//=========//
 public override int AfterLogin()
 {
 
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
 }
//==========//
//AfterLogin
//=========//
	
	
	

	
//=============//
//GetFaucetWaitTime
//=============//
 public override int GetFaucetWaitTime()
 {

    if(ad)
	{
        ad=false; //solve the problem in start - after he return to script again
        return GetWaitSetting();  
	
    }	//end ad
		
		
   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
//=============//
//GetFaucetWaitTime
//=============//
	
	
	
	

    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }
	
	

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	
	
	


//=============//
//DoSolveFaucet
//=============//
    public override int DoSolveFaucet()
    {
	
     //=========================//
     //Radio_1 - Normal Way//
     //=========================//
     if (GetBoolSetting("Radio_1"))
     {
/*	
        Get_User_ID_Function(); //call to Get_User_ID_Function
	    Wait();
	    Wait(2);
		
		GoToUrl("https://radioearn.com/radio/start.php?uid="+GetSetting("MyID") );
	    Wait();
	    Wait(2);
*/	

		Log("Radio_1");	
        CheckForPopupsEnabled = false;

		GoToUrl("https://radioearn.com/?site=/int/radio");
	    Wait();
	    Wait(2);
		
        var ButtonRadio_1 = ElementByXPath("//a[contains(text(),'Radio 1')] "); 
		if (IsVisible(ButtonRadio_1))
		{
	    Log("ButtonRadio_1");
        Click(ButtonRadio_1);
		}
		Wait();
		Wait(2);
		Title = "Radio 1"; //RadioEarn.com	
        Driver.SwitchTo().Window(Driver.WindowHandles[1]);
	
	    Wait();
	    Wait(2);


        var IP_Block = ElementByXPath("//center/font[contains(text(),'already play')] "); 
        
		if (IsVisible(IP_Block))
		{
	    Log("your IP block");
        return GetWaitSetting(); 	
		}
		
        if (!IsVisible(IP_Block))
		{	
        int MyCustomTimeINT;
        MyCustomTimeINT = GetIntSetting("CustomTimeToListen_1") * 60; 
		
		Log("Now listen " + MyCustomTimeINT + " Seconds");	
        Wait(MyCustomTimeINT);
		}
		
        Driver.SwitchTo().Window(Driver.WindowHandles[0]);
	    Wait(2);
        CheckForPopupsEnabled = true;
        CheckForPopups();
		GoToUrl("https://radioearn.com/?site=/int/radio");
		
	    Wait();		
	    Wait(2);

        } //end Radio_1



     //=========================//
     //Radio_2 - Normal Way//
     //=========================//
     if (GetBoolSetting("Radio_2"))
     {
/*	
        Get_User_ID_Function(); //call to Get_User_ID_Function
	    Wait();
	    Wait(2);
		
		GoToUrl("https://radioearn.com/radio/2/start.php?uid="+GetSetting("MyID") ); //different
	    Wait();
	    Wait(2);
*/	

		Log("Radio_2");	
        CheckForPopupsEnabled = false;

		GoToUrl("https://radioearn.com/?site=/int/radio");
	    Wait();
	    Wait(2);
		
        var ButtonRadio_2 = ElementByXPath("//a[contains(text(),'Radio 2')] "); 
		if (IsVisible(ButtonRadio_2))
		{
	    Log("ButtonRadio_2");
        Click(ButtonRadio_2);
		}
		Wait();
		Wait(2);
		Title = "Radio 2"; //RadioEarn.com	
        Driver.SwitchTo().Window(Driver.WindowHandles[1]);
	
	    Wait();
	    Wait(2);


        var IP_Block = ElementByXPath("//center/font[contains(text(),'already play')] "); 
        
		if (IsVisible(IP_Block))
		{
	    Log("your IP block");
        return GetWaitSetting(); 	
		}
		
        if (!IsVisible(IP_Block))
		{	
        int MyCustomTimeINT;
        MyCustomTimeINT = GetIntSetting("CustomTimeToListen_2") * 60; 
		
		Log("Now listen " + MyCustomTimeINT + " Seconds");	
        Wait(MyCustomTimeINT);
		}
		
        Driver.SwitchTo().Window(Driver.WindowHandles[0]);
	    Wait(2);
        CheckForPopupsEnabled = true;
        CheckForPopups();
		GoToUrl("https://radioearn.com/?site=/int/radio");
		
	    Wait();		
	    Wait(2);
		
        } //end Radio_1


        ad = true; //call to timer / and do success
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
     }
	
	

	
	
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
	
	
	

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	



    //===========//
    //Get_User_ID_Function//
    //===========//
    public void Get_User_ID_Function()
    {	

           GoToUrl("https://radioearn.com/?site=/acc/overview");
		   Log("Radio_Function");	
		   
           var Store_ID = ElementByXPath("//div[@class='widget-content']/table/tbody/tr[2]/td[2]") ; 
           if (IsVisible(Store_ID))
		   {
		   	SetSetting("MyID", Store_ID.Text);
		   }  
	   	   
    }
    //=========//




	
} //public class dogeto
