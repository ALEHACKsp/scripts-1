using FaucetCollector.Script;
using System;

public class GetTheFrone : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://gettefrone.com/")
            {
                new FaucetSetting(){Name="User",Display="Wallet of coin that you want claim",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Coin",Display="Coin To Claim",Type=EditorType.ComboBox,Default="BTC",Items= new System.Collections.Generic.List<string>{"BTC","LTC","DOGE","DASH","PAYEER","BCH","ETH"} },
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "All|";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//span[@class='counter-title-modern']";
        FailXPath = "//span[@class='red-title']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//div[contains(text(),'Exit')]") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>

    public override int DoLogin()
    {
        string Password = GetPassword("Pass");
        if (Password != string.Empty)
        {
            GoToUrl("https://gettefrone.com/account/login/");
            OpenQA.Selenium.IWebElement WalletBox = ElementByXPath("//input[@placeholder='Wallet']");
            if (!IsVisible(WalletBox))
            {
                return Fail("Wallet box is not visible");
            }
            SetText(WalletBox, GetSetting("User"));
            OpenQA.Selenium.IWebElement PasswordBox = ElementByXPath("//input[@id='id_auth-password']");
            if (!IsVisible(PasswordBox))
            {
                return Fail("Fail password box is not visible");
            }
            SetText(PasswordBox, GetPassword("Pass"));

            OpenQA.Selenium.IWebElement Button = ElementByXPath("//button[@type='submit']");
            if (IsVisible(Button))
            {
                Click(Button);
            }

        }
        else
        {


            if (Driver.Url != "https://gettefrone.com/")
            {
                GoToUrl("https://gettefrone.com/");
                Wait(1);
            }
            string coin = GetSetting("Coin");
            if (coin == "BTC")
            {
                OpenQA.Selenium.IWebElement LoginBitcoin = ElementByXPath("//a[@href='/login/bitcoin']");
                if (IsVisible(LoginBitcoin))
                {
                    Click(LoginBitcoin);
                }


            }
            else if (coin == "LTC")
            {
                OpenQA.Selenium.IWebElement LoginLitecoin = ElementByXPath("//a[@href='/login/litecoin']");
                if (IsVisible(LoginLitecoin))
                {
                    Click(LoginLitecoin);
                }

            }
            else if (coin == "DOGE")
            {
                OpenQA.Selenium.IWebElement LoginDogecoin = ElementByXPath("//a[@href='/login/dogecoin']");
                if (IsVisible(LoginDogecoin))
                {
                    Click(LoginDogecoin);
                }
            }
            else if (coin == "PAYEER")
            {
                OpenQA.Selenium.IWebElement LoginPayeer = ElementByXPath("//a[@href='/login/payeer']");
                if (IsVisible(LoginPayeer))
                {
                    Click(LoginPayeer);
                }
            }
            else if (coin == "DASH")
            {
                OpenQA.Selenium.IWebElement LoginDashcoin = ElementByXPath("//a[@href='/login/dashcoin']");
                if (IsVisible(LoginDashcoin))
                {
                    Click(LoginDashcoin);
                }
            }
			else if (coin == "BCH")
			{
                OpenQA.Selenium.IWebElement LoginDashcoin = ElementByXPath("//a[@href='/login/bitcoincash']");
                if (IsVisible(LoginDashcoin))
                {
                    Click(LoginDashcoin);
                }
            }
			else if (coin == "ETH")
			{
                OpenQA.Selenium.IWebElement LoginDashcoin = ElementByXPath("//a[@href='/login/ethereum']");
                if (IsVisible(LoginDashcoin))
                {
                    Click(LoginDashcoin);
                }
            }
            Wait();
            OpenQA.Selenium.IWebElement wallet_input = ElementByXPath("//input[@id='id_account']");
            if (!IsVisible(wallet_input))
            {

                return Fail("Wallet input is not visible");
            }
            SetText(wallet_input, GetSetting("User"));
            Wait();
            int result = DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solve capthca");
            }
            Wait();
            OpenQA.Selenium.IWebElement button = ElementByXPath("//button[@type='submit']");
            if (!IsVisible(button))
            {
                return Fail("Button login is not visible");
            }
            Click(button);
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        OpenQA.Selenium.IWebElement time_element = ElementByXPath("//span[@id='passed_percent_after_last_claim']");
        if (time_element != null)
        {
            try
            {
                string percent = time_element.GetAttribute("data-to");
                if (GetSetting("Coin") == "BTC")
                {
                    int percent_ = Convert.ToInt32(percent);
                    int time = 3600 - (3600 * percent_ / 100);
                    return time;

                }
                else
                {
                    int percent_ = Convert.ToInt32(percent);
                    int time = 1800 - (1800 * percent_ / 100);
                    return time;
                }



            }
            catch (Exception)
            {
                return 3600;
            }
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        OpenQA.Selenium.IWebElement button_f = ElementByXPath("//div[@class='btn btn-small btn--rose']");
        if (!IsVisible(button_f))
        {
            return Fail("Button to faucet is not visible");
        }
        Click(button_f);
        Wait();
        int result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solve captcha");
        }
        OpenQA.Selenium.IWebElement button_claim = ElementByXPath("//button[@type='submit']");
        if (!IsVisible(button_claim))
        {
            return Fail("Button claim is not visible");
        }
        Click(button_claim);
        Wait(2, 3);
        OpenQA.Selenium.IWebElement text_title = ElementByXPath("//div[@class='col-lg-12 content-center']//h4[@class='info-box-title']");
        while (IsVisible(text_title))
        {
            Wait();
            if (text_title.Text.Contains("close"))
            {
                Wait();
            }
            else
            {
                break;
            }
            text_title = ElementByXPath("//div[@class='col-lg-12 content-center']//h4[@class='info-box-title']");
        }
        Wait();


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
