

//==================//
//script Written by: ••AviramDayan•• 01/06/2019 07:00AM
//Last Update: 13/08/2019 07:00AM - Version 4
//==================//

using System;
using System.Drawing;
using FaucetCollector.Script;
using System.Threading.Tasks;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;

//css_inc recaptchaUtilities
//css_inc AntiBotLinksUtility
//css_ref ImageProcessing
//css_ref ProcessingImagesUsingLockBits
//css_inc GetestCaptcha

public class tradesatoshi : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://tradesatoshi.com/")
            {
                new FaucetSetting(){Name="UserName",Display="UserName",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},
				
                //new FaucetSetting() { Name = "SolveMedia_ReCaptcha", Display = "SolveMedia (ON/Checked) ReCaptcha (OFF/UnChecked)", Type = EditorType.CheckBox, Default = true},   
				
                new FaucetSetting() { Name = "FaucetAll", Display = "FaucetAll - on/off (on/off all)", Type = EditorType.CheckBox, Default = true},				
				
                new FaucetSetting() { Name = "BTC", Display = "BTC - claim", Type = EditorType.CheckBox, Default = true},				
                new FaucetSetting() { Name = "DOGE", Display = "DOGE - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "LTC", Display = "LTC - claim", Type = EditorType.CheckBox, Default = true},
                new FaucetSetting() { Name = "DGB", Display = "DGB - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "USDT", Display = "USDT - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "MNC", Display = "MNC - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "SAFEX", Display = "SAFEX - claim", Type = EditorType.CheckBox, Default = true},				
                new FaucetSetting() { Name = "XZC", Display = "XZC - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "ATCC", Display = "ATCC - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "ARISTO", Display = "ARISTO - claim", Type = EditorType.CheckBox, Default = true},			
                new FaucetSetting() { Name = "ETH", Display = "ETH - claim", Type = EditorType.CheckBox, Default = true},			
                new FaucetSetting() { Name = "BNB", Display = "BNB - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "ATCP", Display = "ATCP - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "BCHABC", Display = "BCHABC - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "BCHSV", Display = "BCHSV - claim", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "XRP", Display = "XRP - claim", Type = EditorType.CheckBox, Default = true},	


            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Tradesatoshi";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
		
      //Let Faucet Collector continue.
      return base.DoInit();
	  
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//a[@class='btn btn-primary btn-sm active pull-right removeOverColor' and contains(text(),'Log off') ] | //a[contains(text(),'Log off')] ") != null;  //a[contains(text(),'Logout')]
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		
	  //importent - try to go to home - to save the Cookies 
      GoToUrl("https://tradesatoshi.com/");
	  Wait();

/*	  
	 //var checks login or exit
     var ExitButton = ElementByXPath("//div[@id='sidebar']");

	 
	 //if i already Login - go to "bonus"	 
	 if (IsVisible(ExitButton))
	 {
        //if we already login go to here
        GoToUrl("https://tradesatoshi.com/");
	 }	
*/	
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {

	  
      var ExitButton = ElementByXPath("//a[@class='btn btn-primary btn-sm active pull-right removeOverColor' and contains(text(),'Log off') ] | //a[contains(text(),'Log off')] ");
	
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

		GoToUrl("https://tradesatoshi.com/Account/Login");
		Wait();		
		Wait(2);

        var box_user = ElementByXPath("//input[@id='UserName']");
        SetText(box_user, GetSetting("UserName"));
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[@name='Password']");
        SetText(box_pass, GetPassword("Password"));
		
		Wait(2);
	
        //SolveCaptcha if apper
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }
	
		Wait(4);
		
        var ButtonLog = ElementByXPath("//button[@id='btn-login']");
        Click(ButtonLog);
		
		Wait(2);
/*		
        var Error_Message = ElementByXPath ("//div[@id='add_err']/div/div[@class='message' and contains(text(),'fille' | 'captcha' ) ]");
        if (IsVisible(Error_Message))
        {
            Log("Error_Message - Appear - we return after 1 min ");
            return 1*60; //we return after 1 min
        }
*/		
		Wait();	

	 } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {

      var MenuLanguage = ElementByXPath("//li[@class='dropdown open']");
	  if (IsVisible(MenuLanguage))
	  {	 
       Log("MenuLanguage");  
       Click(MenuLanguage);
	  }		
	  
	  Wait(2);
		
      var EnglishVAR = ElementByXPath("//a[@href='/en/Home/SetLanguage'] | //a[contains(text(),'English')] ");
	  if (IsVisible(EnglishVAR))
	  {	 
       Log("EnglishVAR");  
       Click(EnglishVAR);
	  }	
  
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
		    //Log("return ad");
			ad=false;
			Driver.Close();  // Close specific chrome window
            Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
            Driver.Dispose();  // Close the chromedriver.exe
            return GetWaitSetting();
        }

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {


     if (GetBoolSetting("FaucetAll"))
     {		

     // go to faucets
     GoToUrl("https://tradesatoshi.com/Faucet");
	 Log("Go to es");	
     Wait();
	 Wait(2);		 
	 
	 
		//======//
		//BTC//
		//======//
        if (GetBoolSetting("BTC"))
        {	

        var BTC_VAR_NOTAvailable = ElementByXPath("//tr[2]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(BTC_VAR_NOTAvailable))
        {
        Log("BTC_VAR_NOTAvailable");
		}		


        if (!IsVisible(BTC_VAR_NOTAvailable))
        {
			
        Log("BTC Available - go to claim");
			
        var BTC_VAR_Available = ElementByXPath("//tr[2]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(BTC_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end BTC
        //=====//
 
		//======//
		//DOGE//
		//======//
        if (GetBoolSetting("DOGE"))
        {	

        var DOGE_VAR_NOTAvailable = ElementByXPath("//tr[3]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(DOGE_VAR_NOTAvailable))
        {
        Log("DOGE_VAR_NOTAvailable");
		}		


        if (!IsVisible(DOGE_VAR_NOTAvailable))
        {
			
        Log("DOGE Available - go to claim");
			
        var DOGE_VAR_Available = ElementByXPath("//tr[3]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(DOGE_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end DOGE
        //=====//		

		//======//
		//LTC//
		//======//
        if (GetBoolSetting("LTC"))
        {	

        var LTC_VAR_NOTAvailable = ElementByXPath("//tr[4]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(LTC_VAR_NOTAvailable))
        {
        Log("LTC_VAR_NOTAvailable");
		}		


        if (!IsVisible(LTC_VAR_NOTAvailable))
        {
			
        Log("LTC Available - go to claim");
			
        var LTC_VAR_Available = ElementByXPath("//tr[4]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(LTC_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end LTC
        //=====//	

	 
		//======//
		//DGB//
		//======//
        if (GetBoolSetting("DGB"))
        {	

        var DGB_VAR_NOTAvailable = ElementByXPath("//tr[5]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(DGB_VAR_NOTAvailable))
        {
        Log("DGB_VAR_NOTAvailable");
		}		


        if (!IsVisible(DGB_VAR_NOTAvailable))
        {
			
        Log("DGB Available - go to claim");
			
        var DGB_VAR_Available = ElementByXPath("//tr[5]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(DGB_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end DGB
        //=====//		

		//======//
		//USDT//
		//======//
        if (GetBoolSetting("USDT"))
        {	

        var USDT_VAR_NOTAvailable = ElementByXPath("//tr[6]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(USDT_VAR_NOTAvailable))
        {
        Log("USDT_VAR_NOTAvailable");
		}		


        if (!IsVisible(USDT_VAR_NOTAvailable))
        {
			
        Log("USDT Available - go to claim");
			
        var USDT_VAR_Available = ElementByXPath("//tr[6]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(USDT_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end USDT
        //=====//		

		//======//
		//MNC//
		//======//
        if (GetBoolSetting("MNC"))
        {	

        var MNC_VAR_NOTAvailable = ElementByXPath("//tr[7]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(MNC_VAR_NOTAvailable))
        {
        Log("MNC_VAR_NOTAvailable");
		}		


        if (!IsVisible(MNC_VAR_NOTAvailable))
        {
			
        Log("MNC Available - go to claim");
			
        var MNC_VAR_Available = ElementByXPath("//tr[7]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(MNC_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end MNC
        //=====//	

		//======//
		//SAFEX//
		//======//
        if (GetBoolSetting("SAFEX"))
        {	

        var SAFEX_VAR_NOTAvailable = ElementByXPath("//tr[8]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(SAFEX_VAR_NOTAvailable))
        {
        Log("SAFEX_VAR_NOTAvailable");
		}		


        if (!IsVisible(SAFEX_VAR_NOTAvailable))
        {
			
        Log("SAFEX Available - go to claim");
			
        var SAFEX_VAR_Available = ElementByXPath("//tr[8]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(SAFEX_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end SAFEX
        //=====//	
		
		//======//
		//XZC//
		//======//
        if (GetBoolSetting("XZC"))
        {	

        var XZC_VAR_NOTAvailable = ElementByXPath("//tr[9]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(XZC_VAR_NOTAvailable))
        {
        Log("XZC_VAR_NOTAvailable");
		}		


        if (!IsVisible(XZC_VAR_NOTAvailable))
        {
			
        Log("XZC Available - go to claim");
			
        var XZC_VAR_Available = ElementByXPath("//tr[9]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(XZC_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end XZC
        //=====//			
		
		//======//
		//ATCC//
		//======//
        if (GetBoolSetting("ATCC"))
        {	

        var ATCC_VAR_NOTAvailable = ElementByXPath("//tr[10]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(ATCC_VAR_NOTAvailable))
        {
        Log("ATCC_VAR_NOTAvailable");
		}		


        if (!IsVisible(ATCC_VAR_NOTAvailable))
        {
			
        Log("ATCC Available - go to claim");
			
        var ATCC_VAR_Available = ElementByXPath("//tr[10]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(ATCC_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end ATCC
        //=====//			
	 
		//======//
		//ARISTO//
		//======//
        if (GetBoolSetting("ARISTO"))
        {	

        var ARISTO_VAR_NOTAvailable = ElementByXPath("//tr[11]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(ARISTO_VAR_NOTAvailable))
        {
        Log("ARISTO_VAR_NOTAvailable");
		}		


        if (!IsVisible(ARISTO_VAR_NOTAvailable))
        {
			
        Log("ARISTO Available - go to claim");
			
        var ARISTO_VAR_Available = ElementByXPath("//tr[11]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(ARISTO_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end ARISTO
        //=====//			
		
		//======//
		//ETH//
		//======//
        if (GetBoolSetting("ETH"))
        {	

        var ETH_VAR_NOTAvailable = ElementByXPath("//tr[12]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(ETH_VAR_NOTAvailable))
        {
        Log("ETH_VAR_NOTAvailable");
		}		


        if (!IsVisible(ETH_VAR_NOTAvailable))
        {
			
        Log("ETH Available - go to claim");
			
        var ETH_VAR_Available = ElementByXPath("//tr[12]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(ETH_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end ETH
        //=====//	
		
		//======//
		//BNB//
		//======//
        if (GetBoolSetting("BNB"))
        {	

        var BNB_VAR_NOTAvailable = ElementByXPath("//tr[13]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(BNB_VAR_NOTAvailable))
        {
        Log("BNB_VAR_NOTAvailable");
		}		


        if (!IsVisible(BNB_VAR_NOTAvailable))
        {
			
        Log("BNB Available - go to claim");
			
        var BNB_VAR_Available = ElementByXPath("//tr[13]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(BNB_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end BNB
        //=====//			
		
	 
		//======//
		//ATCP//
		//======//
        if (GetBoolSetting("ATCP"))
        {	

        var ATCP_VAR_NOTAvailable = ElementByXPath("//tr[14]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(ATCP_VAR_NOTAvailable))
        {
        Log("ATCP_VAR_NOTAvailable");
		}		


        if (!IsVisible(ATCP_VAR_NOTAvailable))
        {
			
        Log("ATCP Available - go to claim");
			
        var ATCP_VAR_Available = ElementByXPath("//tr[14]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(ATCP_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end ATCP
        //=====//		
		
		//======//
		//BCHABC//
		//======//
        if (GetBoolSetting("BCHABC"))
        {	

        var BCHABC_VAR_NOTAvailable = ElementByXPath("//tr[15]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(BCHABC_VAR_NOTAvailable))
        {
        Log("BCHABC_VAR_NOTAvailable");
		}		


        if (!IsVisible(BCHABC_VAR_NOTAvailable))
        {
			
        Log("BCHABC Available - go to claim");
			
        var BCHABC_VAR_Available = ElementByXPath("//tr[15]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(BCHABC_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end BCHABC
        //=====//			
	 
		//======//
		//BCHSV//
		//======//
        if (GetBoolSetting("BCHSV"))
        {	

        var BCHSV_VAR_NOTAvailable = ElementByXPath("//tr[16]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(BCHSV_VAR_NOTAvailable))
        {
        Log("BCHSV_VAR_NOTAvailable");
		}		


        if (!IsVisible(BCHSV_VAR_NOTAvailable))
        {
			
        Log("BCHSV Available - go to claim");
			
        var BCHSV_VAR_Available = ElementByXPath("//tr[16]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(BCHSV_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end BCHSV
        //=====//	
 
		//======//
		//XRP//
		//======//
        if (GetBoolSetting("XRP"))
        {	

        var XRP_VAR_NOTAvailable = ElementByXPath("//tr[17]/td[6]/a[@class='clm-btn ']");
		
        if (IsVisible(XRP_VAR_NOTAvailable))
        {
        Log("XRP_VAR_NOTAvailable");
		}		


        if (!IsVisible(XRP_VAR_NOTAvailable))
        {
			
        Log("XRP Available - go to claim");
			
        var XRP_VAR_Available = ElementByXPath("//tr[17]/td[6]/a[@class='clm-btn open-prompt-claim']");		
        Click(XRP_VAR_Available);
	
		Wait();
		Wait(2);	

        AD_Function(); //call to AD_Function

		}
		
		}// end XRP
        //=====//			

     }//end FaucetAll
	 
	
		ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	
        //return GetWaitSetting();	
	
	
        //We are good to continue
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	

        //==================//
        //AD_Function
		//==================//
        public void AD_Function()
        {
			
		Wait();
		Wait(2);	
		
        //SolveCaptcha if apper
        var result = DoSolveCaptcha();
		
		Wait(4);	
		
        var ButtonClaim = ElementByXPath ("//button[@id='btnCreateClaim' and contains(text(),'Claim')] ");
        Click(ButtonClaim);

		Wait(3);
		
        var VAR_NeedToWait60SEC = ElementByXPath ("//div[@class='validation-summary-errors jsonAlert alert alert-danger text-center']/ul/li[1 and contains(text(),'after 60')]");			
        if (IsVisible(VAR_NeedToWait60SEC))
        { 
	     ad = true;
	    }
		
		Wait();
		Wait(2);

        Driver.Navigate().Refresh();
		
        }
         //=======//	
		 



        //==================//
        //SolveMedia_ReCaptcha_Function
		//==================//
        public void SolveMedia_ReCaptcha_Function()
        {

        var SolveMediaVAR = ElementByXPath("//button[@id='switchCaptcha' and contains(text(),'Switch to SolveMedia')] | //button[@id='switchCaptcha']/h6/b/u[contains(text(),'Switch')]");
        var ReCaptchaON = ElementByXPath("//div[@id='recaptcha-block' and @style='display:block']");	

        var SolveON = ElementByXPath("//div[@id='solvemedia-block' and @style='display:block']");
        var ReCaptchaVAR = ElementByXPath("//button[@id='switchCaptcha' and contains(text(),'Switch to ReCaptcha')] | //button[@id='switchCaptcha']/h6/b/u[contains(text(),'Switch')]");  

	
        if (GetBoolSetting("SolveMedia_ReCaptcha"))
        {

          if (IsVisible(ReCaptchaON))
          {		
	      Log("Switch to SolveMedia");
          Click(SolveMediaVAR);
		  }
		  
		  Wait(2);
		  
          //Call to solve		  		   		  
          var result_1_VAR = DoSolveCaptcha();

        }
		
        if (!GetBoolSetting("SolveMedia_ReCaptcha"))
        {

          if (IsVisible(SolveON))
          {		
	      Log("Switch to ReCaptcha");
          Click(ReCaptchaVAR);
		  }	
		  
		  Wait(2);	  
		  
          //Call to solve		  
          var result_2_VAR = DoSolveCaptcha();
	
        }

	 
        }// end SolveMedia_ReCaptcha_Function
         //=======//		
		




        //==================//
        //TimerFaucet_Function
		//==================//
        public void TimerFaucet_Function()
        {	
 
         var MinuteVAR = ElementByXPath("//div[@class='col-md-6 col-xs-3 text-right']/h2"); 
         int MinuteINT = Convert.ToInt32(MinuteVAR.Text.Trim().Split(':')[1]);	 // need [4] for example if we have Existing text "You have to wait 15 minutes"  it mean = You[0] have[1] to[2] wait[3] 15[4] minutes[5] 

         if (MinuteINT > 5 )  
         {			 
		   Log("TimerFaucet - OK ");

		   Wait(2);
		   
           Title = "ESFaucet User";
		   
	       var OpenCaptchaButtonVAR = ElementByXPath("//h3[contains(text(),'Click')]");
           Click(OpenCaptchaButtonVAR);
		   
		   Wait(2);
				  
  		   SolveMedia_ReCaptcha_Function(); // call
		   
		   Wait(2);
		   
	       var EndButtonVAR = ElementByXPath("//button[@id='clear']");
           Click(EndButtonVAR);		   
		   
         }
		 
         if (MinuteINT < 5 ) 
         {
		   Log("TimerFaucet - Not available  ");
         }
		 
        }// end TimerFaucet_Function
         //=======//
		

		
		

    public bool SeeIfThereisColor(Bitmap Image)
    {
        bool ContainsColor = false;
        for(int i = 0; i < Image.Width && ! ContainsColor; i++)
        {
            for(int j = 0; j < Image.Height; j++)
            {
                if(Image.GetPixel(i,j)!=Color.FromArgb(0,0,0) && Image.GetPixel(i,j)!=Color.FromArgb(255, 255, 255))
                {
                    ContainsColor = true;
                    break;
                }
            }
        }

        return ContainsColor;

    }
	
	
    private IWebElement FindCorrectArrow()
    {
        var Arrows = ElementsByXPath("//div[@class='verify-gap']");
        int n = 0;
        foreach(var arrow in Arrows)
        {
            if(SeeIfThereisColor(TakeScreenshot(Base.Captcha.CaptchaService.Manual,arrow)))
            {
                Log("Element is" + n.ToString());
                return arrow;

            }
            n++;

        }
        return null;

    }
	

        //=========//
        //SolveCaptcha_RightSquare_Function
		//=========//
        public void SolveCaptcha_RightSquare_Function()
        {	
		
        /*
        GetestCaptchaUtilities.GetestCaptcha getestCaptcha = new GetestCaptchaUtilities.GetestCaptcha(this);
        bool res2=  getestCaptcha.DoInitSolve();
        */

        var Arrow = FindCorrectArrow();
        if(IsVisible(Arrow))
		{
            Log("SolveCaptcha_RightSquare_Function - Arrow");	

            var ToMove = ElementByXPath("//div[@class='verify-sub-block']");
            if (IsVisible(ToMove))
            {
                Log("SolveCaptcha_RightSquare_Function - ToMove");	
                Actions actions = new Actions(Driver);
                actions.DragAndDrop(ToMove, Arrow).Build().Perform();
                Wait();

			}
        }

	
		}// end SolveCaptcha_RightSquare_Function
		//=========//

	
} //end public class

