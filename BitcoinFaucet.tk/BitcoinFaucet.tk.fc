
using System;
using FaucetCollector.Script;
using OpenQA.Selenium;


public class BitcoinFaucetTK: FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get 
        {
            return new FaucetSettings("https://bitcoinfaucet.tk/")
            {
                new FaucetSetting(){Name="Yourwallet",Display="Your wallet",Type=EditorType.TextBox,Required=true},
     
                new FaucetSetting() { Name = "FaucetCollect", Display = "FaucetCollect - Collect every 1 hour", Type = EditorType.CheckBox, Default = true},	
                new FaucetSetting() { Name = "AutoWithdraw", Display = "AutoWithdraw - Withdraw (when you got 7600 satoshi)", Type = EditorType.CheckBox, Default = true},	


                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }
	
	


//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "bitcoinfaucet.tk";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*[@id='template-response']/span/div[2]";
        FailXPath = "//*[text()='']";

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//




	//loop
    public static bool cs;

	
	
    public override int DoInit()
    {

        cs = false;
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	

//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        //if the input balance address - is full = Logout
        //return ElementByXPath("//*[@id='address']") != null;


        //save cookies only if "BITCOIN_ADDRESS" on referral page not apper!
        //return !IsVisible(ElementByXPath("//*[@id='content']/div[2]/div[1]/b[1]"));	

        //return ElementByXPath("//*[@id='content']/div[2]/div[1]/b[text()='BITCOIN_ADDRESS']") == null;
        // NO NEED LOGIN IN THIS FAUCET
        return true;

    }
//==================//
//save Login Cookies 
//==================//
	
	
	
	

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

	
	
	
//==============//
//start DoLogin
//==============//
 public override int DoLogin()
 {
	 
     //============//
    //FaucetCollect
    //=============//
    
	
		
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
 }

//==============//
//start DoLogin
//==============//
	
	
	
	
//==============//
//start AfterLogin
//==============//
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
	
//==============//
//start AfterLogin
//==============//	
	
	
	
	
	

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        var time_element = ElementByXPath("//span[@id='countdown']");
        if (IsVisible(time_element))
        {
            try
            {
                int m, s;
                m = Convert.ToInt32(time_element.Text.Split(':')[0]);
                s = Convert.ToInt32(time_element.Text.Split(':')[1]);
                return m*60 + s;

            }
            catch (Exception)
            {
                return 3600;
            }
        }
		//wait 36 min
        if (cs)
        {
            return 60 * 60;
        }

        //0 mean let Faucet Collector continue.
        //return 0;
		
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
	
	
	
	
	
	

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	
	
	

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }
	
	

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
	

	
	
//================//
//BeforeSolveFaucet
//================//
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
//================//
//BeforeSolveFaucet
//================//
	
	
	
	
	

	
//=============//	
//DoSolveFaucet
//=============//
 public override int DoSolveFaucet()
 {
        if (GetBoolSetting("FaucetCollect"))
        {

            var user_box = ElementByXPath("//input[@id='address']");
            Log("Login: set wallet");
            SetText(user_box, GetSetting("YourWallet"));


            //wait for 22 sec for request button
            Log("Login: wait for request button");
            Wait(22);


            //login button
            var LoginButton1 = ElementByXPath("//*[@id='request-button']");
            if (IsVisible(LoginButton1))
            {
                Log("Login: Login Button 1");
                Click(LoginButton1);
            }

            Wait(2);

            //SolveCaptcha invisible ReCaptcha
            var result = DoSolveCaptcha();  //SolveCaptcha();
            if (result > 0)
            {
                //Unable to solve the captcha - return the failure
                return result;
            }
            //invisible ReCaptcha
            Wait();
            ExecuteScript("___grecaptcha_cfg.clients[0].aa.l.callback('" + Context.CaptchaResult.Result + "');");

            Wait(2);


            //if all done - lets put Success Message with info
            var SuccessMessageVar = ElementByXPath("//*[@id='template-response']/span/div[2]");
            if (IsVisible(SuccessMessageVar))
            {
                Log(SuccessMessageVar.Text);
            }

        } // end FaucetCollect || Dlogin



        //============//
        //AutoWithdraw
        //=============//
        if (GetBoolSetting("AutoWithdraw"))
        {

            //first go to page to check
            GoToUrl("https://bitcoinfaucet.tk/?section=check-address");

            Wait(2);

            //Click on Withdraw Button
            var CheckButton2 = ElementByXPath("//*[@id='withdraw-button']");
            Log("AutoWithdraw: CheckButton2");
            Click(CheckButton2);

            //if all done - lets put Success Message with info
            var SuccessMessageVar = ElementByXPath("//*[@id='template-response']/span/div[2]");
            if (IsVisible(SuccessMessageVar))
            {
                Log(SuccessMessageVar.Text);
            }
            Wait(2);

            Log("we return after 60 min");
            return 60 * 60;


        } //end AutoWithdraw

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
 }
 
//=============//	
//DoSolveFaucet
//=============//
 
 
 
 
 
 
 
//================//
//AfterSolveFaucet
//================//
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
//================//
//AfterSolveFaucet
//================//
	
	
	

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
