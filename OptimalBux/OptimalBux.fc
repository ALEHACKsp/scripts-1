using FaucetCollector.Script;
using System;
using System.Collections.Generic;
using System.Drawing;
//css_ref ProcessingImagesUsingLockBits.dll
//css_inc BaseUtility
//css_inc PtcAdsViewer
//css_ref ImageProcessing.dll
public class OptimalBuxScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://optimalbux.com")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="PW2",Display="Security Question",Type=EditorType.TextBox,Required=true},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Optimalbux|Just a moment...";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div//div//tbody//tbody//tr[1]//td[3]//p[1]";
        FailXPath = "//div[@class='']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        Driver.Manage().Cookies.DeleteAllCookies();
        Driver.Navigate().Refresh();

        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[@href='index.php?view=logout']") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
      
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        GoToUrl("https://optimalbux.com/index.php?view=login");

        var LoginBox = ElementByXPath("//input[@placeholder='Username']");
        if (!IsVisible(LoginBox))
        {
            return Fail("Login box not visible");
        }
        SetText(LoginBox, GetSetting("User"));
        var PassBox = ElementByXPath("//input[@placeholder='Password']");
        if (!IsVisible(PassBox))
        {
            return Fail("Password box not visible");
        }
        SetText(PassBox, GetPassword("Pass"));
        Wait(2, 3);
        var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimglogin']"), ElementByXPath("//input[@id='captcha_login']"));
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }
        var agree = ElementByXPath("//input[@value='Login']");
        if (agree == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Login button not found.");
        }
        Click(agree);
        Wait(5);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        var firlo = ElementByXPath("//div[@id='progressbar']");
        var loginads = ElementByXPath("//a[contains(text(),'Click to open your account')]");
        while (!IsVisible(firlo))
        {
            Wait();
            loginads = ElementByXPath("//a[contains(text(),'Click to open your account')]");
            if (IsVisible(loginads))
            {
                Click(loginads);
                break;
            }
        }
        var security = ElementByXPath("//input[@id='security_answer']");
        if (IsVisible(security))
        {
            SetText(security, GetSetting("PW2"));
            Click(ElementByXPath("//input[@value='Send']"));

        }


        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        GoToUrl("http://optimalbux.com/index.php?view=ads");
        Wait(2);

        List<string> s = new List<string>();
        s.Add("//div[contains(@class,'ad-block') and not(contains(@class,'disabled')) and not(contains(@id,'lad'))]");
        List<string> ss = new List<string>();
        ss.Add("//div[@id='progress']");
        List<string> sss = new List<string>();
        sss.Add("//img[@src='modules.php?m=surfer&show=captcha']");
        List<string> ssss = new List<string>();
        ssss.Add("//div[@class='errorbox']");

        PtcUtils.PtcAdsViewer Timer = new PtcUtils.PtcAdsViewer(this, s, ss, sss, ssss);
        if (Timer.GetNumberOfAvailableAds() == 0)
        {
            return GetWaitSetting();
        }
        else
        {
            return 0;
        }

        //let Faucet Collector continue.

    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        try
        {
            var capt = ElementByXPath("//img[contains(@src, 'show=captcha')]");
            if (!IsVisible(capt))
            {
                capt = ElementByXPath("//img[contains(@src, 'data:image/png;base64')]");
            }
            if (IsVisible(capt))
            {
                Bitmap captcha = TakeScreenshot(Base.Captcha.CaptchaService.Manual, capt);

                Wait();


                ProcessingImagesUsingLockBits.MyBitmap[] icons = new ProcessingImagesUsingLockBits.MyBitmap[6];
                icons[0] = new ProcessingImagesUsingLockBits.MyBitmap(captcha.Clone(new Rectangle(0, 0, 50, 50), captcha.PixelFormat));
                icons[1] = new ProcessingImagesUsingLockBits.MyBitmap(captcha.Clone(new Rectangle(50, 0, 50, 50), captcha.PixelFormat));
                icons[2] = new ProcessingImagesUsingLockBits.MyBitmap(captcha.Clone(new Rectangle(100, 0, 50, 50), captcha.PixelFormat));
                icons[3] = new ProcessingImagesUsingLockBits.MyBitmap(captcha.Clone(new Rectangle(150, 0, 50, 50), captcha.PixelFormat));
                icons[4] = new ProcessingImagesUsingLockBits.MyBitmap(captcha.Clone(new Rectangle(200, 0, 50, 50), captcha.PixelFormat));
                icons[5] = new ProcessingImagesUsingLockBits.MyBitmap(captcha.Clone(new Rectangle(250, 0, 50, 50), captcha.PixelFormat));
                List<ProcessingImagesUsingLockBits.MyBitmap> s = new List<ProcessingImagesUsingLockBits.MyBitmap>();
                s.AddRange(icons);
                ImageProcessing.UsingPixelsPosition.DiferentImageSelector Selector = new ImageProcessing.UsingPixelsPosition.DiferentImageSelector(s);
                int solution = Selector.Different;
                solution++;
       
                ExecuteScript("endprogress(" + solution.ToString() + ");");
                Wait(1);

                return 0;
            }

        }
        catch (Exception)
        {

        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveFaucet();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>

    private static bool cs;
    public override int DoSolveFaucet()
    {
        cs = false;
        GoToUrl("http://optimalbux.com/index.php?view=ads");
        Wait(2);
        List<string> s = new List<string>();
        s.Add("//div[contains(@class,'ad-block') and not(contains(@class,'disabled')) and not(contains(@id,'lad'))]");
        List<string> ss = new List<string>();
        ss.Add("//div[@id='progress']");
        ss.Add("//div[@class='adwait']");
        List<string> sss = new List<string>();
        sss.Add("//img[@src='modules.php?m=surfer&show=captcha']");
        List<string> ssss = new List<string>();
        ssss.Add("//div[@class='errorbox']");
        PtcUtils.PtcAdsViewer AddViewer = new PtcUtils.PtcAdsViewer(this, s, ss, sss, ssss);

        AddViewer.ViewOneAd();
        if (AddViewer.GetNumberOfAvailableAds() == 0)
        {
            return GetWaitSetting();
        }

        Wait(1);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.

        return base.CheckFaucetResult();
    }
}
