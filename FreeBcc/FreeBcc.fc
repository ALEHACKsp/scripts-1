using System;
using FaucetCollector.Script;
//css_inc ShortLinkUtilitiesV2
public class FreeBccScript__ : FaucetScript
{
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://freebcc.org")
            {
                new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true },
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true },
                new FaucetSetting(){Name="UseSolvemedia",Display="UseSolvemedia",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="TimerO",Display="Timer Option",Type=EditorType.ComboBox,Items=new System.Collections.Generic.List<string>
                {
                    "1",
                    "3",
                    "15",
                    "30",
                }
                }

            };
        }
    }


    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "freebcc";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath ="//p[@class='mb-0']";
        FailXPath = "//div[@class='error']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    public override bool IsLoggedIn()
    {

        return ElementByXPath( "//a[contains(@href,'logout')]" ) != null;
    }

    public override int DoLogin()
    {
        GoToUrl ( "https://freebcc.org/login" );
        Wait ( 2 );


        var UserBox = ElementByXPath("//input[@name='email']");
        if (!IsVisible(UserBox))
        {
            return Fail("User box is not visible");
        }
        SetText(UserBox, GetSetting("User"));
        var PasswordBox = ElementByXPath("//input[@name='password']");
        if (!IsVisible(PasswordBox))
        {
            return Fail("Password box is not visible");
                

        }
        SetText(PasswordBox, GetPassword("Pass"));

        var result=DoSolveCaptcha();

        if ( result>0 )
        {
            return result;
        }

        var ButtonLogin = ElementByXPath("//button[@name='do']");
        if (!IsVisible(ButtonLogin))
        {
            return Fail("Button login is not visible");
        }
        Click(ButtonLogin);
        Wait();
        var Error = ElementByXPath("//div[@class='error']//div");
        if (IsVisible(Error))
        {
            Log(Error.Text);
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    public override int GetFaucetWaitTime()
    {
        if ( Driver.Url!="https://freebcc.org/faucet" )
        {
            GoToUrl ( "https://freebcc.org/faucet" );
        }

        var min=ElementByXPath("//span[@class='kkc-min']");
        var seg=ElementByXPath("//span[@class='kkc-sec']");
        var hour=ElementByXPath("//span[@class='kkc-godz']");

        if(IsVisible(min) && IsVisible(seg) &&IsVisible ( hour ) )
        {
            int m,s,h;

            if(int.TryParse(min.Text,out m) && int.TryParse(seg.Text, out s) && int.TryParse(hour.Text, out h ) )
            {
                return m*60+h*3600+s;
            }
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }


    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


    public override int DoSolveCaptcha()
    {


        var selectCaptcha=ElementByXPath("//select[@id='selectId']");
        if ( IsVisible(selectCaptcha) )
        {
            if ( GetBoolSetting ( "UseSolvemedia" ) )
            {
                SelectOptionByValue ( selectCaptcha , "solvemedia" );
            }
            else
            {
                SelectOptionByValue ( selectCaptcha , "recaptcha" );
            }
            Wait ( 1 );
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    public override int DoSolveFaucet()
    {

        if ( Driver.Url!="https://freebcc.org/faucet" )
        {
            GoToUrl ( "https://freebcc.org/faucet" );
        }
        Wait ( 2 );
        var Timer=ElementByXPath("//select[@id='user_timer']");
        if ( IsVisible ( Timer ) )
        {
            SelectOptionByValue ( Timer , "1" );
        }

        var result=DoSolveCaptcha();
        if ( result>0 )
        {
            return result;
        }

        var Claim=ElementByXPath("//input[@name='faucetclaim']");
        if ( !IsVisible(Claim) )
        {
            return Fail ( "Start claim button not visible" );
        }
        Click ( Claim );
        Wait ( );

        var TimerW=ElementByXPath("//span[@id='timer']");

        DateTime Timeout=DateTime.Now.AddSeconds(30);
        while ( IsVisible ( TimerW ) && DateTime.Now<Timeout  && Timer.Text!="0")
        {

            Wait ( );
        }

        var BtnGetlink=ElementByXPath("//a[@class='btn btn-secondary btn-sm get-link']");
        if ( !IsVisible ( BtnGetlink ) )
        {
            return Fail ( "Btn to get link is not visible" );
        }
        Click ( BtnGetlink );

        return base.DoSolveFaucet ( );
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
       
    }
}
