using System;
using System.Collections.Generic;
using System.Linq;
using FaucetCollector.Script;
//css_inc RecaptchaUtilities
//css_inc IconCaptcha
public class ClaimBtcInScript_ : FaucetScript
{
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://claimbtc.in/")
            {
                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},
                new FaucetSetting(){Name="CaptchaOption",Display="CaptchaOption - ON UseSolvemedia | OFF Recaptcha",Type=EditorType.CheckBox,Default=false },
		

                new FaucetSetting(){Name="FaucetClaims",Display="Claim to: ", Type=EditorType.CheckComboBox ,
                    Items=new System.Collections.Generic.List<string>{"BITCOIN","LITECOIN","DOGECOIN","DASH","ETHEREUM","POTCOIN","PRIMECOIN","PEERCOIN","DIGIBYTE","BITCORE","BLACKCOIN","TRON","HORA"  }, Default="BITCOIN;LITECOIN;DOGECOIN;DASH;ETHEREUM;POTCOIN;PRIMECOIN;PEERCOIN;DIGIBYTE;BITCORE;BLACKCOIN;TRON"  }			
            };
        }
    }

    public override void Start()
    {
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Faucet";

		SuccessXPath ="//div[@class='alert alert-success']";
        FailXPath ="//div[@class='alert alert-danger']"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }

    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath ("//a[contains(@href,'logout')]") != null;

        //return base.IsLoggedIn();
    }

    public override int GetFaucetWaitTime ( )
    {
        var WaitTimerText = ElementByXPath("//span[@class='kkcountdown-box']");
        if ( IsVisible ( WaitTimerText ) )
        {
            var minVAR = ElementByXPath("//span[@class='kkc-min']");
            var secVAR = ElementByXPath("//span[@class='kkc-sec']");

            Log ( "FaucetClaim: WaitTimerText apper" );
            int min,sec;
            min=Convert.ToInt32 ( minVAR.Text )*60;
            sec=Convert.ToInt32 ( secVAR.Text );
            return min+sec;

        } // end WaitTimerText

        return base.GetFaucetWaitTime ( );  
    }


    //========//
    //DoLogin
    //========//
    public override int DoLogin()
    {
	
     
		GoToUrl("https://claimbtc.in/login");
		
        var box_user = ElementByXPath("//input[@placeholder='Email']");
        if ( !IsVisible ( box_user ) )
        {
            return Fail ( "Box user is not visible" );
        }
        SetText ( box_user , GetSetting ( "Email" ) );

        var box_pass = ElementByXPath("//input[@placeholder='Password']");
        if ( !IsVisible ( box_pass ) )
        {
            return Fail ( "Box pass is not visible" );
        }
        SetText (box_pass, GetPassword("Password"));


        var result=SolveCaptcha();
        if ( result>0 )
        {
            return Fail ( "Problem solving the captcha" );
        }	
    	
        var ButtonLog = ElementByXPath("//button[@class='btn btn-info']");
        if ( !IsVisible ( ButtonLog ) )
        {
            return Fail ( "Button login not visible" );
        }
        Click(ButtonLog);
		
		
	
        var Error_Message = ElementByXPath ("//strong[contains(text(),'Warning') ]");
        if (IsVisible(Error_Message))
        {
            Log ( Error_Message.Text );
        }

	


        
       return base.DoLogin();
    }


    public override int BeforeSolveCaptcha()
    {
        var CaptchaType=ElementByXPath("//select[@name='captcha_type']");
        if ( IsVisible ( CaptchaType ) )
        {
            SelectOptionByValue ( CaptchaType , (GetBoolSetting ( "CaptchaOption" )?1:0).ToString() );
            Wait ( 1 );
        }
      
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }
    public override int DoSolveCaptcha ( )
    {
        IconCaptchaSolver solver=new IconCaptchaSolver(this);
        if ( solver.IsVisibleIconCaptcha ( ) )
        {
            if ( !solver.DoSolve ( ) )
            {
                return 55;
            }
        }
        return base.DoSolveCaptcha ( ); 
    }
    private class Timer
    {
        public int Seconds { get; set; }
        public DateTime Date { get; set; } 
    }

 public override int DoSolveFaucet()
  {
            List<Timer> TimerList=new List<Timer>();
            int NClaims=0;
            var Faucets=GetSetting("FaucetClaims").Split(new[] { ';' },StringSplitOptions.RemoveEmptyEntries);
            foreach ( var Faucet in Faucets)
            {
            try
            {
                GoToUrl ( "https://claimbtc.in/faucet/"+Faucet.ToLower ( ).Trim ( ) );
                Wait ( );
                var WaitTimerText = ElementByXPath("//span[@class='kkcountdown-box']");
                if ( IsVisible ( WaitTimerText ) )
                {
                    continue;
                }

                var result=SolveCaptcha();
                if ( result>0 )
                {
                    continue;
                }

                var ButtonClaim=ElementByXPath("//input[@type='image']");
                if ( !IsVisible ( ButtonClaim ) )
                {
                    continue;
                }
                Click ( ButtonClaim );
                Wait ( 1 );
               
              
            }
            finally
            {
                Wait ( 2 );
                if ( CheckFaucetResult ( )==0 )
                {
                    Log ( "Claim successfull in: "+Faucet.ToString ( ) );
                    NClaims++;
                    int Time=GetFaucetWaitTime();
                    if ( Time>0 )
                    {
                        TimerList.Add ( new Timer
                        {
                            Seconds=Time,
                            Date=DateTime.Now
                            
                        } ) ;
                    }
                }

            }


            }
        Log ( "You have claimed " +NClaims.ToString() +" Faucets of "+Faucets.Length.ToString()  );
        if ( NClaims>0 )
        {
            IsSuccess=true;
            ClaimSuccess ( );
            if ( TimerList.Count==0 )
            {
                return GetWaitSetting ( );
            }
            int MaxTimerForFaucet=(int)TimerList.Where(
                x=>DateTime.Now<x.Date.AddSeconds(x.Seconds))
                .Select(x=>(x.Date.AddSeconds(x.Seconds)-DateTime.Now).TotalSeconds)
                .Max();

            int WaitTimerUser=GetWaitSetting();

            return WaitTimerUser>MaxTimerForFaucet ? WaitTimerUser : MaxTimerForFaucet;

        }
  
        return GetWaitSetting ( );

 }
	
    public override int CheckFaucetResult()
    {
        var Success=ElementByXPath(SuccessXPath);
        if ( IsVisible ( Success ) )
        {
            Log ( Success.Text );
            return 0;
        }
        else
        {
            var Fail_=ElementByXPath(FailXPath);
            if ( IsVisible ( Fail_ ) )
            {
                Log ( Fail_.Text );
            }
            return 1;
        }
    }
} //end class