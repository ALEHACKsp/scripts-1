using System;
using FaucetCollector.Script;
using OpenQA.Selenium;
public class TemplateScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://cryptsly.io")
            {
                new FaucetSetting()
                {
                    Name="User",Display="EmailAddress",Type=EditorType.TextBox,Required=true,
                },
                 new FaucetSetting()
                {
                    Name="Pass",Display="Password",Type=EditorType.Password,Required=true,
                },
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Cryptsly.io";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='swal-text']|//div[@class='swal-title']";
        FailXPath = "//h4[contains(text(),'https://cryptsly.io/')]";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        GoToUrl("https://cryptsly.io/faucet/bitcoin");
        Wait();
        if (Driver.Url.Contains("login"))
        {
            return false;
        }
        else
        {
            return true;
        }
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
       
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
       
        GoToUrl("https://cryptsly.io/login");
        Wait(2,4);
        var textboxuser = ElementByName("email");
        if (!IsVisible(textboxuser))
        {
            return Fail("Fail login");
        }
        SetText(textboxuser, GetSetting("User"));
        Wait();
        var textboxpass = ElementByName("pass");
        if (!IsVisible(textboxpass))
        {
            return Fail("Fail login");
        }
        SetText(textboxpass, GetPassword("Pass"));

        Wait();
        var result = SolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solve captcha");
        }
        Wait(2, 3);
        var button = ElementByXPath("//input[@type='submit']");
        if (!IsVisible(button))
        {
            return Fail("Fail click button login");
        }

        Click(button);




        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        if (!Driver.Url.Contains("https://cryptsly.io/faucet/bitcoin"))
        {
            GoToUrl("https://cryptsly.io/faucet/bitcoin");
        }

        if (cs)
        {
            return 900;
        }
        if (IsVisible(ElementByXPath("//span[@class='kkc-min']")))
        {
            return 900;
        }
        //let Faucet Collector continue.
        return 0;
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {

        bool l = false;
        int cont = 0;
        cs = false;

        do
        {
            if (!Driver.Url.Contains("https://cryptsly.io/faucet/bitcoin"))
            {
                GoToUrl("https://cryptsly.io/faucet/bitcoin");
            }


            var result = SolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solve captcha");
            }
            try
            {
                Driver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(25);
                Wait();
                var button = ElementByXPath("/html[1]/body[1]/div[2]/div[2]/div[1]/div[1]/div[1]/div[2]/div[3]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/form[1]/p[1]/input[1]");
                if (!IsVisible(button))
                {
                    return Fail("Fail claim button");
                }
                Wait(2, 3);
                Click(button);
            }
            catch (Exception)
            {

            }
            var cw = ElementByXPath("//div[@class='swal-text']");
            if (IsVisible(cw))
            {
                l = false;
                Driver.Navigate().Refresh();
            }
            else
            {
                l = true;
            }
            if (cont >= 4)
            {
                break;
            }
            cont++;
        } while (!l);
        doShortLink("cryptsly");
        Wait(4, 6);
        if (IsVisible(ElementByXPath("//div[@class='swal-text']")))
        {
            cs = true;
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    static bool cs = false;
    public bool doShortLink(string url)
    {

        bool iscorrect = true;
        DateTime t1;
        int cont = 0;
        bool bypassed = false;
        string url_a = Driver.Url;

        do
        {
            Title += "|" + Driver.Title;
            Wait();
            try
            {
                int cont2 = 0;
                while (true)
                {
                    Driver.SwitchTo().Frame(cont2);
                    var b_deny = ElementById("B1");
                    if (IsVisible(b_deny))
                    {
                        Click(b_deny);
                        Wait(1);
                    }

                    cont2++;
                    Driver.SwitchTo().DefaultContent();
                }
            }
            catch (Exception)
            {
                Driver.SwitchTo().DefaultContent();
            }
            Wait();
            if (Driver.Url.Contains("dwindly.io"))
            {
                Wait();
                var but = Driver.FindElement(By.Id("btd1"));
                Click(but);
                Wait(12);
                var but2 = Driver.FindElement(By.Id("btd"));

                Click(but);

            }
            else if (Driver.Url.Contains("zap.in"))
            {
                ExecuteScript("var v = document.getElementsByClassName('btn btn-primary'); v[0].click();");
                var result = SolveCaptcha();

                Wait(5);
                ExecuteScript("var v = document.getElementsByClassName('btn btn-primary'); v[1].click();");


            }
            else
            {

                bool clicked = false;
                Wait();
                var button = ElementById("invisibleCaptchaShortlink");
                if (IsVisible(button))
                {
                    var img = ElementById("adcopy-outer-captchaShortlink");
                    var text = ElementById("adcopy_response-captchaShortlink");
                    if (img != null && text != null)
                    {
                        var result = DoSolveImageCaptcha(img, text);
                    }
                    else
                    {
                        var result = SolveCaptcha();
                        try
                        {
                            ExecuteScript("try{window.grecaptcha.getResponse = function(nr) { return '" + Context.CaptchaResult.Result + "'; }}catch(Exception){};");
                        }
                        catch (Exception)
                        {

                        }
                    }
                    Wait(2, 3);
                    button = ElementById("invisibleCaptchaShortlink");
                    if (button.Enabled == true)
                    {
                        button = ElementById("invisibleCaptchaShortlink");
                        Click(button);
                        clicked = true;
                        Wait();
                    }
                    else
                    {
                        ExecuteScript("var but=document.getElementById(\"invisibleCaptchaShortlink\");but.outerHTML=but.outerHTML.replace('disabled=\"disabled\"','');");
                        Wait(3);
                        button = ElementById("invisibleCaptchaShortlink");
                        Click(button);
                        clicked = true;


                    }
                }
                else
                {
                    var button_2 = Driver.FindElements(By.TagName("button"));
                    foreach (var _button_2 in button_2)
                    {
                        if (_button_2.Text.ToLower().Contains("continue"))
                        {
                            if (_button_2.Enabled == true)
                            {
                                Click(_button_2);
                                clicked = true;
                                Wait();
                                break;
                            }
                            else
                            {
                                ExecuteScript("var but=document.getElementsByTagName('button');for(i=0;i<but.length;i++){if(but[i].outerHTML.search('continue')!=-1){but[i].outerHTML=but[i].outerHTML.replace('disabled=\"disabled\"','');break;}}");
                                Wait(3);
                                Click(_button_2);
                                clicked = true;
                                break;
                            }
                        }
                    }

                }
                if (!clicked)
                {
                    var but = ElementById("btn1");
                    if (IsVisible(but))
                    {
                        Click(but);
                        Wait();
                        var img = ElementById("adcopy-outer-captchaShortlink");
                        var text = ElementById("adcopy_response-captchaShortlink");
                        if (img != null && text != null)
                        {
                            var result = DoSolveImageCaptcha(img, text);
                        }
                        else
                        {
                            var result = SolveCaptcha();
                            try
                            {
                                ExecuteScript("try{window.grecaptcha.getResponse = function(nr) { return '" + Context.CaptchaResult.Result + "'; }}catch(Exception){};");
                            }
                            catch (Exception)
                            {

                            }
                        }
                        Wait();
                        var but1 = ElementByXPath("//a[@class='btn btn-primary']");
                        Wait();
                        Click(but1);
                        var button_p = ElementByXPath("//button[@id='btn2']");
                        t1 = DateTime.Now.AddMinutes(1);
                        while (!button_p.Enabled)
                        {
                            button_p = ElementByXPath("//button[@id='btn2']");
                            Wait();
                            if (DateTime.Now > t1)
                            {
                                break;
                            }
                        }
                        Click(button_p);
                        clicked = true;
                        Wait();

                    }

                }
                if (!clicked)
                {
                    Wait();
                    if (IsVisible(ElementByXPath("//div[@id='pause']")) || IsVisible(ElementById("btd1")))
                    {


                        var but = ElementById("btd1");
                        t1 = DateTime.Now.AddMinutes(1);
                        while (!IsVisible(but))
                        {
                            Wait();
                            but = ElementById("btd1");
                            if (DateTime.Now > t1)
                            {
                                break;
                            }
                        }

                        Click(but);
                        clicked = true;

                    }
                }

                ///// CLICK FIRST BUTTON FINISHED
                if (clicked)
                {
                    bool clicked_2 = false;
                    var button_skip = ElementByXPath("//a[@class='btn btn-success btn-lg get-link']");
                    if (IsVisible(ElementByXPath("//a[@class='btn btn-success btn-lg get-link disabled']")) || IsVisible(ElementByXPath("//a[@class='btn btn-success btn-lg get-link']")))
                    {
                        t1 = DateTime.Now.AddMinutes(1);
                        while (button_skip == null)
                        {
                            Wait();
                            button_skip = ElementByXPath("//a[@class='btn btn-success btn-lg get-link']");
                            if (DateTime.Now > t1)
                            {
                                break;
                            }
                        }
                        Click(button_skip);
                        clicked_2 = true;
                    }

                    if (!clicked_2)
                    {
                        if (IsVisible(ElementByXPath("//div[@class='skip-ad']")) || IsVisible(ElementByXPath("//a[@class='btn']")))
                        {
                            var button_skip_a = ElementByXPath("//a[@class='btn']");
                            t1 = DateTime.Now.AddMinutes(1);
                            while (button_skip_a == null)
                            {
                                Wait();
                                button_skip_a = ElementByXPath("//a[@class='btn']");
                                if (DateTime.Now > t1)
                                {
                                    break;
                                }
                            }
                            Click(button_skip_a);
                            clicked_2 = true;
                        }

                    }
                    if (!clicked_2)
                    {
                        if (IsVisible(ElementByXPath("//a[@class='btn btn-success get-link disabled']")) || IsVisible(ElementByXPath("//a[@class='btn btn-success get-link']")))
                        {
                            var button_skip_a = ElementByXPath("//a[@class='btn btn-success get-link']");
                            t1 = DateTime.Now.AddMinutes(1);
                            while (button_skip_a == null)
                            {
                                Wait();
                                button_skip_a = ElementByXPath("//a[@class='btn btn-success get-link']");
                                if (DateTime.Now > t1)
                                {
                                    break;
                                }
                            }
                            Click(button_skip_a);
                            clicked_2 = true;
                        }
                    }
                    if (!clicked_2)
                    {
                        if (IsVisible(ElementByXPath("//a[@class='btn btn-primary btn-goo get-link disabled']")) || IsVisible(ElementByXPath("//a[@class='btn btn-primary btn-goo get-link']")))
                        {
                            var button_skip_a = ElementByXPath("//a[@class='btn btn-primary btn-goo get-link']");
                            t1 = DateTime.Now;
                            while (!IsVisible(button_skip_a))
                            {
                                Wait();
                                button_skip_a = ElementByXPath("//a[@class='btn btn-primary btn-goo get-link']");
                                if (DateTime.Now > t1)
                                {
                                    break;
                                }
                            }
                            try
                            {
                                button_skip_a.Click();
                                try
                                {
                                    Driver.SwitchTo().Alert().Accept();
                                }
                                catch (Exception)
                                {

                                }
                            }
                            catch (Exception)
                            {
                                Click(button_skip_a);
                            }
                            clicked_2 = true;
                        }
                    }
                    if (!clicked_2)
                    {
                        if (ElementByXPath("//a[@id='btn2']") != null)
                        {
                            var button_skip_a = ElementByXPath("//a[@id='btn2']");
                            t1 = DateTime.Now.AddMinutes(1);
                            while (!button_skip_a.Enabled)
                            {
                                Wait();
                                button_skip_a = ElementByXPath("//a[@id='btn2']");
                                if (DateTime.Now > t1)
                                {
                                    break;
                                }
                            }
                            Click(button_skip_a);
                            clicked_2 = true;
                        }
                    }
                    if (!clicked_2)
                    {
                        if (IsVisible(ElementByXPath("//a[@class='getlinkbtn get-link disabled']")) || IsVisible(ElementByXPath("/a[@class='getlinkbtn get-link']")))
                        {
                            var button_skip_a = ElementByXPath("/a[@class='getlinkbtn get-link']");
                            while (button_skip_a == null)
                            {
                                Wait();
                                button_skip_a = ElementByXPath("/a[@class='getlinkbtn get-link']");
                            }
                            Click(button_skip_a);
                            clicked_2 = true;

                        }
                    }

                }
            }
            try
            {
                Driver.SwitchTo().Alert().Accept();
            }
            catch (Exception)
            {

            }

            if (Driver.Url.Contains(url))
            {
                bypassed = true;

                Wait(3, 4);
            }
            else
            {
                bypassed = false;
                if (Driver.Url.Contains(url_a))
                {
                    Driver.Navigate().Refresh();

                }
                else
                {
                    GoToUrl(url_a);
                }

            }
            if (cont >= 3)
            {
                if (Driver.Url.Contains(url))
                {
                    iscorrect = true;
                }
                else
                {
                    iscorrect = false;
                }

                break;
            }
            cont++;

        } while (!bypassed);
        return iscorrect;


    }
    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
