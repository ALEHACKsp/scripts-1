
//============================================//
//script Written first by: cgerabit 04/02/2019 15:00PM - Version 1
//script update xpath elements and new way by: AviramDayan 14/01/2020 15:45PM - Version 5
//============================================//

using System;
using FaucetCollector.Script;
//css_inc RecaptchaUtilities
public class SatoshiHeroScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://satoshihero.com")
            {
                new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Satoshi Hero";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; //*[text()='']
        FailXPath = "//*"; //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }
	

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//div[contains(@class,'v-list-item__title') and contains(text(),'Log Out')]") != null;
	 
	    //return true;
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	

	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
		
        GoToUrl("https://satoshihero.com/en/game");
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
	



    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {

        var ExitButton = ElementByXPath ("//div[contains(@class,'v-list-item__title') and contains(text(),'Log Out')]"); 
        //if i NOT Login - go to Login Page
        if (!IsVisible(ExitButton))
		{	
	
          GoToUrl("https://satoshihero.com/en/login");
          Wait();
          Wait(3);
		  
          var EmailBox = ElementByXPath("//input[@name='login']");
          if (!IsVisible(EmailBox)) 
		  { 
	      return Fail("Fail Setting email, Email box is not visible"); 
	      }
          SetText(EmailBox, GetSetting("User"));
		  
          Wait(2);
		  
          var PasswordBox = ElementByXPath("//input[@name='password']");
          if (!IsVisible(PasswordBox)) 
		  { 
	      return Fail("Faill setting Password, password box is not visible");
          }
          SetText(PasswordBox, GetPassword("Password"));
		  
          Wait(2);
		  
          var ButtonLogin = ElementByXPath("//button[contains(@class,'ma-auto signin')]");
          if (!IsVisible(ButtonLogin))
          {
            return Fail("Button login is not visible");
		  
          }
          Click(ButtonLogin);
		  
          Wait(1);
		
		}
		      
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }



//==========//
//AfterLogin
//=========//
 public override int AfterLogin()
 {
 
	 
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
 }
//==========//
//AfterLogin
//=========//




	
//=============//
//GetFaucetWaitTime
//=============//
 public override int GetFaucetWaitTime()
 {

        GoToUrl("https://satoshihero.com/en/game");
        if(IsVisible(ElementByXPath("//button/span[contains(text(),'Get free bitcoin')]")))
        {
			Log("Check_Function - Continue");
            return 0;
        }
		
        var MinuteVAR = ElementByXPath("//h1[contains(@class,'error--text')]");
        if (IsVisible(MinuteVAR))
        {
			Log("Check_Function - need to wait");
			
            var Minute2VAR = ElementByXPath("//h1[contains(@class,'error--text')]");
			int MinINT, SecINT;
            MinINT = Convert.ToInt32(Minute2VAR.Text.Trim().Split(':')[1])*60;
            SecINT = Convert.ToInt32(Minute2VAR.Text.Trim().Split(':')[2]);
            //return MinINT + SecINT;
            return GetWaitSetting(); 
        }	

		
   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
//=============//
//GetFaucetWaitTime
//=============//
	
	

    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }





    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
		
        Check_Function(); //call
		Log("Check_Function");
		
        var ButtonClaim = ElementByXPath("//button/span[contains(text(),'Get free bitcoin')]");
        if (!IsVisible(ButtonClaim))
        {
		Log("ButtonClaim not visible");
        }
        Click(ButtonClaim);
		
        Wait(4);
		
        var IframeCaptcha = ElementByXPath("//iframe[contains(@src,'bitplay.io/confirm/captcha')]");
        if (IsVisible(IframeCaptcha))
        {
		    Log("IframeCaptcha visible");

            Driver.SwitchTo().Frame(IframeCaptcha);
            Wait(2);
            var result = DoSolveCaptcha();
            if (result > 0)
            {
                Log("Fail solving captcha");
                Driver.SwitchTo().DefaultContent();
                return Fail("Fail Claim");
            }
            RecaptchaUtility recaptchaUtility = new RecaptchaUtility(this);
            recaptchaUtility.DoSolve();
            Wait(2);
        } //end IframeCaptcha
		
        var SuccessMessageFirst = ElementByXPath("//div[contains(@class,'alert alert-success')]/h5");
        if (IsVisible(SuccessMessageFirst))
        {
            Log(SuccessMessageFirst.Text);	
		
            Wait(2);

            Driver.SwitchTo().DefaultContent();

            var ButtonContinue = ElementByXPath("//span[contains(text(),'Continue to claim')]");
            if (IsVisible(ButtonContinue))
            {
                Click(ButtonContinue);		    	
            }
		
            Wait(4);
		
            var ResultsAll = ElementByXPath("//p[@data-v-801ffe70]");
            if (IsVisible(ResultsAll))
            {
            Log(ResultsAll.Text);
		    }
		
		    ClaimSuccess(); //Marks the claim as a success also
		
            Driver.Navigate().Refresh();
            Wait();
		
        } //end SuccessMessageFirst

		Check_Function(); //call
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }



    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }




    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	
	
      //=================//
      //Check_Function
      //=================//

      public int Check_Function()
      {
		
        GoToUrl("https://satoshihero.com/en/game");
        if(IsVisible(ElementByXPath("//button/span[contains(text(),'Get free bitcoin')]")))
        {
			Log("Check_Function - Continue");
            return 0;
        }
		
        var MinuteVAR = ElementByXPath("//h1[contains(@class,'error--text')]");
        if (IsVisible(MinuteVAR))
        {
			Log("Check_Function - need to wait");
			
            var Minute2VAR = ElementByXPath("//h1[contains(@class,'error--text')]");
			int MinINT, SecINT;
            MinINT = Convert.ToInt32(Minute2VAR.Text.Trim().Split(':')[1])*60;
            SecINT = Convert.ToInt32(Minute2VAR.Text.Trim().Split(':')[2]);
            //return MinINT + SecINT;
            return GetWaitSetting(); 
        }	

	    return 0;
      }//end Check_Function
      //=================//	
	
}
