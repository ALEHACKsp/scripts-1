
//============================================//
//script Written by: AviramDayan 01/02/2019 10:00AM
//============================================//
using FaucetCollector.Script;
using System;

public class SpeedUpFaucet : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings(UrlBase)
            {
                new FaucetSetting(){Name="Username",Display ="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="WalletAddress",Display="WalletAddress",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="AutoWithdraw",Display="AutoWithdraw - on/off",Type=EditorType.CheckBox,Default=false},	
				
				//insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    const string UrlBase = "https://www.speedup-faucet.com";
    string HostBase { get { return UrlBase.Replace("https://", "").Replace("http://", ""); } }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        Title = "Free";
        
        SuccessXPath = "//span[@class='text-success']";
        FailXPath = "//span[@class='text-danger']";
       
        base.Start();
        SystemFilters.Rules.Add(new FaucetCollector.Proxy.Rules.FilterRule
        {
            Host = HostBase,
            Action = FaucetCollector.Proxy.Rules.FilterAction.Allow,
            Type = FaucetCollector.Proxy.Rules.FilterType.Url

        });
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//


//======//
//DoInit
//======//
    public override int DoInit()
    {
      
        //Let Faucet Collector continue.
        return base.DoInit();
    }
//======//
//DoInit
//======//



//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        return IsVisible(ElementByXPath("//a[contains(@href, '"+UrlBase+"/account/logout')]"));
    }
//==================//
//save Login Cookies 
//==================//


//===========//
//BeforeLogin
//===========//
    public override int BeforeLogin()
    {
        var GotoLogin = ElementByXPath("//a[contains(text(),'Login')]");
        if (IsVisible(GotoLogin))
        {
            Click(GotoLogin);
        }

        return base.BeforeLogin();
    }
//===========//
//BeforeLogin
//===========//


//=======//
//DoLogin
//=======//
    public void TryWithdraw()
    {
        var Balance = ElementByXPath("//span[@id='balance']");
       
        float Balan=0;
        if (IsVisible(Balance))
        {
            float.TryParse(Balance.Text, out Balan);
        }
        var Wallet = GetSetting("WalletAddress");
        if (Balan > 0 && !string.IsNullOrWhiteSpace(Wallet))
        {
            GoToUrl(UrlBase + "/page/withdraw");
            Wait(1);
            var WithdrawAll = ElementByXPath("//a[contains(text(),'Withdraw All')]");
            if (IsVisible(WithdrawAll))
            {
                Click(WithdrawAll);
                System.Threading.Thread.Sleep(350);
                var WalletBox = ElementByXPath("//input[@name='wallet']");
                if (IsVisible(WalletBox))
                {
                    SetText(WalletBox, Wallet);
                    Wait(1);

                    var ButtonWithDraw = ElementByXPath("//input[@name='withdraw']");
                    if (IsVisible(ButtonWithDraw))
                    {
                        try
                        {
                            Click(ButtonWithDraw);
                            Wait(1);
                            Driver.SwitchTo().Alert().Accept();

                        }
                        catch(Exception ex)
                        {
                            Log(ex.Message);
                        }
                        var Error = ElementByXPath("//span[@class='text-danger']");
                        if (IsVisible(Error))
                        {
                            SetSetting("AutoWithdraw", false);
                            Log(Error.Text);
                        }
                    }

                }
            }

        }
    }
    public override int DoLogin()
    {
        if (!Driver.Url.Contains(HostBase+"/account/login"))
        {
            GoToUrl(UrlBase+"/account/login");
        }
        Wait();
    
		     
        var signInUser = ElementByXPath("//input[@name='username']");
        if (!IsVisible(signInUser))
        {
            return Fail("User box not visible");
        }
        SetText(signInUser, GetSetting("Username"));   
        Wait(2);		
        var signInPassword = ElementByXPath("//input[@type='password']");
        if (!IsVisible(signInPassword))
        {
            return Fail("Password box not visible");
        }
        SetText(signInPassword, GetPassword("Password"));      
        Wait(2);
		var loginButton = ElementByXPath("//input[@type='submit']");
        if (!IsVisible(loginButton))
        {
            return Fail("Login button not visible");
        }
        Click(loginButton);
        Wait(1);
        var ErrorBox = ElementByXPath("//div[@class='alert alert-info alert-dismissible fade show']");
        if (IsVisible(ErrorBox))
        {
            Log(ErrorBox.Text);
            if(ErrorBox.Text.Contains("The username/password you entered is not valid"))
            {
                Disable();
                return Fail("You have not entered correct data. Please check your username/Password");
            }
        }
        return base.DoLogin();
    }
//=======//
//DoLogin
//=======//



//=======//
//AfterLogin
//=======//
    public override int AfterLogin()
    {

        return base.AfterLogin();
    }
//=======//
//AfterLogin
//=======//
	
	
	
	
//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {
        if (!Driver.Url.Contains(HostBase + "/page/faucet"))
        {
            Wait();
            GoToUrl(UrlBase + "/page/faucet");
        }
        Wait(1);
        var Timer = ElementByXPath("//span[@class='large text-warning mb-3' and contains(text(),'minutes remaining for next claim')]");
        if (IsVisible(Timer))
        {
            return Convert.ToInt32(Timer.Text.Split(' ')[0]);
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
       
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {

        return base.BeforeSolveCaptcha();
    }
	

    public override int DoSolveCaptcha()
    {

        return base.DoSolveCaptcha();
    }


    public override int AfterSolveCaptcha()
    {

        return base.AfterSolveCaptcha();
    }
	

    public override int BeforeSolveFaucet()
    {
        if (GetBoolSetting("AutoWithdraw"))
        {
            TryWithdraw();
        }
        return base.BeforeSolveFaucet();
    }



//============//
//DoSolveFaucet
//============//
    public override int DoSolveFaucet()
    {

        //=======//
        //Faucet//
        //======//
        if (!Driver.Url.Contains(HostBase + "/page/faucet"))
        {
            Wait();
            GoToUrl(UrlBase + "/page/faucet");
        }

        CloseModal();
        Wait(1);


        var FaucetDisabledVAR = ElementByXPath("//p[contains(text(),'Faucet temporarily disabled')]");
        if (IsVisible(FaucetDisabledVAR))
        {
            Disable();
            Log("FaucetDisabledVAR - we return after your time");

            return GetWaitSetting();
        }


        var RollClaim = ElementByXPath("//input[@value='Claim']");

        if (!IsVisible(RollClaim))
        {

            return Fail("Button claim not visible");
        }

        //Solve the captcha
        var result = SolveCaptcha();
        if (result > 0)
        {

            return result;
        }
        Click(RollClaim);
        Wait();




        return base.DoSolveFaucet();
    }

    private void CloseModal()
    {
        var CloseModeVAR = ElementByXPath("//div[@id='promomodal']//button[@class='btn btn-primary btn-sm hover-effect']");
        if (IsVisible(CloseModeVAR))
        {
            
            Click(CloseModeVAR);
        }
    }

    //============//
    //DoSolveFaucet
    //============//



    //===============//
    //AfterSolveFaucet
    //===============//
    public override int AfterSolveFaucet()
    {

        return base.AfterSolveFaucet();
    }
//===============//
//AfterSolveFaucet
//===============//
		

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        
     

        var result=  base.CheckFaucetResult();
        if (IsSuccess)
        {
          
            return GetWaitSetting();


        }
        return result;
    }



} // end class
