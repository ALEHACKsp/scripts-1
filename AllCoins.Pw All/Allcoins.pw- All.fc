
using System.Collections.Generic;
using System.Linq;
using FaucetCollector.Script;

public class AllCoinsPWScript : FaucetScript
{
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings ( "https://allcoins.pw/" )
          {
          new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
          new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},

          new FaucetSetting() { Name = "UseSolveMedia", Display = "Use SolveMedia (Leave check by default)", Type = EditorType.CheckBox, Default = true},
          new FaucetSetting(){Name="Faucet",Display="Select Faucet to claim",Type=EditorType.ComboBox,Items=Faucets.Keys.ToList(),Default=Faucets.Keys.FirstOrDefault()}
          };
        }
    }

    private readonly Dictionary<string,string> Faucets=new Dictionary<string, string>
    {
        {"Bitcoin","https://allcoins.pw/faucet.php?coin=BTC" },
        {"DOGE","https://allcoins.pw/faucet.php?coin=DOGE" },
        {"Litecoin","https://allcoins.pw/faucet.php?coin=LTC" },
        {"Ethereum","https://allcoins.pw/faucet.php?coin=ETH" },
        {"DASH","https://allcoins.pw/faucet.php?coin=DASH" },
        {"Monero","https://allcoins.pw/faucet.php?coin=XMR" },
        {"BitcoinCash","https://allcoins.pw/faucet.php?coin=BCH" },
        {"ZCash","https://allcoins.pw/faucet.php?coin=ZEC" },
        {"Ethereum Classic","https://allcoins.pw/faucet.php?coin=ETC" },
        {"IDA","https://allcoins.pw/faucet.php?coin=IDA" },
        {"PIVX","https://allcoins.pw/faucet.php?coin=PIVX" },
        {"DigiByte","https://allcoins.pw/faucet.php?coin=DGB" },
        {"Reddcoin","https://allcoins.pw/faucet.php?coin=RDD" },
        {"Electroneum","https://allcoins.pw/faucet.php?coin=ETN" },
        {"Bitcoin Gold","https://allcoins.pw/faucet.php?coin=BTG" },
        {"Stellar","https://allcoins.pw/faucet.php?coin=XLM" },
        {"Ripple","https://allcoins.pw/faucet.php?coin=XRP" },
        {"Tron","https://allcoins.pw/faucet.php?coin=TRX" },
        {"Bitcoin SV","https://allcoins.pw/faucet.php?coin=BSV" },
        {"BitTorrentToken","https://allcoins.pw/faucet.php?coin=BTT" }
    };

    public string Url_{ get 
        
        {
            var SelectedFaucet=GetSetting("Faucet");

            if ( Faucets.ContainsKey ( SelectedFaucet ) )
            {
                return Faucets[SelectedFaucet];
            }

            return Faucets.Values.FirstOrDefault ( );
        
        }
    }
    //============================================================//
    //the number of "successes" in the script - when are finished  
    //============================================================//
    public override void Start()
    {
        Title = "Allcoins.pw";
        
        SuccessXPath = "//p[starts-with(text(),'Your actual Balance')]";
        FailXPath = "//div[contains(@class,'alert-warning')]";

        base.Start();
        Url=Url_;
    }
	
	
    public override int DoInit()
    {

        //Let Faucet Collector continue.
        return base.DoInit();
      
    }
	
	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {

        return IsVisible(ElementByXPath("//a[contains(@href, '/logout.php')]"));
    }
//==================//
//save Login Cookies 
//==================//





    public override int BeforeLogin()
    {
	

        return base.BeforeLogin();
    }

	
	
	
	
//==========//
//start DoLogin 
//==========//
    public override int DoLogin()
    {
		//go to "BTC" faucet page
        GoToUrl("https://allcoins.pw/faucet.php?coin=BTC");
		
        Wait(5);

		 var loginPanelBtn = ElementByXPath("//a[@href='#'][contains(text(),'Login')]");
        if (!IsVisible(ElementByXPath("//*[@id='lem']")) && !IsVisible(ElementByXPath("//*[@id='lpw']")) && IsVisible(loginPanelBtn))
        {
            Click(loginPanelBtn);
        }
        Wait(2);

        var c = ElementByXPath("//div[@id='register']//div[@class='modal-dialog modal-dialog-centered']//div[@class='modal-content']//div[@class='modal-footer']//button[@id='swlogin']");
        if (IsVisible(c) && !IsVisible(ElementByXPath("//*[@id='lem']")) && !IsVisible(ElementByXPath("//*[@id='lpw']")))
        {
            Click(c);
        }
		Wait();
		var c2=ElementByXPath("//div[@id='register']//button[@id='swlogin']");
		if(IsVisible(c2) && !IsVisible(ElementByXPath("//*[@id='lem']")) && !IsVisible(ElementByXPath("//*[@id='lpw']")))
        {
		
		Click(c2);
		
		}
        Wait(2);
		
		//now enter the data of - email and password
		
        var EmailVar = ElementByXPath("//input[@placeholder='Email']");
        if (!IsVisible(EmailVar))
        {
        return Fail("Email not found.");
        }
       
		
        var PasswordVar = ElementByXPath("//input[@placeholder='Password']");
        if (!IsVisible(PasswordVar))
        {
        return Fail("Password not found.");
        }
        SetText(PasswordVar, GetPassword("Pass"));
		
        Wait(5);
		
		//solve Captcha
        var captc = ElementByXPath("//label[@for='captchal']");
        var box = ElementByXPath("//input[@id='captchal']");
        var result = DoSolveImageCaptcha(captc, box);

        if (result > 0)
        {
            return Fail("Captcha failed");
        }
		
        Wait(5);

		//login button data
		 SetText(EmailVar, GetSetting("User"));
        var loginButton = ElementByXPath("//*[@id='login']//button[@class='btn btn-primary']");
        if (IsVisible(loginButton))
        {
         Click(loginButton);
        }
		
		//click on login button
      

        return base.DoLogin();

    }


    public override int BeforeSolveCaptcha()
    {
	    //select the right option for captcha
        var solveMediaCaptchaDiv = ElementByXPath("//*[@id='captcha1']");
        var reCaptchaDiv = ElementByXPath("//*[@id='captcha2']");
		var switchCaptchaBtn = ElementByXPath("//a[contains(@onclick, 'swc()')]");

        if (GetBoolSetting("UseSolveMedia"))
        {
            if(reCaptchaDiv != null && IsVisible(reCaptchaDiv))
			{
				if(switchCaptchaBtn != null && IsVisible(switchCaptchaBtn))
				{
					Click(switchCaptchaBtn);
				}
				else
				{
					Fail("Switch not found");
				}
			}
        }
        else
        {
            if(solveMediaCaptchaDiv != null && IsVisible(solveMediaCaptchaDiv))
			{
				if(switchCaptchaBtn != null && IsVisible(switchCaptchaBtn))
				{
					Click(switchCaptchaBtn);
				}
				else
				{
					Fail("Switch not found");
				}
			}
		}

        Wait();

        return base.BeforeSolveCaptcha();
    }

	
//================================//
//end BeforeSolveCaptcha
//================================//
	
	
	 private void CheckAntiBot()
    {
      
        var AntiBotButton = ElementByXPath("//a[contains(@href,'nobothere=1') or contains(@text,'I AM NOT A BOT')]");
        if (IsVisible(AntiBotButton))
        {
            Click(AntiBotButton);
            Wait(4);
        }
      
        
    }
	
    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int DoSolveCaptcha()
	{
		//check for the custom captcha image
		var captchaImage = ElementByXPath("//*[@id='login']//label/img/..");
		if (IsVisible(captchaImage))
		{
			//get the input where the result of the captcha needs to be entered.
			var captchaInput = ElementByName("captchal");
			if (!IsVisible(captchaInput))
			{
				return Fail("ImageCaptcha input field not found");
			}

			//We can use this method to let Faucet Collector solve the image captcha and put the result into the captchaInput element
			var sleep = DoSolveImageCaptcha(captchaImage, captchaInput);
			if (sleep > 0)
			{
				return sleep;
			}

			//return we are done.
			return 0;
		}
		else
		{
			//Let Faucet Collector continue. It will check for SolveMedia and reCAPTCHA.
			return base.DoSolveCaptcha();
		}
	}
	

	
	
//================================//
//start DoSolveFaucet
//================================//
public override int DoSolveFaucet()
{
        string Url_=this.Url_;

        if ( Driver.Url!=Url_ )
        {
            GoToUrl ( Url_ );
        }

       
        Wait ( 2 ); 
        CheckAntiBot ( );


    
        var claimBtn = ElementByXPath("//button[@id='claimb']");
        if ( IsVisible ( claimBtn ) )
        {
            Click ( claimBtn );
        }

        CheckAntiBot ( );

        //get the captchaResolved button after claimBtn click
        var captchaResolvedBtn = ElementByXPath("//button[@type='submit' and contains(@class,'btn-primary')]");
        if ( !IsVisible ( captchaResolvedBtn ) )
        {
            Log ( "Captcha is Resolved button not visible." );
            return 5*60;
        }

        //Solve the captcha
        var result = SolveCaptcha();
        if ( result>0 )
        {

            return result;
        }

       CheckAntiBot ( );


        Wait ( 3 );

        captchaResolvedBtn=ElementByXPath ( "//button[@type='submit' and contains(@class,'btn-primary')]" );
        Wait ( );
        Click ( captchaResolvedBtn );

        CheckAntiBot ( );
        //if the captcha Not resolved
        //fix BAN user Accounts
        //so return 1 hour after
        var FixBanUserAccounts = ElementByXPath("//div[@class='bootstrap-growl alert alert-danger border border-danger alert-dismissible']");
        if ( IsVisible ( FixBanUserAccounts ) )
        {
            return 60*60;
        }

        return base.DoSolveFaucet();
}

    public override int GetFaucetWaitTime ( )
    {
        string Url_=this.Url_;

        if ( Driver.Url!=Url_ )
        {
            GoToUrl ( Url_ );
        }
        Wait ( 2 );
        var Timer=ElementsByXPath("//span[@id='claim']").Where(x=>IsVisible(x) && x.Text.ToLower().Contains("seconds")).FirstOrDefault();
        if ( Timer!=null )
        {
            var SplitedText=Timer.Text.Split ( ' ' );
            string textTimer= SplitedText[SplitedText.Length-2];

            int s;
            if(int.TryParse(textTimer,out s ) )
            {
                return s;
            }
        }
        return base.GetFaucetWaitTime ( );
    }



}
