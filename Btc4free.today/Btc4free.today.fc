using System;
using System.Threading.Tasks;
using FaucetCollector.Script;

public class btc4freetodaycript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://btc4free.today/")
            {
                 new FaucetSetting {
                    Name = "BTC",
                    Display = "FaucetHub linked BTC wallet address",
                    Type = EditorType.Wallet,
                    Required = true,
                    Default = null
                }
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to close popups
        Title = "Bitcoin Faucet by COINGAINGURU";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//DIV[@class='alert alert-success']";
        FailXPath = "//STRONG[text()='Wrong Captcha.']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {

        var withdrawElement = ElementByClass("withdrawBtns");
        if (IsVisible(withdrawElement))
        {
            return true;
        }

        //If the wait time is visible we are also logged in.
        var waitElement = ElementByXPath("//SPAN[@style='font-size: 52px;']");
        if (IsVisible(waitElement))
        {
            return true;
        }

        //If the success payout element is visible we are also logged in.
        var successElement = ElementByXPath("//DIV[@class='alert alert-success']");
        if (IsVisible(successElement))
        {
            return true;
        }

        return false;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //let Faucet Collector continue.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        //Find the input field that holds the email address
        var addressInput = ElementByXPath("//INPUT[@id='btcaddy']");
        if (addressInput == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("BTC address input not found.");
        }

        //Enter the BTC address from the settings the user entered in Faucet Collector into the address element
        SetText(addressInput, GetSetting("BTC"));

        //Now we search for the "get reward" button
        var ENTERButton = ElementByXPath("//BUTTON[@type='submit'][text()='ENTER']");
        if (!IsVisible(ENTERButton))
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Get reward button not found.");
        }

        //We are ready to click the login button.
        Click(ENTERButton);
        Wait();

        //Let Faucet Collector continue
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //we don't need to do anything here for this faucet - let Faucet Collector do its stuff.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        var minutes = Convert.ToString(ExecuteScript("var node = document.evaluate(\"//div[@class='textDiv_Minutes']/SPAN\", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; if (node) { return node.innerText; } else { return ''; }"));
        var seconds = Convert.ToString(ExecuteScript("var node = document.evaluate(\"//div[@class='textDiv_Seconds']/SPAN\", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; if (node) { return node.innerText; } else { return ''; }"));
        if (string.IsNullOrEmpty(minutes) || string.IsNullOrEmpty(seconds))
        {
            return 0;
        }

        var min = Convert.ToInt32(minutes.Trim());
        var sec = Convert.ToInt32(seconds.Trim());
        //return the total wait time in seconds
        return (min * 60) + (sec);
    }


    /// <summary>
    /// This method is called right before a captcha will be solved.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //Let Faucet Collector continue
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //There are two captcha's we need to solve. SolveMedia and a calculation captcha.
        //First we are going to check if the captcha with the calculation is visible.

        return base.DoSolveCaptcha();
    }


    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. 
    /// Next methods that will be called are DoSolveFaucet and AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        var CLAIMButton = ElementByXPath("//BUTTON[@type='button'][text()='CLAIM']");
        if (!IsVisible(CLAIMButton))
        {

            return Fail("Get reward button not found.");
        }

        var result = SolveCaptcha();
        if (result > 0)
        {
            //Unable to solve the captcha - return the failure
            return result;
        }


        Click(CLAIMButton);
        return base.BeforeSolveFaucet();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        var SUBMITButton = ElementByXPath("//BUTTON[@type='submit'][text()='Claim']");
        if (!IsVisible(SUBMITButton))
        {

            return Fail("Get reward button not found.");
        }

        var extraCaptcha = ElementByXPath("//DIV[@class='realperson-text'][contains(text(),'*')]");
        var extraInput = ElementByXPath("//INPUT[@id='secondarycaptcha']");
         if (!IsVisible(extraCaptcha) || !IsVisible(extraInput))
           {
              return Fail("Captcha not found");
           }

       var result =  DoSolveImageCaptcha(extraCaptcha, extraInput);


        Click(SUBMITButton);
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// This faucet shows a "Processing" window after you click the claim submit button.
    /// We will have to wait for it to disappear before we can check for the results.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //Let Faucet Collector continue
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //Let Faucet Collector handle the result checking.
        var result = base.CheckFaucetResult();

        if (IsSuccess)
        {

            Reload = true;
        }

        return result;
    }
}