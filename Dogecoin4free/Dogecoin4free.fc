
//============================================//
//script Written first by: cgerabit 24/04/2018
//last update by: AviramDayan 07/06/2019 11:08AM - Version: 19
// FaucetClaim | AutoResetScriptFaucet |  CaptchaNumbersOfFail |  UserTimeToReturnFaucetDaily |  AutoWeeklyRaffleLottery
//============================================//

using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
//css_ref ProcessingImagesUsingLockBits
//css_ref ImageProcessing


public class Dogecoinsfree_ : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get 
        {
            return new FaucetSettings("https://dogecoins4free.com/")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
 
				new FaucetSetting() { Name = "FaucetClaim", Display = "FaucetClaim - ON/off | FreeUser - every 15 min | GoldUser - every 12 min", Type = EditorType.CheckBox, Default = true},
                new FaucetSetting() { Name = "AutoResetScriptFaucet", Display = "AutoResetScriptFaucet - ON/OFF - protect on your account, if the captcha is incorrect more than your fail times, so the script return after your time", Type = EditorType.CheckBox,Default=false},
				new FaucetSetting(){Name="UserTimeToReturnFaucetDaily",Display="UserTimeToReturnFaucetDaily - if you did the all amount of claims daily, when you want to return? (in minutes)",Default="120",Type=EditorType.TextBox,Required=true},
   
				new FaucetSetting() { Name = "AutoWeeklyRaffleLottery", Display = "Auto Weekly Raffle Lottery", Type = EditorType.CheckBox},

				

				
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
		ad=false;
		
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Dogecoins4Free";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*"; 
        FailXPath = "//*"; //*[text()='']
      
        // TimerIsCountingUp = true;

        //Let Faucet Collector start up everything
        base.Start();
    }


    bool ad; //custom bool


    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
	
		//===========//
		//WebSiteDown
		//===========//
	    var WebSiteDown = ElementByXPath("//*[@id='header']/header/h1[contains(text(),'Sorry' | 'shut down')]");
        if (IsVisible(WebSiteDown))
        {
        Log("WebSiteDown");			
        Driver.Close();  // Close specific chrome window
        Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
        Driver.Dispose();  // Close the chromedriver.exe
        return GetWaitSetting();	
		}
		//===========//

		
        //Let Faucet Collector continue.
        return base.DoInit();
    }




    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[@href='edit-profile']") != null;
    }




    //============//	
    //BeforeLogin
    //============//
    public override int BeforeLogin()
    {

        GoToUrl("https://dogecoins4free.com/faucet/login");

        IWebElement ErorOneMoreStep = ElementByXPath("//*[@id='cf-error-details']/div[1]/h1");
        if (IsVisible(ErorOneMoreStep))
        {

            //SolveCaptcha if apper
            int result = SolveCaptcha();
            if (result > 0)
            {
                //Unable to solve the captcha - return the failure
                return result;
            }

        }


        if (!IsVisible(ErorOneMoreStep))
        {
            //return 0;
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    //============//	
    //BeforeLogin
    //============//





    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {

        Wait(5);

        IWebElement user_box = ElementByXPath("//input[@id='username']");
        if (!IsVisible(user_box))
        {
            return Fail("User box not visible");
        }
        SetText(user_box, GetSetting("User"));



        IWebElement pass_box = ElementByXPath("//input[@id='password']");
        if (!IsVisible(pass_box))
        {
            return Fail("Password box not visible");
        }
        SetText(pass_box, GetPassword("Pass"));



        bool captcha_solved = false;
        while (!captcha_solved)
        {
            IWebElement name_ = ElementByXPath("//p[@class='visualCaptcha-explanation']//strong");
            captcha_solved = Solve_VisualCaptcha(name_.Text);
            Wait();
            if (!captcha_solved)
            {
                IWebElement refresh = ElementByXPath("//div[@class='visualCaptcha-refresh-button']");
                Click(refresh);
                Wait(2, 3);
            }
        }

        Wait(3);


        IWebElement button_login = ElementByXPath("//input[@placeholder='Submit']");
        Click(button_login);


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }




    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }




    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
		
		/*
        List<IWebElement> elements = ElementsByXPath("//li[@class='flip-clock-active']//a//a//a");
        if (elements.Count != 0)
        {
            try
            {
                string hours = elements[0].Text + elements[1].Text;
                int hour = Convert.ToInt32(hours);
                string minutes = elements[2].Text + elements[3].Text;
                int minute = Convert.ToInt32(minutes);
                string seconds = elements[4].Text + elements[5].Text;
                int second = Convert.ToInt32(seconds);
				
                Driver.Close();  // Close specific chrome window
                Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
                Driver.Dispose();  // Close the chromedriver.exe				
                return hour * 3600 + minute * 60 + second;
				
            }
            catch (Exception)
            {
                return 900;
            }
        }
		*/
		

        if (ad)
        {
        Driver.Close();  // Close specific chrome window
        Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
        Driver.Dispose();  // Close the chromedriver.exe
		ad=false; //solve the problem in start - after he return to script again
        return GetWaitSetting();	
        }
		
		
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }




    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	




    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }



    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }



    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }





    //===========//
    //DoSolveFaucet
    //===========//
    public override int DoSolveFaucet()
    {

        //=====================//
        //AutoWeeklyRaffleLottery
        //=====================//
        if (GetBoolSetting("AutoWeeklyRaffleLottery"))
        {
            try
            {
                //first go to Lottery page
                Log("AutoWeeklyRaffleLottery: go to Lottery page");
                GoToUrl("https://dogecoins4free.com/faucet/raffle");

                Wait();

                //if the colect balance not 0 - we return after 60 min
                var BalanceVar = ElementByXPath("//div[1]/input[@id='ticketCost']");
				int balance;
                int.TryParse(BalanceVar.GetAttribute("value"), out balance);

                //  ( <=0 - it mean Less and = 0 )  ( ==50 - it mean = 50 )  ( >50 <50 - it Above or less from 50 ) //	


                if (balance > 2)
                {
                    //set LotteryAmount
                    IWebElement LotteryAmountVar = ElementByXPath("//input[@placeholder='How many do you want to allocate?']");
                    Log("AutoWeeklyRaffleLottery: set LotteryAmount");
                    SetText(LotteryAmountVar, GetSetting("LotteryAmount"));

                    Wait(3);

                    IWebElement ButtonAmountVar = ElementByXPath("//input[@name='allocate']");
                    Log("AutoWeeklyRaffleLottery: click ButtonAmountVar");
                    Click(ButtonAmountVar);

                } // end if balance >2



                if (balance < 2)
                {
                    //Do not do anything
                    //return 60*60;
                }
            }
            catch (Exception)
            {
                Log("Fail to do Raffle");
            }
        }


      //===========//
      //FaucetClaim
      //===========//
      if (GetBoolSetting("FaucetClaim"))
      {

         GoToUrl("https://dogecoins4free.com/faucet/roll");

         Wait(2, 3);

		 
         var TodayClaim = ElementByXPath("//div[@class='col-md-4']/center/div[1]/b[2]");
         int Today;
         int.TryParse(TodayClaim.Text, out Today);
		 
		 var ClockTimeVAR = ElementByXPath ("//div[@id='getting-started']");
		 
         if (Today == 75)   //+10
         {
                Log("TodayClaim above 75 times - in one day - we return after 60 min");			 
			    Driver.Close();  // Close specific chrome window
                Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
                Driver.Dispose();  // Close the chromedriver.exe	

                int UserTimeToReturnFaucetDailyINT;
                UserTimeToReturnFaucetDailyINT = GetIntSetting("UserTimeToReturnFaucetDaily") * 60; 
                return UserTimeToReturnFaucetDailyINT;				
         }

	 
		 
         if (!IsVisible(ClockTimeVAR) && Today < 75)   //-10
         {	
		 

            //solve - visual captcha
            bool captcha_solved = false;
            while (!captcha_solved)
            {
                IWebElement name_ = ElementByXPath("//p[@class='visualCaptcha-explanation']//strong");
                captcha_solved = Solve_VisualCaptcha(name_.Text);
                Wait();
                if (!captcha_solved)
                {
                    IWebElement refresh = ElementByXPath("//div[@class='visualCaptcha-refresh-button']");
                    Click(refresh);
                    Wait(2, 3);
                }
            }
            Wait();
            ExecuteScript("processRoll();");
            Wait();

             if (GetBoolSetting("AutoResetScriptFaucet"))
             {  

                 var WrongMessageVAR = ElementByXPath("//span[contains(text(),'fail')]");

                 if (IsVisible(WrongMessageVAR))
                 {    
                  Log("AutoResetScriptFaucet - captcha fail couple of times - we return after 4 min");			 
                  Driver.Close();  // Close specific chrome window
                  Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
                  Driver.Dispose();  // Close the chromedriver.exe	
                  return 4*60;	
                 }

             }// end AutoDisableScriptFaucet
			 
			 
			 
		    Log(" successful ");  
		    CheckFaucetResult(); //skip all actions - and call to --> CheckFaucetResult - to make sure That FC mark as "Payout" before			 
			ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	

		
        }//end < 75
		 
      } //end FaucetClaim

 
            Driver.Close();  // Close specific chrome window
            Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
            Driver.Dispose();  // Close the chromedriver.exe	
            return 10*60;	

	  
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
    //===========//
    //DoSolveFaucet
    //===========//






    //===========//
    //AfterSolveFaucet
    //===========//
    public override int AfterSolveFaucet()
    {


        return base.AfterSolveFaucet();
    }

    //===========//
    //AfterSolveFaucet
    //===========//






    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }




	public Bitmap ChangeImageSize(Bitmap pImg, int pWidth, int pHeigth)
    {

        //Creating new bitmap

        Bitmap vBitmap = new Bitmap(pWidth, pHeigth);

        using (Graphics vGraphics = Graphics.FromImage(vBitmap))

        {

            //Specifi interpolation

            vGraphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;

            //Draw

            vGraphics.DrawImage(pImg, 0, 0, pWidth, pHeigth);

        }

        //return image

        return vBitmap;

    }
	
	

    private bool Solve_VisualCaptcha(string name)
    {
        string dir = AssetDir("Other");
        dir += "\\Images_Dogecoin4free\\" + name + ".png";
        try
        {

            Stream d = new FileStream(dir, FileMode.Open);
            Bitmap img_c = new Bitmap(Image.FromStream(d));
            d.Close();
            List<IWebElement> elements_ = ElementsByXPath("//img[contains(@id,'visualCaptcha-img')]");

            List<Bitmap> Icons = new List<Bitmap>();
            for (int i = 0; i < 5; i++)
            {

                IWebElement element = elements_[i];

                Bitmap img_to_c = TakeScreenshot(Base.Captcha.CaptchaService.Manual, element);
                Icons.Add(img_to_c);
                img_to_c.Save(i.ToString() + ".png");
            }
            Wait();
            int solution = -1;


            ImageProcessing.UsingPixelsPosition.CorrectImage CorrectImageSelector = new ImageProcessing.UsingPixelsPosition.CorrectImage(img_c, Icons);
            solution = CorrectImageSelector.solution;

            IWebElement solution_xpath = ElementByXPath("//img[@id='visualCaptcha-img-" + solution.ToString() + "']");
            if (IsVisible(solution_xpath))
            {
                Click(solution_xpath);
                Wait();
            }
        }
        catch (Exception)
        {

            return false;
        }

        return true;
    }
    

   


} //end public class
