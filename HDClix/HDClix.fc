using System;
using System.Drawing;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Remote;
using Base.Captcha;
using System.Drawing.Drawing2D;

public class HDClix : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("http://www.hdclix.com/")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Earn Long time and High Profit";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='wc_2column wc_flr wc_font2']//div[2]//div[2]//div[1]//div[2]";
        FailXPath = "//div[@class='error_box']";

		Wait(10);
		ExecuteScript("window.stop()");
        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
		Driver.Manage().Cookies.DeleteAllCookies();
		GoToUrl("http://www.hdclix.com/index.php?view=login");
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath(".//*[contains(@href, 'index.php?view=logout')]") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        GoToUrl("http://www.hdclix.com/index.php?view=login");
        var LoginBox = ElementByXPath("//input[@placeholder='Enter Username']");
        if (!IsVisible(LoginBox))
        {
            return Fail("Login box not visible");
        }
        SetText(LoginBox, GetSetting("User"));
        var PassBox = ElementByXPath("//input[@placeholder='Enter Password']");
        if (!IsVisible(PassBox))
        {
            return Fail("Password box not visible");
        }
        SetText(PassBox, GetPassword("Pass"));
		Wait(2, 3);
        var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimglogin']"), ElementByXPath("//input[@id='captcha_login']"));
        if (result > 0)
        {
            return Fail("Problem with captcha");
        }
        Wait();
		var agree = ElementByXPath("//input[@value='Login']");
        if (agree == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Login button not found.");
        }
		Click(agree);
		Wait(5);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        GoToUrl("http://www.hdclix.com/index.php?view=ads");
		Wait();
		var adscaptcha = ElementById("captchaimg");
        int cont = 0;
		while (IsVisible(adscaptcha))
		{
			var result = DoSolveImageCaptcha(adscaptcha, ElementByXPath("//input[@id='captcha']"));
			if (result > 0)
			{
				return Fail("Problem with captcha");
			}
            var access = ElementByXPath("//input[@value='Give me access']");
            Click(access);
            Wait(3);
            adscaptcha = ElementById("captchaimg");
            if (cont >= 3)
            {
                break;
            }
            cont++;
        }
      
	
        var Ads = ElementsByXPath("//div[@class='ad-block ' or @class='ad-block  ']//span[contains(@onclick,'window')]");
        int count_ads = Ads.Count;
        if (cs)
        {
            return 7200;
        }
        return 0;
        //let Faucet Collector continue.
       
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
		GoToUrl("http://www.hdclix.com/index.php?view=ads");
		Wait();
		var adscaptcha = ElementById("captchaimg");
		var access = ElementByXPath("//input[@value='Give me access']");
		if (IsVisible(adscaptcha))
		{
			var result = DoSolveImageCaptcha(adscaptcha, ElementByXPath("//input[@id='captcha']"));
			if (result > 0)
			{
				return Fail("Problem with captcha");
			}
		}
		Click(access);
		Wait(3);
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveFaucet();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
	private static bool cs;
    public override int DoSolveFaucet()
    {
		cs = false;
        bool on_error = false;
		try
		{
			var n = 0;
			var Ads = ElementsByXPath("//div[@class='ad-block ' or @class='ad-block  ']//span[contains(@onclick,'window')]");			
			Log(Ads.Count + " Standard ads detected");
			CheckForPopupsEnabled = false;
			while (Ads.Count > n)
			{
				try
				{
					if (Ads[n].Text.Contains("DO NOT CLICK") || Ads[n].Text.Contains("BOT CHECK") || !IsVisible(Ads[n]))
					{
						n++;
					}
					else
					{
						CheckForPopupsEnabled = false;
						Click(Ads[n], false);
						Driver.SwitchTo().Window(Driver.WindowHandles[1]);
						Wait(5);
						var verify = ElementByXPath("//input[@value='Continue']");
						var countdown = ElementByXPath("//div[@id='progress']");
						var tozero = ElementByXPath("//img[@src='modules.php?m=surfer&show=captcha']");
						if (IsVisible(verify))
						{
							var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimg']"), ElementByXPath("//input[@id='captcha']"));
							if (result > 0)
							{
								return Fail("Problem with captcha");
							}
							Click(verify);
						}
						DateTime t2 = DateTime.Now.AddSeconds(20);
						while (IsVisible(ElementByXPath("//div[@class='adwait']")))
						{
							Wait();
							if (DateTime.Now > t2)
							{
								break;
							}
						}
						Wait();
						countdown = ElementByXPath("//div[@id='progress']");
						tozero = ElementByXPath("//img[@src='modules.php?m=surfer&show=captcha']");
						DateTime t1 = DateTime.Now.AddSeconds(100);
						while (IsVisible(countdown) && !IsVisible(tozero))
						{
							Wait();
							countdown = ElementByXPath("//div[@id='progress']");
							tozero = ElementByXPath("//img[@src='modules.php?m=surfer&show=captcha']");
							if (DateTime.Now > t1)
							{
								break;
							}
						}
						if (IsVisible(tozero))
						{
							solve_image_catpcha();
                            on_error = false;
						}
                        else
                        {
                            if (on_error)
                            {
                                n++;
                            }
                            on_error = true;
                        }
					}
					CheckForPopupsEnabled = true;
					CheckForPopups();
					Driver.SwitchTo().Window(Driver.WindowHandles[0]);
					Wait();
					if (Driver.Url.Contains("http://www.hdclix.com/index.php?view=ads"))
					{
						GoToUrl("http://www.hdclix.com/index.php?view=ads");
					}
					else
					{
						Driver.Navigate().Refresh();
					}
					Wait(2, 3);
					var access1 = ElementByXPath("//input[@value='Give me access']");
					if (IsVisible(access1))
					{
						var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimg']"), ElementByXPath("//input[@id='captcha']"));
						if (result > 0)
						{
							return Fail("Problem with captcha");
						}
						Click(access1);
						Wait(2, 3);
					}
					Ads = ElementsByXPath("//div[@class='ad-block ' or @class='ad-block  ']//span[contains(@onclick,'window')]");
				}
				catch (Exception)
				{
					CheckForPopupsEnabled = true;
					CheckForPopups();
					Driver.SwitchTo().Window(Driver.WindowHandles[0]);
					Wait();
					if (Driver.Url.Contains("http://www.hdclix.com/index.php?view=ads"))
					{
						GoToUrl("http://www.hdclix.com/index.php?view=ads");
					}
					else
					{
						Driver.Navigate().Refresh();
					}
					Wait(2, 3);
					var access_ = ElementByXPath("//input[@value='Give me access']");
					if (IsVisible(access_))
					{
						var result = DoSolveImageCaptcha(ElementByXPath("//img[@id='captchaimg']"), ElementByXPath("//input[@id='captcha']"));
						if (result > 0)
						{
							return Fail("Problem with captcha");
						}
						Click(access_);
						Wait(2, 3);
					}
					Ads = ElementsByXPath("//div[@class='ad-block ' or @class='ad-block  ']//span[contains(@onclick,'window.open')]");
				}
            }
		}
		catch (Exception)
		{
			Driver.Navigate().Refresh();
			Wait();
		}
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
	static bool ptc_wall;
    static bool clix;
    static int cont_;
    public override int AfterSolveFaucet()
    {
		Wait();
      

		try 
		{
			int error = 0;
			int cont_ = 0;
			int cont__ = 0;
            bool see = false;
            int  m_ad = 0;
            int count_nad = 0;
			bool onerror = false;
			Wait();
			while (!ptc_wall)
			{
                try
                {
                    var wall_ = ElementByXPath("//iframe[@src='ptcwalls.php?ads=yes']");
                    Driver.SwitchTo().Frame(wall_);
                    Wait();
                    var Wall_2 = ElementByXPath("//iframe[contains(@src,'ptcwall')]");
                    Driver.SwitchTo().Frame(Wall_2);
                }
                catch (Exception)
                {

                }
				var ads_ptcwall = ElementsByXPath("//p[@class='btn-earn']//span[contains(@onclick,'window.open')]");
				if (ads_ptcwall.Count > m_ad)
				{
					if (!see)
					{
						Log("Ptc WAll have " + ads_ptcwall.Count.ToString() + " Ads avaible");
						see = true;
					}
					CheckForPopupsEnabled = false;
					if (count_nad == 0)
					{
						Click(ads_ptcwall[m_ad], false);
					}
					else
					{
						ExecuteScript("var a=document.getElementsByClassName('btn-earn');a[" + m_ad.ToString() + "].children[0].click()");
					}
					Driver.SwitchTo().Window(Driver.WindowHandles[1]);
					Driver.SwitchTo().DefaultContent();
					Wait(2);
						DateTime t1 = DateTime.Now.AddSeconds(105);
					while (!IsVisible(ElementByXPath("//div[@id='vnumbers']")))
					{
						Wait();
						if (t1 < DateTime.Now)
						{
							break;
						}
						if (IsVisible(ElementByClass("errorbox")))
						{
							if (error > 2)
							{
								ptc_wall = true;
								break;
							}
							if (count_nad == 0)
							{
								error++;
								count_nad++;
							}
							else
							{
								cont__++;
								if (cont__ > 4)
								{
									ptc_wall = true;
									break;  
								}
								count_nad = 0;
								m_ad++;
								error++;
							}
							onerror = true;
							break;
						}
						else
						{
							error = 0;
							count_nad = 0;
						}
					}
					if (!onerror)
					{
						Wait(3);
						solve_image_catpcha();
					}
					Wait(3);
					Driver.SwitchTo().Window(Driver.WindowHandles[0]);
					CheckForPopupsEnabled = true;
					CheckForPopups();
					if (Driver.Url.Contains("http://www.hdclix.com/index.php?view=ads"))
					{
						Driver.Navigate().Refresh();
					}
					else
					{                  
						GoToUrl("http://www.hdclix.com/index.php?view=ads");
					}
					Wait(2);
				}              
				else
				{
					ptc_wall = true;
				}
			}
		}
		catch (Exception ex) 
		{
            if (cont_ >= 3)
            {
                ptc_wall = true;
            }     
            cont_++;
            CheckForPopupsEnabled = true;
            CheckForPopups();
            Log(ex.ToString());
        }
        finally
        {
            CheckForPopupsEnabled = true;
            CheckForPopups();
        }
		cs = true;
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
		GoToUrl("http://www.hdclix.com/index.php?view=account");
        return base.CheckFaucetResult();
    }
	private Bitmap GetElementScreenShort(IWebDriver driver, IWebElement element, string name)
    {
        Actions actions = new Actions(driver);
        actions.MoveToElement(element);
        actions.Perform();
        Screenshot sc = ((ITakesScreenshot)driver).GetScreenshot();
        var img = Image.FromStream(new MemoryStream(sc.AsByteArray)) as Bitmap;
        var x = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.left;", element);
        var y = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.top;", element);
        int x2 = Convert.ToInt32(x);
        int y2 = Convert.ToInt32(y);
        var width = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.width;", element);
        var height = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.height;", element);
        int width2 = Convert.ToInt32(width);
        int height2 = Convert.ToInt32(height);
        if (Convert.ToInt32(name) != 4)
        {
            img = img.Clone(new Rectangle(x2, y2, width2, height2), img.PixelFormat);
        }
        else
        {
            img = img.Clone(new Rectangle(x2, y2, width2, height2), img.PixelFormat);
        }
        return img;
    }
	
	public bool solve_image_catpcha()
    {
        bool IsSolved = false;
        try
        {
            var capt = ElementByXPath("//img[contains(@src,'show=captcha')]");
            Bitmap captcha = TakeScreenshot(CaptchaService.Manual, capt);
            if(captcha.Width!=300 || captcha.Height != 50)
            {
                captcha = ResizeImage(captcha, new Size(300, 50), false);
            }
            Wait();
            Bitmap[] icons = new Bitmap[6];
            icons[0] = captcha.Clone(new Rectangle(0, 0, 50, 50), captcha.PixelFormat);
            icons[1] = captcha.Clone(new Rectangle(50, 0, 50, 50), captcha.PixelFormat);
            icons[2] = captcha.Clone(new Rectangle(100, 0, 50, 50), captcha.PixelFormat);
            icons[3] = captcha.Clone(new Rectangle(150, 0, 50, 50), captcha.PixelFormat);
            icons[4] = captcha.Clone(new Rectangle(200, 0, 50, 50), captcha.PixelFormat);
            icons[5] = captcha.Clone(new Rectangle(250, 0, 50, 50), captcha.PixelFormat);


            string asset_d = AssetDir("Other");
            int result_ = -1;
            asset_d += "\\Images Ptcwall\\";
            bool enc = false;

            for (int i = 0; i < 6; i++)
            {
                for (int j = 1; j <= 10; j++)
                {

                    string dir = asset_d + j.ToString() + ".png";
                    FileStream s = new FileStream(dir, FileMode.Open);
                    Bitmap imgtocomp = new Bitmap(Image.FromStream(s));
                    s.Close();
                    bool result = CompareImage(icons[i], imgtocomp);
                    if (result)
                    {
                        result_ = i;
                        enc = true;
                        break;
                    }
                }
            }
            if (enc)
            {
                result_++;
                ExecuteScript("endprogress(" + result_.ToString() + ");");
                Wait();
                IsSolved = true;
            }
        }
        catch (Exception ex)
        {
            Log(ex.ToString());
            IsSolved = false;
        }

        return IsSolved;
    }
	private bool CompareImage(Bitmap image1, Bitmap image2)
    {
        for (int i = 0; i < image1.Height; i++)
        {
            for (int j = 0; j < image1.Width; j++)
            {
                if (!SameColor(image1.GetPixel(j, i), image2.GetPixel(j, i), 100))
                {
                    return false;
                }
            }
        }
        return true;
    }
	private bool SameColor(Color c1, Color c2, double thre)
    {
        int r = c1.R - c2.R;
        int g = c1.G - c2.G;
        int b = c1.B - c2.B;
        if (r * r + g * g + b * b > thre * thre)
        {
            return false;
        }
        return true;
    }
}