using System;
using FaucetCollector.Script;
using OpenQA.Selenium;
//css_inc ShortLinkUtilities

public class Firefaucet_Short : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://firefaucet.win/")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="UseSolvemedia",Display="Only use solvemedia Shortlink",Type=EditorType.CheckBox,Default=false },
                new FaucetSetting(){Name="IG",Display="Shortlinks to ignore(separate names with',' Example: Shortlink1,Shortlink2,Shortlink3)",Type=EditorType.TextBox,Default=""},
                new FaucetSetting(){Name="N",Display="No wait time to next shortlink",Type=EditorType.CheckBox,Default=false},
                new FaucetSetting(){Name="UseSolvemedia",Display="UseSolvemedia on login",Type=EditorType.CheckBox,Default=true},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Fire Faucet";
        cs_2 = false;
        cs = false;
        N_more_S = false;
        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@id='messagetext']";
        FailXPath = "//div[@class='site-wrapper-inner']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        Driver.Manage().Cookies.DeleteAllCookies();
       
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[@href='/logout']") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        if (!Driver.Url.Contains("https://firefaucet.win/"))
        {
            GoToUrl("https://firefaucet.win/");
        }

        Wait(2, 3);

        var box_user = ElementByXPath("//input[@type='username']");
        if (!IsVisible(box_user))
        {
            return Fail("Box user not found");
        }
        SetText(box_user, GetSetting("User"));


        var box_pass = ElementByXPath("//input[@id='pwd']");
        if (!IsVisible(box_pass))
        {
            return Fail("Box pass not found");
        }
        SetText(box_pass, GetPassword("Pass"));
        Wait();
        if (GetBoolSetting("UseSolvemedia"))
        {
            ExecuteScript("switchCaptcha('SolveMedia')");
            Wait();
        }
        else
        {
            ExecuteScript("switchCaptcha('Recaptcha')");
            Wait();
        }
        Wait();
        // solve reCAPTCHA 2
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solve captcha");
        }

        var button = ElementByXPath("//button[@value='Login']");
        if (!IsVisible(button))
        {
            return Fail("Button login not visible");
        }
        Click(button);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        if (!GetBoolSetting("N"))
        {
            if (cs)
            {
                return 3;
            }
            if (cs_2)
            {
                return 3;
            }
        }
        if (N_more_S)
        {
            return 3;
        }
        return 0;
        //let Faucet Collector continue.

    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
  public  bool cs_2;
    public  bool N_more_S;
    public override int DoSolveFaucet()
    {
        cs = false;

     
            GoToUrl("https://firefaucet.win/");
        Wait();
        var button = ElementByXPath("//a[@id='getmore']");
        
        if (!IsVisible(button))
        {
            return Fail("button not visible");
        }
       
            Click(button);
        
        Wait(2, 3);
        if (!GetBoolSetting("UseSolvemedia"))
        {
            var links_title = ElementsByXPath("//div[@class='hoverable']//span[@style='font-size:20px;']");
            bool link_ob = false;
            int count = 0;
            int solution = -1;
            string[] ignored_short = GetSetting("IG").Split(',');
            while (!link_ob && count < links_title.Count)
            {
                    bool l_ignored = false;
                    for (int i = 0; i < ignored_short.Length; i++)
                    {
                        if (ignored_short[i].Replace(" ", "").ToLower() == links_title[count].Text.Replace(" ", "").ToLower())
                        {
                            l_ignored = true;
                            break;
                        }
                    }
                    if (!l_ignored)
                    {
                        solution = count;
                        link_ob = true;
                    }
                
                count++;
            }
            if (!link_ob)
            {
                N_more_S = true;
                Log("You not have more shortlinks today");
                cs = true;
                cs_2 = true;
            }
            var shortlink = ElementsByXPath("//div[@class='hoverable']//a[@id='sbtn']");
            if (shortlink.Count > 0)
            {
                string url = shortlink[solution].GetAttribute("href");
                GoToUrl(url);
            }
        }
        else
        {
            var links_title = ElementsByXPath("//div[@class='hoverable']//span[@style='font-size:20px;']");
            bool link_ob = false;
            int count = 0;
            int solution = -1;
            string[] ignored_short = GetSetting("IG").Split(',');
            while (!link_ob && count<links_title.Count)
            {
                if(links_title[count].Text.Contains("Linkrex") || links_title[count].Text.Contains("ClikPW") ||links_title[count].Text.Contains("AdBilty") || links_title[count].Text.Contains("LinkShrink")|| links_title[count].Text.Contains("BtcMS") || links_title[count].Text.Contains("AdCoin") || links_title[count].Text.Contains("EMT") || links_title[count].Text.Contains("MadUrls"))
                {
                    bool l_ignored = false;
                    for(int i = 0; i < ignored_short.Length; i++)
                    {
                        if(ignored_short[i].Replace(" ", "").ToLower() == links_title[count].Text.Replace(" ","").ToLower())
                        {
                            l_ignored = true;
                            break;
                        }
                    }
                    if (!l_ignored)
                    {
                        solution = count;
                        link_ob = true;
                    }
                }
                count++;
            }
            if (link_ob == false)
            {
                N_more_S = true;
                cs_2 = true;
                cs = true;
                return Fail("You do not have more solvemedia links avaible");

            }
            var shortlink = ElementsByXPath("//div[@class='hoverable']//a[@id='sbtn']");
            var url = shortlink[solution].GetAttribute("href");
            GoToUrl(url);

           
        }
        Wait(2,3);
        ShortLinkBypasser bypasser = new ShortLinkBypasser(this);
        cs=bypasser.DoShortLink();
        
      
    
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
   
    private bool cs;
}
