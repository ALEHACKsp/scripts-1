using System.Collections.Generic;
using System.Linq;
using FaucetCollector.Script;
//css_inc ShortLinkUtilities
class AutoBitcoin_ :FaucetScript
    {

    public override FaucetSettings Settings { get {

            return new FaucetSettings ( BaseUrl)
            {
                new FaucetSetting(){Name="User",Type=EditorType.TextBox,Display="Username",Required=true},
                new FaucetSetting(){Name="Pass",Type=EditorType.Password,Display="Password",Required=true},
                new FaucetSetting(){Name="UseSolvemedia",Type=EditorType.CheckBox,Display="UseSolvemedia",Default=true},
                new FaucetSetting(){Name="Coin",Type=EditorType.ComboBox,Display="Coin",Default=Coins.FirstOrDefault(),Items=Coins},
                new FaucetSetting(){Name="ConvertC",Type=EditorType.CheckBox,Display="Convert Coins",Default=true }
            };


        
        } 

    }
    public const string BaseUrl="https://autobitco.in/";
    public const string LoginUrl=BaseUrl+"auth/signin";
    public  const string ShortUrl=BaseUrl+"/dashboard/shortlinks/visit/";

    public override void Start ( )
    {
        SuccessXPath="//div[@class='alert alert-success']";
        FailXPath="//div[@class='alert alert-danger']";

        Title="AutoBitcoin";
        base.Start ( ); 
    }
    public List<string> Coins=new List<string>
    {
        "BTC",
        "ETH",
        "XMR",
        "LTC",
        "DOGE",
        "BCH",
        "ZEC",
        "DGB",
        "DASH",
        "PPC",
        "POT",
        "TRX",
        "XRP",
        "NEO",
        "BCN",
        "STRAT"
    };
    public const string ConvertCoinsUrl=BaseUrl+"dashboard/claim/manual";
    public const string FaucetUrl=BaseUrl+"dashboard/shortlinks";
    public override int DoLogin ( )
    {
        GoToUrl ( LoginUrl );
        Wait ( 2 );

        var Userbox=ElementByXPath("//input[@placeholder='Username']");
        if ( !IsVisible(Userbox) )
        {
            return Fail ( "User box is not visible" );
        }
        SetText ( Userbox , GetSetting ( "User" ) );

        var PasswordBox=ElementByXPath("//input[@placeholder='Password']");
        if ( !IsVisible(PasswordBox ))
        {
            return Fail ( "Password box is not visible" );
        }

        SetText ( PasswordBox , GetPassword ( "Pass" ) );

        var result=DoSolveCaptcha();
        if ( result>0 )
        {
            return result;
        }

        var ButtonLogin=ElementByXPath("//button[@id='submit']");
        if ( !IsVisible(ButtonLogin) ) {

            return Fail ( "Button login is not visible" );
        
        }

        Click ( ButtonLogin );
        var Error=ElementByXPath("//div[@class='toast-message']");
        if ( IsVisible(Error) )
        {
            Log ( Error.Text );
        }
        
        return base.DoLogin ( );
    }
    private int Balance { get
        {
            var Balancevar=ElementByXPath("//span[@id='acpro']");
            if ( IsVisible ( Balancevar ) )
            {
                int bal;
                if ( int.TryParse (Balancevar.Text.Trim(),out bal) )
                {
                    return bal;
                }

            }
            return 0;
        } 
    }
    public override int DoSolveCaptcha ( )
    {
        var Selectcaptcha=ElementByXPath("//select[@id='captcha-select']");
        if ( IsVisible ( Selectcaptcha ) )
        {
            if ( GetBoolSetting ( "UseSolvemedia" ) )
            {
                SelectOptionByValue ( Selectcaptcha , "solvemedia" );
            }
            else
            {
                SelectOptionByValue (Selectcaptcha , "recaptcha" );
            }
            Wait ( );
        }

        return base.DoSolveCaptcha ( ); 
    }
    public override bool IsLoggedIn ( )
    {


        return ElementByXPath ( "//a[@href='/auth/logout']" )!=null;
    }

    public override int DoSolveFaucet ( )
    {
        GoToUrl ( FaucetUrl );

        Wait ( );

        var ShortlinksLeft=ElementsByXPath("//button[contains(@class,'visit-button')]").Where(x=>IsVisible(x)).ToList();
        if ( ShortlinksLeft.Count>0 )
        {
            int NShort=Random ( 0 , ShortlinksLeft.Count );




            Wait ( );
            ShortLinkBypasser bypasser=new ShortLinkBypasser(this);
            try
            {
                CheckForPopupsEnabled=false;
                Click ( ShortlinksLeft[NShort] , false );
                Wait ( 1 );
                Driver.SwitchTo ( ).Window ( Driver.WindowHandles[0] );
                Driver.Close ( );

            }
            finally
            {
                Driver.SwitchTo ( ).Window ( Driver.WindowHandles[0] );
                CheckForPopupsEnabled=true;
            }

            bool Succ=bypasser.DoShortLink();
            if ( Succ )
            {
                CheckFaucetResult ( );

            }




        }

        if ( GetBoolSetting ( "ConvertCoins" ) )
        {

            GoToUrl ( ConvertCoinsUrl );

            if ( Balance>60 )
            {
                var CurrencySelect=ElementByXPath("//select[@id='currency-select']");
                if ( IsVisible ( CurrencySelect ) )
                {
                    SelectOptionByValue ( CurrencySelect , GetSetting ( "Coin" ) );

                }

                DoSolveCaptcha ( );

                Wait ( );
                var ButtonClaim=ElementByXPath("//button[@class='btn btn-primary']");
                if ( IsVisible ( ButtonClaim ) )
                {
                    Click ( ButtonClaim );
                }
                var SuccOrError=ElementByXPath("//div[@class='toast-message']");
                if ( IsVisible ( SuccOrError ) )
                {
                    Log ( SuccOrError.Text );
                }
            }

        }
        return GetWaitSetting ( );
    }
}

