using System;
using System.Globalization;
using FaucetCollector.Script;
//css_inc ShortlinkUtilities
public class SatoshiLabs : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://satoshilabs.net/")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="ClaimShortlink",Display="ClaimShortlink",Type=EditorType.CheckBox,Default=false},
                new FaucetSetting(){Name="AutoBuy",Display="Autobuy(0 Disabled)",Type=EditorType.Numeric,Default=0},

                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "SatoshiLabs";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//center[contains(text(),'You received')]";
        FailXPath = "//center[contains(text(),'Wrong Captcha')]";
        
        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[contains(text(),'Logout')]") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        var ButtonLoginPage = ElementByXPath("//a[contains(text(),'Login')]");
        if (IsVisible(ButtonLoginPage))
        {
            Click(ButtonLoginPage);
            Wait(1);
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        if (!Driver.Url.Contains("https://satoshilabs.net/login.php"))
        {
            GoToUrl("https://satoshilabs.net/login.php");
            Wait(1);
        }
        var userBox = ElementByXPath("//input[@name='username']");
        if (!IsVisible(userBox))
        {
            return Fail("Fail Login, User box not visible");
        }
        SetText(userBox, GetSetting("User"));
        var passBox = ElementByXPath("//input[@name='password']");
        if (!IsVisible(passBox))
        {
            return Fail("Fail login, Password Box not visible");
        }
        SetText(passBox, GetPassword("Pass"));
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }
        var button = ElementByXPath("//button[@name='login']");
        if (!IsVisible(button))
        {
            return Fail("Button login not visible");
        }
        Click(button);
        Wait(1);
        

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        var GoFaucetButton = ElementByXPath("//a[contains(text(),'Faucet')]");
        if (IsVisible(GoFaucetButton))
        {
            Click(GoFaucetButton);
        }
        Wait(1);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        if (!Driver.Url.Contains("https://satoshilabs.net/faucet.php"))
        {
            GoToUrl("https://satoshilabs.net/faucet.php");
        }
        var kkcMin = ElementByXPath("//span[@class='kkc-min']");
        var kkcSeg = ElementByXPath("//span[@class='kkc-sec']");
        if(IsVisible(kkcMin) && IsVisible(kkcSeg))
        {
            return GetWaitSetting();
        }

        //let Faucet Collector continue.
        return 0;
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        if (GetBoolSetting("ClaimShortlink"))
        {
            if (Driver.Url != "https://satoshilabs.net/shortlinks.php")
            {
                GoToUrl("https://satoshilabs.net/shortlinks.php");
                Wait();
            }

            var Shortlinks = ElementsByXPath("//button[@class='btn btn-default btn-sm']");
            if (Shortlinks.Count>0)
            {
                ShortLinkBypasser bypasser = new ShortLinkBypasser(this);
                Click(Shortlinks[Random(0, Shortlinks.Count - 1)]);
                Wait();
                bypasser.DoShortLink();

            }
            else
            {
                SetSetting("ClaimShortlink", false);
            }
        }
        int AutoBuy = GetIntSetting("AutoBuy");
       
        if (AutoBuy!=0)
        {
            AutoBuy--;
            
            GoToUrl("https://satoshilabs.net/main.php");

            Wait(1);
            var ButtonBuy = ElementsByXPath("//button[@class='btn btn-success']");
            if (ButtonBuy.Count > AutoBuy)
            {
                Log("Trying to buy Property Nº " + (AutoBuy + 1).ToString());
                double Balance;
                var Balance_ = ElementByXPath("//span[@class='satoshic' and not(contains(text(),'Lab'))]");
                double.TryParse(Balance_.Text, System.Globalization.NumberStyles.Any, CultureInfo.InvariantCulture, out Balance);
                double BalanceNeeded;
                var BalanceNeeded_ = ElementsByXPath("//span[@class='badge badge-default' and contains(text(),'Cost')]");
                if (BalanceNeeded_.Count > AutoBuy)
                {
                    double.TryParse(BalanceNeeded_[AutoBuy].Text.Split(' ')[1], NumberStyles.Any, CultureInfo.InvariantCulture, out BalanceNeeded);
                    if (BalanceNeeded < Balance)
                    {
                        Click(ButtonBuy[AutoBuy]);
                        Wait();
                    }

                }
            }


        }
      
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        if (!Driver.Url.Contains("https://satoshilabs.net/faucet.php"))
        {
            GoToUrl("https://satoshilabs.net/faucet.php");
        }
        var HideChat = ElementByXPath("//button[@class='chatbro_header_button chatbro_minimize_button']");
        if (IsVisible(HideChat))
        {
            Click(HideChat);
            Wait(1);
        }
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }
        Wait(1);
        var buttonClaim = ElementByXPath("//button[@name='claim']");
        if (!IsVisible(buttonClaim))
        {
            return Fail("button claim is not visible");

        }
        Click(buttonClaim);

      
        var buttonClaim2 = ElementByXPath("//button[@name='claim']");
        if (!IsVisible(buttonClaim2))
        {
            return Fail("buttonClaim2 not visible is possible that the captcha was incorrect");

        }
		Wait();
		if(IsVisible(ElementByXPath("//iframe[contains(@src,'recaptcha')]"))){
		var result_=DoSolveCaptcha();
		if(result_>0){
		
		}
		}
		buttonClaim2 = ElementByXPath("//*[contains(text(),'Get Reward')]");
        Click(buttonClaim2);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
