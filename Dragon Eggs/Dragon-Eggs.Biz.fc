using System;
using FaucetCollector.Script;
using OpenQA.Selenium;

public class dragoegg : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {		
		
            return new FaucetSettings("http://www.Dragon-Eggs.Biz")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="DailyBonus",Display="Claim Daily Bonus",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="HourlyBonus",Display="Claim Hourly Bonus",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="RiskingBonus",Display="Claim Risking Bonus",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="ExchangeEggs",Display="Exchange Eggs above 1 Egg",Type=EditorType.CheckBox,Default=true},
              //  new FaucetSetting(){Name="img",Display="UseImageCaptcha",Type=EditorType.CheckBox,Default=true},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Dragon-Eggs";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//button[@id='bonus-banner']";
		//none button - no need to put nothing
        FailXPath = "//button[@id='']";

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//


	
	//loop
    public static bool cs;

	
    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
	
    public override int DoInit()
    {
        cs = false;
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
//when you are logout - if the button "PAYMENT ORDER" not found
//so 
//when you are login //save login Cookies
   return ElementByXPath("//*[@id='balances']/div[3]/a") != null;


    }
//==================//
//save Login Cookies 
//==================//





    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }


	
	
	
//================================//
//start DoLogin
//================================//
    public override int DoLogin()
    {

//go to "Login area"
GoToUrl("https://dragon-eggs.biz/bonus");
        Wait();
        var login_form2 = ElementByXPath("//a[contains(text(),'ВХОД')]");

            if (IsVisible(login_form2))
            {
                Click(login_form2);
            }

        else
        {
           return Fail("Fail login , user box not found"); 
        }
//==========================//

        Wait(2);
        var Email_Box =ElementByXPath("//input[@name='log_email']");
        if (IsVisible(Email_Box))
        {
            SetText(Email_Box, GetSetting("user"));
        }
        else
        {
            return Fail("Fail login , user box not found");
        }
        Wait();
        var Password_Box = ElementByXPath("//input[@name='pass']");
        if (IsVisible(Password_Box)){
            SetText(Password_Box, GetPassword("Pass"));
        }
        else
        {
            return Fail("Fail login , pass box not found");
        }
		

            Wait();
            var result = DoSolveImageCaptcha(ElementByXPath("//form[@id='FormLogin']//div[@class='form-reg__captcha']//center//div[@class='capc']//div[@class='imgcap']//a[@href='#']//img[@class='capcha']"),ElementByXPath("//form[@id='FormLogin']//input[@name='capcha']"));
            if (result > 0)
            {
                return Fail("Fail login --- captcha failed");
            }

        Wait(2,3);
        var button = ElementByXPath("//form[@id='FormLogin']//button[@type='submit']");
        if (!IsVisible(button))
        {
            return Fail("Fail button not visible");
        }
        Click(button);
        Wait();

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }
//================================//
//end DoLogin
//================================//
	
	
	
	
	
//================================//
//start AfterLogin
//================================//
    public override int AfterLogin()
    {
		
	
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
//================================//
//end AfterLogin
//================================//
	
	
	
	
	
	
    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {    
		
		//Faucet Collector - will wait 1 hour - 3600 sec - for next claim
        if (cs)
        {
            return 36 * 60;
        }

		
        //0 mean let Faucet Collector continue.
        //return 0;
		
		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();

    }

	
	


	
	
    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

	
	
    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
	
    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
	
    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }





//================================//
//end DoSolveFaucet
//================================//
	
    public override int DoSolveFaucet()
    {
		
		if (GetBoolSetting("ExchangeEggs"))
	{	
		//go to "Exchange Eggs"
        GoToUrl("https://dragon-eggs.biz/stock");
        Wait(10);
			
		//click on Exchange Eggs above 1 Egg - if available
        var ExchangeEggsVar = ElementByXPath("//button[@type='submit']");
        if (IsVisible(ExchangeEggsVar))
        {
        Click(ExchangeEggsVar);
        Wait(3);
        }

	}	
	


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
//================================//
//end AfterSolveFaucet
//================================//
	
	
	
	
	
//================//
//AfterSolveFaucet//
//================//
    public override int AfterSolveFaucet()
    {
	
        if (GetBoolSetting("DailyBonus"))
        {
			//go to bonus area "Daily Bonus"
            GoToUrl("https://dragon-eggs.biz/bonus");
            Wait(2);
            var button1 = ElementByXPath("//button[@id='bonus-banner']");
            if (IsVisible(button1))
            {
				
                Click(button1);
                Wait(2);   
            }
					
        }

		
        if (GetBoolSetting("HourlyBonus"))
        {
            //go to bonus area "Hourly Bonus"
            GoToUrl("https://dragon-eggs.biz/bonus/hourly");
            Wait(2);
			
            var button2 = ElementByXPath("//button[@id='bonus-banner']");
			
            if (IsVisible(button2))
            {
                Click(button2);
                Wait(2);
            }

        }

		
        if (GetBoolSetting("RiskingBonus"))
        {

            //go to bonus area "Risking Bonus"
            GoToUrl("https://dragon-eggs.biz/bonus/risk");
            Wait(2);

            var button3 = ElementByXPath("//button[@id='bonus-banner']");
			
			//if the button not found on the site 
			if (!IsVisible(button3))
            {
			//Faucet Collector - will wait 1 hour - 3600 sec - for next claim	
			return 36 * 60;
            //cs = true;  
            }
			
			
            if (IsVisible(button3))
            {
                Click(button3);
                Wait(2);
            }

        }
	
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
		
    }
//================================//
//end AfterSolveFaucet
//================================//
	
	
	
	
	
	
    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
