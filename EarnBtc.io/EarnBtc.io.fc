

//==================//
//script Written by: ••AviramDayan•• 26/06/2019 00:30PM - Version 1
//Last Update: 01/09/2019 00:30PM - Version 2
//==================//

using System;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Text.RegularExpressions;
using System.Linq;
//css_inc RecaptchaUtilities
//css_inc ShortLinkUtilities


public class EarnBtc : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://earnbtc.io/user/dashboard.page")
            {
                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},                      			
            };
        }
    }


	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Earn B";

		SuccessXPath = "//div[@class='alert alert-success mt-3']//strong[contains(text(),'Congrats')]";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;


		//======================//
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
			

		
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//span[contains(text(),'Logout')]") != null;
	 
	    //return true;
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		


		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {
	
  //   var ExitButton = ElementByXPath("//span[contains(text(),'Logout')]");

  //      //Not Neccesary
	 ////if i NOT Login - go to Login Page
	 //if (!IsVisible(ExitButton))
	 //{
		GoToUrl("https://earnbtc.io/login.page");
		Wait();		

/*     
        var StartOpenLogin = ElementByXPath("//div[@class='AuthPage___controls']/button[contains(text(),'Sign In')]");
	    if (IsVisible(StartOpenLogin))
	    { 
        Click(StartOpenLogin);
		}
*/	
        var box_user = ElementByXPath("//input[@name='email']");
        //CHECKING TO box_user
        if (!IsVisible(box_user))
        {
            return Fail("box user not found");
        }
        SetText(box_user, GetSetting("Email"));
		
		//Wait(2);
		
        var box_pass = ElementByXPath("//input[@name='password']");
        if (!IsVisible(box_pass))
        {
            return Fail("Box pass not visible");
        }
        SetText(box_pass, GetPassword("Password"));


        //Wait(2);
        // We put all of that inside of DoSolveCaptcha
        //Captcha_Function(); //call
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            // There is a problem with the captcha
            return Fail("Somthing is wrong with the captcha");
        }

        //Click the butotn

        var ButtonLogin = ElementByXPath("//button[@class='genric-btn primary circle btn-lg']");
        if (!IsVisible(ButtonLogin))
        {
            return Fail("Button login not visible");
        }
        Click(ButtonLogin);
        Wait();

        var Error = ElementByXPath("//small[@class='text-danger']//strong");
        if (IsVisible(Error))
        {
            Log(Error.Text);
            if (Error.Text.Contains("These credentials do not match our records."))
            {
               
                Disable();
                return Fail("You need to enter correct your credentials");
            }
        }


        return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
        GoToUrl("https://earnbtc.io/dashboard");
 
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {
        GoToUrl("https://earnbtc.io/user/roll-win.page");

        var Minutes = ElementByXPath("//span[@id='minutes']");
        var Second = ElementByXPath("//span[@id='seconds']");
        if(IsVisible(Minutes) && IsVisible(Second))
        {
            int Seconds, Minute;
            if (int.TryParse(Minutes.Text, out Minute) &&
            int.TryParse(Second.Text, out Seconds))
            {

                return Seconds + Minute;

            }
            else
            {
                return GetWaitSetting();
            }
        }

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        var SWitchCaptcha = ElementByXPath("//a[@href='#sm-captcha']");
        if (IsVisible(SWitchCaptcha))
        {
            Click(SWitchCaptcha);
            Wait(1);
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	              
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {
        if (Driver.Url!= "https://earnbtc.io/user/roll-win.page")
        {
            GoToUrl("https://earnbtc.io/user/roll-win.page");
        }
       
        Wait();
        var GoToClaim = ElementByXPath("//button[@class='btn btn-primary btn-lg']");
        if (!IsVisible(GoToClaim))
        {
            return Fail("Button to claim not visible");
        }
        ShortLinkBypasser bypasser = new ShortLinkBypasser(this);
        Click(GoToClaim);
        Wait();
       bool Suc= bypasser.DoShortLink();

        if (Suc)
        {
            var ButtonRoll = ElementByXPath("//button[@class='btn btn-primary btn-lg']");
            if (!IsVisible(ButtonRoll))
            {
                return Fail("Something is wrong");
            }

            var result = DoSolveCaptcha();
            if (result>0)
            {
                return Fail("Fail solving captcha");
            }
            Click(ButtonRoll);

        }
        else
        {
            GoToUrl(Url);
            return Fail("Something is wrong with the shortlink");
            
        }

	
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	
} //end public class

