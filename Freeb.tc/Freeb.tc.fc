

//==================//
//script Written by: ••AviramDayan•• 13/08/2019 03:00AM - Version 1
//Last Update: 01/10/2019 19:00PM - Version 15
//==================//

using System;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Text.RegularExpressions;
//css_inc RecaptchaUtilities
//css_inc ShortLinkUtilities

public class freebtc : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://freeb.tc/")
            {

                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="Address",Display="Bitcoin Address",Type=EditorType.TextBox,Required=false},				
                new FaucetSetting() { Name = "FaucetClaim", Display = "FaucetClaim", Type = EditorType.CheckBox, Default = true},
                new FaucetSetting() { Name = "LuckyWheel", Display = "LuckyWheel - try your luck - one time (the minimum from 0.00000010 satoshi)", Type = EditorType.CheckBox, Default = false},				
                new FaucetSetting() { Name = "LimitWheel", Display = "LimitWheel - write the full number of satoshi (without point - 0.0 | 1.1 | 2.2 - and etc ) ", Type = EditorType.Numeric, Default = 10 },

 				new FaucetSetting(){Name="MenuTime",Display="MenuTime - Select Favorite Time",Type=EditorType.ComboBox,Default="WebSiteTime",Items=new System.Collections.Generic.List<string>{"WebSiteTime","UserCustomTime"}},
                new FaucetSetting() { Name = "UserCustomTime", Display = "UserCustomTime", Type = EditorType.Numeric, Default = 35 },				
				
            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "free btc";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
		
       //MAINTENANCE
       var MAINTENANCE_VAR = ElementByXPath("//div[@class='container']/h1[contains(text(),'MAINTENANCE')]");
	   if (IsVisible(MAINTENANCE_VAR))
	   {
		Log("MAINTENANCE - we return after FC time");		
        return GetWaitSetting();
	   }
	   //=======//
		
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//a[@href='/logout']") != null;
	 
	    //return true;
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		

     GoToUrl("https://freeb.tc/faucet");

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {
	
     var ExitButton = ElementByXPath("//a[@href='/logout']");


	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

		GoToUrl("https://freeb.tc/login");
		Wait();		
		Wait(2);
/*     
        var StartOpenLogin = ElementByXPath("//div[@class='AuthPage___controls']/button[contains(text(),'Sign In')]");
	    if (IsVisible(StartOpenLogin))
	    { 
        Click(StartOpenLogin);
		}
*/
		Wait(2);
		
		
/*	
        var Address_VAR = ElementByXPath("//input[@id='form-field-wallet_addr']");
        SetText(Address_VAR, GetSetting("Address"));
*/
	
        var box_user = ElementByXPath("//input[@name='email']");
        SetText(box_user, GetSetting("Email"));
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[@name='password']");
        SetText(box_pass, GetPassword("Password"));
	
		Wait(2);
	
       //SolveCaptcha if apper
        var result = DoSolveCaptcha();
	
		Wait(4);
		
        var ButtonLog = ElementByXPath("//button[@class='btn btn-success']");
        Click(ButtonLog);
		
		Wait(2);
/*		
        var Error_Message = ElementByXPath ("//div[@id='add_err']/div/div[@class='message' and contains(text(),'fille' | 'captcha' ) ]");
        if (IsVisible(Error_Message))
        {
            Log("Error_Message - Appear - we return after 1 min ");
            return 1*60; //we return after 1 min
        }
*/		

        //Title = "test Wallet";
		
		Wait();	

	 } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
 
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

     if (ad)
     {
			
		ad=false;
		
        var TimerExist_VAR = ElementByXPath("//span[@id='faucetTimer' and contains(text(),':')]");		
		
        //TIME visible
	    if (IsVisible(TimerExist_VAR)) //visible
	    {
           //Menu
           var MenuExampleVAR = GetSetting("MenuTime"); 
           if(MenuExampleVAR=="WebSiteTime")
           {
               Log("WebSiteTime");
		       //Wait();		 
		       //Wait(2);

               var TimeVAR = ElementByXPath("//span[@id='faucetTimer']");	
               int MinINT, SecINT;
               MinINT = Convert.ToInt32(TimeVAR.Text.Trim().Split(':')[0])*60;
               SecINT = Convert.ToInt32(TimeVAR.Text.Trim().Split(':')[1]);

               return MinINT + SecINT;

	       } //end Menu - WebSiteTime 
		   
		   
           if(MenuExampleVAR=="UserCustomTime")
           {
               Log("UserCustomTime");
               Wait();		 
               Wait(2);
			 
               int MyCustomTimeINT;
               MyCustomTimeINT = GetIntSetting("UserCustomTime") * 60; 
               return MyCustomTimeINT;
			 
	       } //end Menu - UserCustomTime 	 
		   
		} //end TimerExist_VAR visible
	
		
        //TIME NOT visible	
	    if (!IsVisible(TimerExist_VAR)) //not visible
	    {
		Log("Time Not visible - we return after FC time");		
        return GetWaitSetting();
		} //end TimerExist_VAR NOT visible
		
			
     } //end ad

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {


      //==============//
      //LuckyWheel//
      //==============//
      if (GetBoolSetting("LuckyWheel"))
      {

        var balance = ElementByXPath("//*[@id='btc-balance']/span[@class='balance']");
        string BalanceSTRING = balance.Text.Trim().Split('.')[1];
        int BalanceINT = Convert.ToInt32(BalanceSTRING);

        int MyAmount;
        Int32.TryParse(GetSetting("LimitWheel"), out MyAmount);
        
		if (BalanceINT < MyAmount) // - 1000
        {
			Log("LuckyWheel - Under < ");
        }
		
        if (BalanceINT > MyAmount) // the Default Limit to withdraw is 1000
        {
			Log("LuckyWheel - Above >");
            GoToUrl("https://freeb.tc/lucky-wheel");
		    Log("LuckyWheel");	
			Wait();
			Wait(2);

            var WheelButton = ElementByXPath("//button[@class='btn btn-block btn-spin btn-lg btn-warning']");
	        if (IsVisible(WheelButton)) //visible
	        {
	         Click(WheelButton);
			 Log("LuckyWheel - Click on WheelButton");
             Title = "free btc";		   
		     Wait(5);
	         Click(WheelButton);
		     Wait(8);
			}
			
			Wait();
        }

		  
	  }//end LuckyWheel

	  
	  

      //==============//
      //FaucetClaim//
      //==============//
      if (GetBoolSetting("FaucetClaim"))
      {

        GoToUrl("https://freeb.tc/faucet");
		Log("FaucetClaim");	
		
        Wait();
        Wait(3);
		
        var TimerExist_VAR = ElementByXPath("//span[@id='faucetTimer' and contains(text(),':')]");		
		
        //TIME visible
	    if (IsVisible(TimerExist_VAR)) //visible
	    {
           //Menu
           var MenuExampleVAR = GetSetting("MenuTime"); 
           if(MenuExampleVAR=="WebSiteTime")
           {
               Log("WebSiteTime");
		       //Wait();		 
		       //Wait(2);

               var TimeVAR = ElementByXPath("//span[@id='faucetTimer']");	
               int MinINT, SecINT;
               MinINT = Convert.ToInt32(TimeVAR.Text.Trim().Split(':')[0])*60;
               SecINT = Convert.ToInt32(TimeVAR.Text.Trim().Split(':')[1]);

               return MinINT + SecINT;

	       } //end Menu - WebSiteTime 
		   
		   
           if(MenuExampleVAR=="UserCustomTime")
           {
               Log("UserCustomTime");
               Wait();		 
               Wait(2);
			 
               int MyCustomTimeINT;
               MyCustomTimeINT = GetIntSetting("UserCustomTime") * 60; 
               return MyCustomTimeINT;
			 
	       } //end Menu - UserCustomTime 	 
		   
		} //end TimerExist_VAR visible
		
	
        Wait(3);		

		
		var RollButton = ElementByXPath("//button[@class='btn btn-primary btn-claim']");	
	    if (IsVisible(RollButton))
	    {	
	       Click(RollButton);
	       Log("RollButton");
           Title = "free btc";		   
		   Wait(5);
	       Click(RollButton);
		
          var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/anchor')]"); 
          if (IsVisible(RecaptchaOpen_Iframe))
		  {
          var result = base.DoSolveCaptcha();
          RecaptchaUtility utility = new RecaptchaUtility(this);
          utility.DoSolve();
		  //ExecuteScript("verifyCallback");
		  ExecuteScript("___grecaptcha_cfg.clients[0].aa.l.callback('" + Context.CaptchaResult.Result + "');");
		  }
		  
          Wait();		
 
          Driver.Navigate().Refresh();
		
          Wait();	
		
		  /*
		  var ErrorText = ElementByXPath("//p[contains(text(),'incorrect') ]") ;	
	      if (IsVisible(ErrorText))
	      {	
	       return 1*60;
	       Log("ErrorText - return after 1 min");	
		  }
		  */
		
	    } //end RollButton

	
        //TIME NOT visible	
	    if (!IsVisible(TimerExist_VAR)) //not visible
	    {
		Log("Time Not visible - we return after FC time");		
        return GetWaitSetting();
		} //end TimerExist_VAR NOT visible
		
		
      }// end FaucetClaim	


      ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	
      //return GetWaitSetting();	


      //We are good to continue
      return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	

	

	    //===========//
        //Time_Function
	    //===========//
        public int Time_Function()
        {

         //do stuff

	     return 0;   
		   
        } //MenuExample
	    //===========//	



        //=================//
       //ShortLink_Function
        //=================//

        public void ShortLink_Function()
        {
			
        //call to ShortLink
        var ShortButton = ElementByXPath("//a[@class='shl']");
        if (!IsVisible(ShortButton))
        {
          Log("Short button not visible");
        }

        if (IsVisible(ShortButton))
        {
          Log("Short visible");
          ShortLinkBypasser bypasser = new ShortLinkBypasser(this);
          Click(ShortButton);
          Wait(1);
          bypasser.DoShortLink();
        }

        }//end ShortLink_Function
        //=================//
		
		
	
} //end public class

