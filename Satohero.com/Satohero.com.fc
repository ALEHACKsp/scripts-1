using System;
//css_inc ShortLinkUtilities
using FaucetCollector.Script;

public class SatoheroScript : FaucetScript
{
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings ( "http://satohero.com/" )
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="UseSolvemedia",Display="UseSolvemedia",Type=EditorType.CheckBox,Default=true },

                new FaucetSetting()
                {
                    Name="DoShortLink",Display="DoShortLink",Type=EditorType.CheckBox,Default=true
                }
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    public override void Start ( )
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title="Satohero";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath="//div[@class='alert alert-success']";
        FailXPath="//div[@class='alert alert-danger']";

        //Let Faucet Collector start up everything
        base.Start ( );
    }

 
    public override int DoInit ( )
    {
        //Let Faucet Collector continue.
        return base.DoInit ( );
    }

    public override bool IsLoggedIn ( )
    {
   
        return ElementByXPath ( "//button[contains(text(),'Withdraw')]" )!=null;
    }


    public override int BeforeLogin ( )
    {
        var LoginModal = ElementByXPath("//a[@data-target='#loginModal']");
        if ( !IsVisible ( LoginModal ) )
        {
            return Fail ( "Login modal button is not visible" );
        }
        Click ( LoginModal );
        Wait ( );
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin ( );
    }

  
    public override int DoLogin ( )
    {
        var UserLogin = ElementByXPath("//input[@id='userLogin']");
        if ( !IsVisible ( UserLogin ) )
        {
            return Fail ( "User login is not visible" );
        }
        SetText ( UserLogin , GetSetting ( "User" ) );
        var PasswordBox = ElementByXPath("//input[@id='userPass']");
        if ( !IsVisible ( PasswordBox ) )
        {
            return Fail ( "Password box is not visible" );
        }
        SetText ( PasswordBox , GetPassword ( "Pass" ) );
        var remember = ElementByXPath("//input[@id='remember']");
        if ( IsVisible ( remember ) )
        {
            Click ( remember );
        }
        var result = DoSolveCaptcha();
        if ( result>0 )
        {
            return Fail ( "Fail solve captcha" );
        }
        Wait ( );
        var ButtonLogin = ElementByXPath("//button[contains(text(),'Login')]");
        if ( !IsVisible ( ButtonLogin ) )
        {
            return Fail ( "Button login is not visible" );
        }
        Click ( ButtonLogin );
        Wait ( );

        var Error = ElementByXPath("//div[@class='alert alert-danger']");
        if ( IsVisible ( Error ) )
        {
            Log ( Error.Text );
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin ( );
    }

    public override int GetFaucetWaitTime ( )
    {
        Driver.Navigate ( ).Refresh ( );
        Wait ( );
        var Timer = ElementByXPath("//span[@id='claimTime']");
        if ( IsVisible ( Timer ) )
        {
            try
            {
                string[] SplitedTimer = Timer.Text.Split(' ');
                int Minutes = Convert.ToInt32(SplitedTimer[0]) * 60;
                int Seconds = Convert.ToInt32(SplitedTimer[3]);


                return Minutes+Seconds;


            }
            catch ( Exception ex )
            {
				Log("Problem catching time:\n"+ex.Message);
            }
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime ( );
    }
    public override int DoSolveCaptcha ( )
    {
        var ToggleCaptcha = ElementByXPath("//select[@id='toggleCaptcha']");
        if ( IsVisible ( ToggleCaptcha ) )
        {
            if ( GetBoolSetting ( "UseSolvemedia" ) )
            {
                SelectOptionByValue ( ToggleCaptcha , "0" );
            }
            else
            {
                SelectOptionByValue ( ToggleCaptcha , "1" );
            }
            Wait ( 1 );
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha ( );
    }
    public override int BeforeSolveFaucet ( )
    {
        if ( GetBoolSetting ( "DoShortLink" ) )
        {
            GoToUrl ( "http://satohero.com//shortlinks.html" );
            Wait ( );
            var Shortlinks = ElementsByXPath("//a[@class='btn btn-success btn-sm']");
            if ( Shortlinks.Count>0 )
            {
                int NShort = Random(0, Shortlinks.Count - 1);

                try
                {
                    string uri = Shortlinks[NShort].GetAttribute("href");
                    if ( !string.IsNullOrEmpty ( uri ) )
                    {
                        ShortLinkBypasser bypasser = new ShortLinkBypasser(this);
                        GoToUrl ( uri );
                        Wait ( );
                        bool cs = bypasser.DoShortLink();

                        if ( cs )
                        {
                            Log ( "ShortlinkSuccess" );
                        }
                        else
                        {
                            Log ( "Something is wrong with the shortlink" );
                        }
                    }

                }
                finally
                {
                    if ( !Driver.Url.Contains ( "http://satohero.com/" ) )
                    {

                        GoToUrl ( "http://satohero.com/" );
                    }

                }

            }
            else
            {
                Log ( "No more shortlinks available" );
            }

        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha ( );
    }

    public override int DoSolveFaucet ( )
    {
        if ( Driver.Url!="http://satohero.com//" )
        {
            GoToUrl ( "http://satohero.com//" );
            Wait ( );
        }

        var FaucetLocked = ElementByXPath("//b[contains(text(),'Faucet Locked!')]");
        if ( IsVisible ( FaucetLocked ) )
        {
            if ( GetBoolSetting ( "DoShortLink" ) )
            {
                Log ( "We need to do another shortlink..., Faucet is still locked" );
                return GetWaitSetting ( );
            }
            else
            {

                Disable ( );

                return Fail ( "You need other shortlink to unlock the faucet, please do it manually or enable the option to do shortlink in the script" );
            }
        }

        var ButtonRoll = ElementByXPath("//button[contains(text(),'Roll & Win')]");
        if ( !IsVisible ( ButtonRoll ) )
        {
            return Fail ( "Button roll is not visible" );
        }
        var result = DoSolveCaptcha();
        if ( result>0 )
        {
            return Fail ( "Fail solving captcha" );
        }
        ButtonRoll=ElementByXPath ( "//button[contains(text(),'Roll & Win')]" );
        if ( !IsVisible ( ButtonRoll ) )
        {
            return Fail ( "Button roll is not visible" );
        }
        Click ( ButtonRoll );


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet ( );
    }
}
