using System;
using System.Drawing;
using System.IO;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;


public class DarakMeScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {		
		
            return new FaucetSettings("https://darak.me/")
            {
                new FaucetSetting(){Name="User",Display="Email",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                //new FaucetSetting() { Name = "UseSolveMedia", Display = "Use SolveMedia", Type = EditorType.CheckBox, Default = true},

                new FaucetSetting(){Name="ClaimBTC",Display="Claim BTC",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="ClaimLTC",Display="Claim LTC",Type=EditorType.CheckBox,Default=true},				
                new FaucetSetting(){Name="ClaimDOGE",Display="Claim DOGE",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="ClaimBCH",Display="Claim BCH",Type=EditorType.CheckBox,Default=true},

				
				
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }


	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "darak.me|Darak|BITFORMATIONS";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
		SuccessXPath = "//p[@class='alert alert-success']";
        FailXPath = "//div[@class='']";
		
        TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
	
    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
	
    public override int DoInit()
    {

        cs = false;
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
		
	   //save Login Cookies - Check if the image of balance is there
       return ElementByXPath("//a[text()='Logout']") != null;  
	   

    }
//==================//
//save Login Cookies 
//==================//	

	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }


	
	
//================================//
//start DoLogin
//================================//
 public override int DoLogin()
 {

	 //var checks login or exit
	 var LoginStart =ElementByXPath("//a[text()='Login']"); //Login
     var ExitButton =ElementByXPath("//a[text()='Logout']"); //Logout
	 

	 //if i already Login - go to "BCH Page"	 
	 if (IsVisible(ExitButton))
	 {
        GoToUrl("https://darak.me/index.php?a=claim&coin=BCH");
     }


	 //if i NOT Login - go to Login Page
	 if (IsVisible(LoginStart))
	 {
	
		//if i already login - click on start login
        Click(LoginStart);

        Wait(2);

        var Email_Box =ElementByXPath("//input[@id='username']");
        SetText(Email_Box, GetSetting("user"));
		
        Wait(2);
		
        var Password_Box = ElementByXPath("//input[@id='password']");
        SetText(Password_Box, GetPassword("Pass"));
		
        Wait(3);
			
		//====================//
		// "Solve Icon" Captcha
		//====================//
        var icon_Login = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
        if (IsVisible(icon_Login))
        {
			
        bool result_Login = Solveicon();
			
          if (result_Login)
          {
          //Click();
          }
		
          else
          {
          return Fail("Fail solve icon");
          }

        }
		
		
		//====================//


		/*
		
		Wait(4);	
		
        //Click on LoginButtonVar
        var LoginButtonVar = ElementByXPath("//*[@id='btnLoginSubmit']");
        Click(LoginButtonVar);

		*/
		
	 }	
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
 }
//================================//
//end DoLogin
//================================//
	
	
	
	
	
//================================//
//start AfterLogin
//================================//
    public override int AfterLogin()
    {
		
	
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
//================================//
//end AfterLogin
//================================//
	
	
	
	
		
	//loop
    public static bool cs;
	
	
    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
		//wait 36 min
        if (cs)
        {
            return 3;
        }

        //0 mean let Faucet Collector continue.
        //return 0;
		
		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();

    }

	
	
	
    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
		
		
       /*		
        //Check if the user wants to do SolveMedia or reCAPTCHA.
        if (GetBoolSetting("UseSolveMedia"))
        {
            //Make sure SolveMedia is active by clicking the link.
            Click(ElementByLinkText("Switch to SolveMedia captcha"));
        }
        else
        {
            //Make sure reCAPTCHA is active by clicking the link.
            Click(ElementByLinkText("Switch to Recaptcha"));
        }

        //Wait a little (1 - 2 seconds) for the captcha to switch.
        Wait();
		
       */


        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }
	
	

	
	
    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
	

	
	
    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
		

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	

	
	
	
	
//================================//
//start BeforeSolveFaucet
//================================//
    public override int BeforeSolveFaucet()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

//================================//
//end BeforeSolveFaucet
//================================//






//================================//
//end DoSolveFaucet
//================================//
	
public override int DoSolveFaucet()
{

        //=========//
        //Claim BTC
        //========//
        cs = false;
        if (GetBoolSetting("ClaimBTC"))
    {
            
		//first go to "BTC page"
        GoToUrl("https://darak.me/index.php?a=claim&coin=BTC");

		var Claim_BTC_No = ElementByXPath("//*[@id='timerHolder']");
		
		if (!IsVisible(Claim_BTC_No))	// IF NOT VISIBLE TIME CONTINUE	
	    {
        Wait(4,5); // WAIT WHILE CAPTCHA IS LOADING
	    
	
	    //solve Icon - 1
        var icon_BTC1 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
        if (IsVisible(icon_BTC1))
        {
                    bool bypased = false;
                    while (!bypased)
                    {
                        bool result_BTC1 = Solveicon();

                        if (result_BTC1)
                        {
                            Wait(2, 5);
                        }

                      if(IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypased = false;
                        }
                        else
                        {
                            bypased = true;
                        }
                    }
        }
                else 
                {
                    return Fail("Fail Claim, captcha not visible");
                }
		
		Wait(3);
		

	    //solve Icon - 2
		
        var icon_BTC2 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
        if (IsVisible(icon_BTC2))
        {
                    bool bypassed = false;
                    while (!bypassed)
                    {
                        Wait(3, 4);
                        bool result_BTC2 = Solveicon();
                        if (!result_BTC2)
                        {
                            Log("Fail: solve Icon 2");
                        }
                        if (IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypassed = false;
                        }
                        else
                        {
                            bypassed = true;
                        }
                    }
        }

        Wait(3);
		
	    //solve Icon - 3
        var icon_BTC3 = ElementByXPath("//div[@class='captcha-holder captcha-theme-light']");
                if (IsVisible(icon_BTC3))
                {
                    bool bypass_ = false;
                    while (!bypass_)
                    {
                        Wait(2, 3);
                        bool result_BTC3 = Solveicon();
                        if (!result_BTC3)
                        {
                            Log("Fail: solve Icon 3");
                        }
                        if (ElementByXPath("//div[@class='captcha-modal__icons-title']").Text.Contains("Great"))
                        {
                            bypass_ = true;
                        }
                        else
                        {
                            bypass_ = false;
                            Wait();
                        }
                    }
                }
		
        Wait(5);
	
	    //Click on Button 1
		var Button_BTC1 = ElementByXPath("//*[@id='skipBtn']");
        Click(Button_BTC1);
		
        Wait(3);
		
	    //Click on Button 2
		var Button_BTC2 = ElementByXPath("//*[@id='nextBtn']"); // I CHANGED CLICK BUTTON for url extraction
                var url = Button_BTC2.GetAttribute("href");
                GoToUrl(url);
        
		
        Wait(6);
		
	    //solve Icon - 4
        var icon_BTC4 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
        if (IsVisible(icon_BTC4))
                    
        {
                    bool bypass__ = false;
                    while (!bypass__)
                    {
                        Wait(2, 4);
                        bool result_BTC4 = Solveicon();
                        if (IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypass__ = false;
                        }
                        else
                        {
                            bypass__ = true;
                        }
                    }
        }
	
		//LOG Success
		Log("Success: BTC Collect");		
        }
        //==============// 	

    }

        if (GetBoolSetting("ClaimLTC"))
        {

            //first go to "BTC page"
            GoToUrl("https://darak.me/index.php?a=claim&coin=LTC");

            var Claim_BTC_No = ElementByXPath("//*[@id='timerHolder']");

            if (!IsVisible(Claim_BTC_No))   // IF NOT VISIBLE TIME CONTINUE	
            {
                Wait(4, 5); // WAIT WHILE CAPTCHA IS LOADING


                //solve Icon - 1
                var icon_BTC1 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
                if (IsVisible(icon_BTC1))
                {
                    bool bypased = false;
                    while (!bypased)
                    {
                        bool result_BTC1 = Solveicon();

                        if (result_BTC1)
                        {
                            Wait(2, 5);
                        }

                        if (IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypased = false;
                        }
                        else
                        {
                            bypased = true;
                        }
                    }
                }
                else
                {
                    return Fail("Fail Claim, captcha not visible");
                }

                Wait(3);


                //solve Icon - 2

                var icon_BTC2 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
                if (IsVisible(icon_BTC2))
                {
                    bool bypassed = false;
                    while (!bypassed)
                    {
                        Wait(3, 4);
                        bool result_BTC2 = Solveicon();
                        if (!result_BTC2)
                        {
                            Log("Fail: solve Icon 2");
                        }
                        if (IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypassed = false;
                        }
                        else
                        {
                            bypassed = true;
                        }
                    }
                }

                Wait(3);

                //solve Icon - 3
                var icon_BTC3 = ElementByXPath("//div[@class='captcha-holder captcha-theme-light']");
                if (IsVisible(icon_BTC3))
                {
                    bool bypass_ = false;
                    while (!bypass_)
                    {
                        Wait(2, 3);
                        bool result_BTC3 = Solveicon();
                        if (!result_BTC3)
                        {
                            Log("Fail: solve Icon 3");
                        }
                        if (ElementByXPath("//div[@class='captcha-modal__icons-title']").Text.Contains("Great"))
                        {
                            bypass_ = true;
                        }
                        else
                        {
                            bypass_ = false;
                            Wait();
                        }
                    }
                }

                Wait(5);

                //Click on Button 1
                var Button_BTC1 = ElementByXPath("//*[@id='skipBtn']");
                Click(Button_BTC1);

                Wait(3);

                //Click on Button 2
                var Button_BTC2 = ElementByXPath("//*[@id='nextBtn']"); // I CHANGED CLICK BUTTON for url extraction
                var url = Button_BTC2.GetAttribute("href");
                GoToUrl(url);


                Wait(6);

                //solve Icon - 4
                var icon_BTC4 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
                if (IsVisible(icon_BTC4))

                {
                    bool bypass__ = false;
                    while (!bypass__)
                    {
                        Wait(2, 4);
                        bool result_BTC4 = Solveicon();
                        if (IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypass__ = false;
                        }
                        else
                        {
                            bypass__ = true;
                        }
                    }
                }

                //LOG Success
                Log("Success: LTC Collect");
            }
            //==============// 	

        }

        if (GetBoolSetting("ClaimDOGE"))
        {

            //first go to "BTC page"
            GoToUrl("https://darak.me/index.php?a=claim&coin=DOGE");

            var Claim_BTC_No = ElementByXPath("//*[@id='timerHolder']");

            if (!IsVisible(Claim_BTC_No))   // IF NOT VISIBLE TIME CONTINUE	
            {
                Wait(4, 5); // WAIT WHILE CAPTCHA IS LOADING


                //solve Icon - 1
                var icon_BTC1 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
                if (IsVisible(icon_BTC1))
                {
                    bool bypased = false;
                    while (!bypased)
                    {
                        bool result_BTC1 = Solveicon();

                        if (result_BTC1)
                        {
                            Wait(2, 5);
                        }

                        if (IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypased = false;
                        }
                        else
                        {
                            bypased = true;
                        }
                    }
                }
                else
                {
                    return Fail("Fail Claim, captcha not visible");
                }

                Wait(3);


                //solve Icon - 2

                var icon_BTC2 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
                if (IsVisible(icon_BTC2))
                {
                    bool bypassed = false;
                    while (!bypassed)
                    {
                        Wait(3, 4);
                        bool result_BTC2 = Solveicon();
                        if (!result_BTC2)
                        {
                            Log("Fail: solve Icon 2");
                        }
                        if (IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypassed = false;
                        }
                        else
                        {
                            bypassed = true;
                        }
                    }
                }

                Wait(3);

                //solve Icon - 3
                var icon_BTC3 = ElementByXPath("//div[@class='captcha-holder captcha-theme-light']");
                if (IsVisible(icon_BTC3))
                {
                    bool bypass_ = false;
                    while (!bypass_)
                    {
                        Wait(2, 3);
                        bool result_BTC3 = Solveicon();
                        if (!result_BTC3)
                        {
                            Log("Fail: solve Icon 3");
                        }
                        if (ElementByXPath("//div[@class='captcha-modal__icons-title']").Text.Contains("Great"))
                        {
                            bypass_ = true;
                        }
                        else
                        {
                            bypass_ = false;
                            Wait();
                        }
                    }
                }

                Wait(5);

                //Click on Button 1
                var Button_BTC1 = ElementByXPath("//*[@id='skipBtn']");
                Click(Button_BTC1);

                Wait(3);

                //Click on Button 2
                var Button_BTC2 = ElementByXPath("//*[@id='nextBtn']"); // I CHANGED CLICK BUTTON for url extraction
                var url = Button_BTC2.GetAttribute("href");
                GoToUrl(url);


                Wait(6);

                //solve Icon - 4
                var icon_BTC4 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
                if (IsVisible(icon_BTC4))

                {
                    bool bypass__ = false;
                    while (!bypass__)
                    {
                        Wait(2, 4);
                        bool result_BTC4 = Solveicon();
                        if (IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypass__ = false;
                        }
                        else
                        {
                            bypass__ = true;
                        }
                    }
                }

                //LOG Success
                Log("Success: DOGE Collect");
            }
            //==============// 	

        }
        if (GetBoolSetting("ClaimBCH"))
        {

            //first go to "BTC page"
            GoToUrl("https://darak.me/index.php?a=claim&coin=BCH");

            var Claim_BTC_No = ElementByXPath("//*[@id='timerHolder']");

            if (!IsVisible(Claim_BTC_No))   // IF NOT VISIBLE TIME CONTINUE	
            {
                Wait(4, 5); // WAIT WHILE CAPTCHA IS LOADING


                //solve Icon - 1
                var icon_BTC1 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
                if (IsVisible(icon_BTC1))
                {
                    bool bypased = false;
                    while (!bypased)
                    {
                        bool result_BTC1 = Solveicon();

                        if (result_BTC1)
                        {
                            Wait(2, 5);
                        }

                        if (IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypased = false;
                        }
                        else
                        {
                            bypased = true;
                        }
                    }
                }
                else
                {
                    return Fail("Fail Claim, captcha not visible");
                }

                Wait(3);


                //solve Icon - 2

                var icon_BTC2 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
                if (IsVisible(icon_BTC2))
                {
                    bool bypassed = false;
                    while (!bypassed)
                    {
                        Wait(3, 4);
                        bool result_BTC2 = Solveicon();
                        if (!result_BTC2)
                        {
                            Log("Fail: solve Icon 2");
                        }
                        if (IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypassed = false;
                        }
                        else
                        {
                            bypassed = true;
                        }
                    }
                }

                Wait(3);

                //solve Icon - 3
                var icon_BTC3 = ElementByXPath("//div[@class='captcha-holder captcha-theme-light']");
                if (IsVisible(icon_BTC3))
                {
                    bool bypass_ = false;
                    while (!bypass_)
                    {
                        Wait(2, 3);
                        bool result_BTC3 = Solveicon();
                        if (!result_BTC3)
                        {
                            Log("Fail: solve Icon 3");
                        }
                        if (ElementByXPath("//div[@class='captcha-modal__icons-title']").Text.Contains("Great"))
                        {
                            bypass_ = true;
                        }
                        else
                        {
                            bypass_ = false;
                            Wait();
                        }
                    }
                }

                Wait(5);

                //Click on Button 1
                var Button_BTC1 = ElementByXPath("//*[@id='skipBtn']");
                Click(Button_BTC1);

                Wait(3);

                //Click on Button 2
                var Button_BTC2 = ElementByXPath("//*[@id='nextBtn']"); // I CHANGED CLICK BUTTON for url extraction
                var url = Button_BTC2.GetAttribute("href");
                GoToUrl(url);


                Wait(6);

                //solve Icon - 4
                var icon_BTC4 = ElementByXPath("//div[@class='captcha-holder captcha-theme-dark']");
                if (IsVisible(icon_BTC4))

                {
                    bool bypass__ = false;
                    while (!bypass__)
                    {
                        Wait(2, 4);
                        bool result_BTC4 = Solveicon();
                        if (IsVisible(ElementByXPath("//p[contains(text(),'You have selected wrong captcha!')]")))
                        {
                            bypass__ = false;
                        }
                        else
                        {
                            bypass__ = true;
                        }
                    }
                }

                //LOG Success
                Log("Success: BCH Collect");
            }
            //==============// 	

        }
       
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
}
//================================//
//end DoSolveFaucet
//================================//
	
	
	
	
	
//================//
//AfterSolveFaucet//
//================//
 public override int AfterSolveFaucet()
 {
        cs = true;

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
		
 }
//================================//
//end AfterSolveFaucet
//================================//
	
	
	
	


    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	
	
	
    private bool Solveicon()
    {

        Wait();
        int solution = getIconCaptchaSol();
        if (solution == -1)
        {
            return false;
        }
        solution--;

        Wait();
        try
        {
            ExecuteScript("var a=document.getElementsByClassName('captcha-image');var element =a[0];element.addEventListener('mouseover', function() {console.log('Event triggered');});var event = new MouseEvent('mouseover', {'view': window,'bubbles': true,'cancelable': true});element.dispatchEvent(event);a[" + solution + "].click();");
        }
        catch (Exception)
        {
            return false;
        }
        Wait(7, 10);
        var ttl = ElementByXPath("//p[@class='alert alert-danger' and contains(text(),'You have selected wrong')]");
      
        if (IsVisible(ttl))
        {
            return false;
        }
        else
        {
            return true;
        }

    }
	
	
	
	
    private Bitmap GetElementScreenShort(IWebDriver driver, IWebElement element, string name)
    {
        Actions actions = new Actions(driver);
        actions.MoveToElement(element);
        actions.Perform();
        Screenshot sc = ((ITakesScreenshot)driver).GetScreenshot();
        var img = Image.FromStream(new MemoryStream(sc.AsByteArray)) as Bitmap;
        var x = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.left;", element);
        var y = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.top;", element);
        int x2 = Convert.ToInt32(x);
        int y2 = Convert.ToInt32(y);
        var width = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.width;", element);
        var height = ExecuteScript("let coords = arguments[0].getBoundingClientRect();return coords.height;", element);
        int width2 = Convert.ToInt32(width);
        int height2 = Convert.ToInt32(height);

        if (Convert.ToInt32(name) != 4)
        {
            img = img.Clone(new Rectangle(x2, y2, width2 - 1, height2), img.PixelFormat);
        }
        else
        {
            img = img.Clone(new Rectangle(x2, y2, width2, height2), img.PixelFormat);
        }

        return img;
    }
	
	
	
	
    private int getIconCaptchaSol()
    {

        Wait();
        int sol = 0;



        Bitmap[] icons = new Bitmap[5];




        var Icons = Driver.FindElements(By.ClassName("captcha-image"));
        int cont = 0;

        //   foreach (var icon in Icons)
        //     {
        foreach (var icon in Icons)
        {

            Wait();
            icons[cont] = GetElementScreenShort(Driver, icon, cont.ToString());
            cont++;


        }


        //   }
        int one_two, one_three, one_four, one_five;

        one_two = CompareImage(icons[0], icons[1]);

        one_three = CompareImage(icons[0], icons[2]);

        one_four = CompareImage(icons[0], icons[3]);

        one_five = CompareImage(icons[0], icons[4]);




        int m = one_two;
        int one_one = (one_five + one_four + one_two + one_three) / 4;
        if (one_one > 2200)
        {
            sol = 1;
            return sol;
        }
        if (m < one_three)
        {
            m = one_three;
        }
        if (m < one_four)
        {
            m = one_four;
        }
        if (m < one_five)
        {
            m = one_five;
        }
        if (m == one_two)
        {
            sol = 2;
        }
        else if (m == one_three)
        {
            sol = 3;
        }
        else if (m == one_four)
        {
            sol = 4;
        }
        else if (m == one_five)
        {
            sol = 5;
        }

        return sol;


    }
	
	
	
    private int CompareImage(Bitmap image1, Bitmap image2)
    {
        int cont = 0;
        for (int i = 0; i < image1.Height; i++)
        {
            for (int j = 0; j < image1.Width; j++)
            {
                if (image1.GetPixel(j, i) != image2.GetPixel(j, i))
                {

                    cont++;

                }
            }
        }

        return cont;


    }


	
} //End - related to the CheckFaucetResult