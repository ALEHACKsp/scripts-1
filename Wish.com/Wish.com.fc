
//==================//
//script Written by: ••AviramDayan•• 23/25/2019 21:09PM
//Last Update: 09/06/2019 21:00AM - Version 4
//==================//

using System;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
//css_inc recaptchaUtilities

public class wish : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://wish.com/")
            {
                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},
                new FaucetSetting() { Name = "GetDailyPoint", Display = "GetDailyPoint - on/off", Type = EditorType.CheckBox, Default = true},				
                new FaucetSetting() { Name = "GetDailyDiscount", Display = "GetDailyDiscount - on/off", Type = EditorType.CheckBox, Default = true},				
				
                //new FaucetSetting() { Name = "FaucetClaim", Display = "FaucetClaim", Type = EditorType.CheckBox, Default = true},	
 
				
            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "wish.com";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
			

		
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//img[@class='HeaderBar__ProfilePictureIcon-sq63g4-2 bBYaXZ']") != null;
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		

	 //var checks login or exit
     var ExitButton = ElementByXPath("//img[@class='HeaderBar__ProfilePictureIcon-sq63g4-2 bBYaXZ']");

	 
	 //if i already Login - go to "bonus"	 
	 if (IsVisible(ExitButton))
	 {
        //if we already login go to here
        GoToUrl("https://www.wish.com/");
	 }	
	
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {
	
      var ExitButton = ElementByXPath("//img[@class='HeaderBar__ProfilePictureIcon-sq63g4-2 bBYaXZ']");

	
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

		GoToUrl("https://www.wish.com/");
		Wait();		
		Wait(2);
     
        var StartOpenLogin = ElementByXPath("//div[@class='AuthenticationModal__AuthenticationButtonWrapper-li0874-10 AuthenticationModal__LoginButton-li0874-19 lmyLYK']/div");
	    if (IsVisible(StartOpenLogin))
	    { 
        Click(StartOpenLogin);
		}

		Wait(2);
		
        var box_user = ElementByXPath("//input[@data-id='emailAddress']");
        SetText(box_user, GetSetting("Email"));
		
		Wait(2);
		
        var box_pass = ElementByXPath("//input[@data-id='password']");
        SetText(box_pass, GetPassword("Password"));
		
		Wait(2);
/*		
       //SolveCaptcha if apper
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }
*/		
		Wait(4);
		
        var ButtonLog = ElementByXPath ("//div[2]/div[6]/div[@class='AuthenticationModal__AuthenticationButtonText-li0874-11 dIiHYq' and contains(text(),'Login')]");
        Click(ButtonLog);
		
		Wait(2);
/*		
        var Error_Message = ElementByXPath ("//div[@id='add_err']/div/div[@class='message' and contains(text(),'fille' | 'captcha' ) ]");
        if (IsVisible(Error_Message))
        {
            Log("Error_Message - Appear - we return after 1 min ");
            return 1*60; //we return after 1 min
        }
*/		
		Wait();	

	 } // end ExitButton

        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
 
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
		    //Log("return ad");
			ad=false;
			Driver.Close();  // Close specific chrome window
            Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
            Driver.Dispose();  // Close the chromedriver.exe
            return GetWaitSetting();
        }

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {

		//==============//
		//GetDailyDiscount//
		//==============//
        if (GetBoolSetting("GetDailyDiscount"))
        {

        GoToUrl("https://www.wish.com/feed/blitz_buy__tab");
		Log("Go to GetDailyDiscount");	
		
        Wait();
        Wait(3);
		
        var Spin_Available_VAR = ElementByXPath("//span[@class='DealDash__SpinTextBase-wgb0rt-30 DealDash__SpinText-wgb0rt-31 cqziWJ']");		
        if (IsVisible(Spin_Available_VAR))
        {
        Log("Spin_Available_VAR - Cool Available");
        Click(Spin_Available_VAR);
        Wait(3);
		}
		
        if (!IsVisible(Spin_Available_VAR))
        {
        Log("Spin_Available_VAR - NOT Available - try next time");			
		}
		
        } // end GetDailyDiscount


		//==============//
		//GetDailyPoint//
		//==============//
        if (GetBoolSetting("GetDailyPoint"))
        {

        GoToUrl("https://www.wish.com/");
		Log("GetDailyPoint - Go to promotions , we just waiting 30 seconds, to act normal and get the bounos daily");	
		
        Wait();
        Wait(30);
        }	
		
		ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	
        //return GetWaitSetting();	


        //We are good to continue
        return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	

	
} //end public class

