
//============================================//
//script Written by: AviramDayan 29/09/2019 15:00PM version 3
//============================================//

using System;
using System.Threading.Tasks;
using FaucetCollector.Script;
//css_inc AntiBotLinksUtility
//css_ref ImageProcessing
//css_ref ProcessingImagesUsingLockBits
//css_inc GetestCaptcha
public class weatherxScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("http://xbit.co.in/faucet")
            {
                new FaucetSetting(){Name="User",Display="Wallet",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Bonus",Display="Bonus - on/off",Type=EditorType.CheckBox,Default=true},
                new FaucetSetting(){Name="UseSolvemedia",Display="UseSolvemedia",Type=EditorType.CheckBox,Default=true},

                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }
	
	

//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "xbit.co.in";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='alert alert-success']";   
        FailXPath = "//*";  //*[text()='']

        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//



//======//
//DoInit
//======//
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }
//======//
//DoInit
//======//



//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
		return ElementByXPath("//a[@class='navbar-brand']") != null;
		
		return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//


//===========//
//BeforeLogin
//===========//
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//===========//
//BeforeLogin
//===========//


//=======//
//DoLogin
//=======//
    public override int DoLogin()
    {
		
		//return 0; //skip
		

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }
//=======//
//DoLogin
//=======//



//=======//
//AfterLogin
//=======//
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
//=======//
//AfterLogin
//=======//



//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {


        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }
	

//================//
//DoSolveCaptcha
//================//
    public override int DoSolveCaptcha()
    {
	Wait();
	 if (IsVisible(ElementByXPath("//*[@class='geetest_radar_tip']")))
        {
            int result = 0;
            GetestCaptchaUtilities.GetestCaptcha getestCaptcha = new GetestCaptchaUtilities.GetestCaptcha(this);
            getestCaptcha.DoInitSolve();
            Wait(2);
            if (IsVisible(ElementByXPath("//img[contains(@src,'data:image/png;base64,')]")))
            {
                AntiBotLinks.AntibotLinksImageType.AntiBotLinksUtility solver = new AntiBotLinks.AntibotLinksImageType.AntiBotLinksUtility(this);
                bool res = solver.DoInit();
                if (!res)
                {
                    result = 1;
                }
            }
            return result;
        }
        if (IsVisible(ElementByXPath("//iframe[contains(@src,'bit-puzzle')]")))
        {
            int result = 0;
            AntiBotLinks.AntibotLinksImageType.PuzzleBall puzzleBallSolver = new AntiBotLinks.AntibotLinksImageType.PuzzleBall(this);
            puzzleBallSolver.DoSolve();
            Wait(1);
            if (IsVisible(ElementByXPath("//img[contains(@src,'data:image/png;base64,')]")))
            {
                AntiBotLinks.AntibotLinksImageType.AntiBotLinksUtility solver = new AntiBotLinks.AntibotLinksImageType.AntiBotLinksUtility(this);
                bool res = solver.DoInit();
                if (!res)
                {
                    result = 1;
                }
            }
            return result;
        }
        else
        {
            Task<int> extraTask = null;
            extraTask = Task.Run(() =>
            {
                return base.DoSolveCaptcha();
            });
            var result = 0;
            if (IsVisible(ElementByXPath("//img[contains(@src,'data:image/png;base64,')]")))
            {
                AntiBotLinks.AntibotLinksImageType.AntiBotLinksUtility solver = new AntiBotLinks.AntibotLinksImageType.AntiBotLinksUtility(this);
                bool res = solver.DoInit();
                if (!res)
                {
                    result = 1;
                }
            }

            if (extraTask != null)
            {

                extraTask.Wait();


                result += extraTask.Result;

            }
            return result;
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
    }
//================//
//DoSolveCaptcha
//================//



    public override int AfterSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }


    public override int BeforeSolveFaucet()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }



//============//
//DoSolveFaucet
//============//
    public override int DoSolveFaucet()
    {
		
        var WalletAddress = ElementByXPath("//form/div[1]/div/input[1]");
        if (!IsVisible(WalletAddress))
        {
            return Fail("Wallet address is not visible");
        }
        SetText(WalletAddress, GetSetting("User"));
        Wait(2);
		
	    SwitchCaptchaFunction(); // call to SwitchCaptcha - ReCaptcha OR SolveMedia
        
		var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }


        var GetRewardButton = ElementByXPath("//input[@type='submit']");
        if (!IsVisible(GetRewardButton))
        {
            return Fail("GetRewardButton submit isn't visible");
        }
        Click(GetRewardButton);

	    Wait();

		//Bonus
		BonusFunction(); //call to Function
		
	    Wait();
		
        Log("we return after 6 min");		
        Driver.Close();  // Close specific chrome window
        Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
        Driver.Dispose();  // Close the chromedriver.exe
        return 6*60;  //return after 36 min

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }
//============//
//DoSolveFaucet
//============//



//===============//
//AfterSolveFaucet
//===============//
    public override int AfterSolveFaucet()
    {

       
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
//===============//
//AfterSolveFaucet
//===============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	

		//=============//
	    //SwitchCaptchaFunction//
		//=============//
        private bool SwitchCaptchaFunction()
        {

            if (!GetBoolSetting("UseSolvemedia"))
            {
                var switchRecaptcha = ElementByXPath("//a[contains(text(),'reCaptcha')]");
                if (IsVisible(switchRecaptcha))
                {
                    Click(switchRecaptcha);
                }
            }
            else
            {
                var SwitchSolvemedia = ElementByXPath("//a[contains(text(),'SolveMedia')]");
                if (IsVisible(SwitchSolvemedia))
                {
                    Click(SwitchSolvemedia);
                }
            }

        return true;
        }
		//===========//
		
		
		//=============//
        //BonusFunction
		//=============//
        private bool BonusFunction()
        {
			
            if (GetBoolSetting("Bonus"))
            {		
	 
            var BonusVar = ElementByXPath("//*[@id='bonusAds']");
            if (IsVisible(BonusVar))
            {
              Click(BonusVar);
              Wait(); 
              var GetBonusVar = ElementByXPath("//input[@id='getBonusBut']");
              Click(GetBonusVar);
              Wait();
              var SuccessFaucet = ElementByXPath("//*[@id='centerArea']/div[2]");
			  Log (SuccessFaucet.Text);
		      Driver.Navigate().Refresh();
            }
		 
            } // end Bonus
		 
        return true;
        } // end BonusFunction
		//=============//
		
	
} // end class
