
//==================//
//script Written by: ••AviramDayan•• 30/04/2019 21:09PM - Version 1
//Last Update: 07/10/2019 22:00PM - Version 24
//==================//

using System;
using FaucetCollector.Script;
//css_inc recaptchaUtilities

public class NanoGamesScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings ( "https://nanogames.io/" )
            {
                new FaucetSetting(){Name="UserName",Display="UserName",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=false},

                new FaucetSetting(){Name="MenuCoins",Display="MenuCoins - Select Favorite Coins",Type=EditorType.ComboBox,Default="JB",Items=new System.Collections.Generic.List<string>{"TRTL","EOS","TRX","VSYS","BCG","BKBT","DOGE","LTC","JB"}},
                new FaucetSetting() { Name = "RollingTheLucky", Display = "RollingTheLucky - ON/OFF", Type = EditorType.CheckBox, Default = true},
                new FaucetSetting() { Name = "RollDaily", Display = "RollDaily - ON/OFF", Type = EditorType.CheckBox, Default = true},
                new FaucetSetting() { Name = "WhereIsCOCOBonus", Display = "WhereIsCOCOBonus - ON/OFF - Every 6 hours will Appears randomly in 3 different methods for 10 min ", Type = EditorType.CheckBox, Default = true},
                new FaucetSetting() { Name = "Agent_Commissions_Reward", Display = "Agent_Commissions_Reward - ON/OFF ", Type = EditorType.CheckBox, Default = true},

                new FaucetSetting() { Name = "Rain_AirDrop_Chat", Display = "Rain_AirDrop_Chat - ON/OFF", Type = EditorType.CheckBox, Default = false},
                new FaucetSetting(){Name="MessageChat",Display="Your Message In Chat - only need to be active to get any rain",Default = ".",Type=EditorType.TextBox,Required=false},

                 new FaucetSetting(){Name="AllGames_Menu",Display="AllGames_Menu - Select Favorite Game (Correctly available only 'ATM' Games)",Type=EditorType.ComboBox,Default="ATM",Items=new System.Collections.Generic.List<string>{"none","ATM"}},
                
				//ATM
 	            new FaucetSetting(){Name="ATM_Multiplication_Division_Menu",Display="ATM - Select if you want to Multiplication OR Division OR MAX OR MIN - Bet",Type=EditorType.ComboBox,Default="none",Items=new System.Collections.Generic.List<string>{"none","Max","Min","/2","x2"}},
				//new FaucetSetting() { Name = "BetAmount", Display = "Bet Amount", Type = EditorType.Numeric, Default = 1 },				
				new FaucetSetting() { Name = "ATM_NumbersOfClaim", Display = "Numbers Of Claim ", Type = EditorType.Numeric, Default = 3 },
                new FaucetSetting() { Name = "ATM_SecondToWait", Display = "Second To Wait (before stop the bet) ", Type = EditorType.Numeric, Default = 2 },
					
                //new FaucetSetting(){Name="NumbersOfClaim",Display="Numbers of claims",Type=EditorType.TextBox,Default="10"},
                //new FaucetSetting(){Name="YourText",Display="YourText",Default="mytext1",Type=EditorType.TextBox,Required=false},

				
            };
        }
    }


    //============================================================//
    //the number of "successes" in the script - when are finished  
    //============================================================//
    public override void Start ( )
    {


        //Title that shows in the browser. Is used to identify and close popup windows
        Title="bc.game";

        SuccessXPath="//*";  //*[@id='']
        FailXPath="//*"; //*[@id='']

        //TimerIsCountingUp = true;

        //Let Faucet Collector start up everything
        base.Start ( );
    }
    //============================================================//
    //the number of "successes" in the script - when are finished  
    //============================================================//




    public override bool IsLoggedIn ( )
    {
        //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath ( "//div[@class='user']" )!=null;

        //return base.IsLoggedIn();
    }


    //========//
    //DoLogin
    //========//
    public override int DoLogin ( )
    {

        var LoginLightBox = ElementByXPath("//span[@class='login-label']");
        if (!IsVisible(LoginLightBox))
        {
            LoginLightBox = ElementByXPath("//a[@class='nologin']");
            if (!IsVisible(LoginLightBox))
            {
                return Fail("Login link not visible");
            }
        }
        Click ( LoginLightBox );

        Wait ( );

        var box_user = ElementByXPath("//input[@placeholder='Email']");
        if ( !IsVisible ( box_user ) )
        {
            return Fail ( "Box user is not visible" );
        }
        SetText ( box_user , GetSetting ( "UserName" ) );

        Wait ( );

        var box_pass = ElementByXPath("//input[@placeholder='Password']");
        if ( !IsVisible ( box_pass ) )
        {
            return Fail ( "Box pass is not visible" );
        }
        SetText ( box_pass , GetPassword ( "Pass" ) );

        Wait ( );
        var result=DoSolveCaptcha();
        if ( result>0 )
        {
            return Fail ( "Fail solving captcha" );
        }
        var ButtonLog = ElementByXPath("//button[@class='xbutton xbutton-big xbutton-full' and contains(text(),'LOGIN' | 'Login')]");
        if ( !IsVisible ( ButtonLog ) )
        {
            return Fail ( "button log is not visible" );
        }
        Click ( ButtonLog );

        Wait ( 1 );


        return base.DoLogin ( );
    }



    public override int AfterLogin()
    {
        var errorElement = ElementByXPath("//div[@class='xnotify-content'] | //div[@class='xnotify-content' and contains(text(),'verify' | 'VERIFY' )] | //div[@class='xnotify-content' and contains(text(),'error')] ");
        if (IsVisible(errorElement))
        {
            var imageElement = ElementByXPath("//label[@class='xinput captcha']/div/img");
            var inputElement = ElementByXPath("//input[@placeholder='Verification Code']");
            if (imageElement == null || inputElement == null)
            {
                return Fail("Error: " + errorElement.Text);
            }

            //solve the image captcha
            var result = DoSolveImageCaptcha(imageElement, inputElement);
            if (result > 0)
            {
                return Fail("Unable to solve the image captcha");
            }

            Wait(5);

            var loginButton = ElementByXPath("//button[@class='xbutton xbutton-big xbutton-full' and contains(text(),'LOGIN' | 'Login')]");
            Click(loginButton);

            Wait(1);
        }

        errorElement = ElementByXPath("//div[@class='xnotify-content'] | //div[@class='xnotify-content' and contains(text(),'verify' | 'VERIFY' )] | //div[@class='xnotify-content' and contains(text(),'error' | 'ERROR')] ");
        if (IsVisible(errorElement))
        {
            return Fail("Error message still visible, retry after two minutes.", minSec: 2 * 60, maxSec: 2 * 65);
        }

        //we are good to continue
        return base.AfterLogin();
    }

    public override int DoSolveCaptcha ( )
    {
        var CaptchaInput=ElementByXPath("//label[@class='xinput captcha']//input");
        var CaptchaImg=ElementByXPath("//div[@class='xinput-after']//img");
        int result=0;
        if ( IsVisible ( CaptchaInput )&&IsVisible ( CaptchaImg ) )
        {

            result=DoSolveImageCaptcha ( CaptchaImg , CaptchaInput );

        }
        return result+base.DoSolveCaptcha ( );
    }

    public override int DoSolveFaucet ( )
    {

        Coins_Function ( );  //first call to choose coin


        if ( GetBoolSetting ( "Agent_Commissions_Reward" ) )
        {
            var BoxTasksTop = ElementByXPath("//button[@class='magic-button active'] | //button[@class='magic-button'] ");
            if ( IsVisible ( BoxTasksTop ) )
            {
                Log ( "Agent_Commissions_Reward - click - BoxTasksTop" );

                Click ( BoxTasksTop );
                Wait ( );
                var ButtonSpin=ElementByXPath("//div[@class='check-btn']");
                if ( IsVisible ( ButtonSpin ) )
                {
                    Click ( ButtonSpin );
                    Wait ( 1 );
                    var ButtonSpin2=ElementByXPath("//img[@class='spin-pointer']");
                    if ( IsVisible ( ButtonSpin2 ) )
                    {
                        Click ( ButtonSpin2 );
                        Wait ( 5 );
                        var ButtonClose=ElementByXPath("//button[@class='xbutton xbutton-gray xbutton-hole']");
                        if ( IsVisible ( ButtonClose ) )
                        {
                            Click ( ButtonClose );
                        }
                        var CloseDialog=ElementByXPath("//div[@class='xdialog-close']");
                        if ( IsVisible ( CloseDialog ) )
                        {
                            Click ( CloseDialog );
                        }
                    }
                }
            }

            WhereIsCOCOBonus_Function ( ); //call

        }



        //================//
        //RollingTheLucky
        //================//		
        if ( GetBoolSetting ( "RollingTheLucky" ) )
        {
            if ( Driver.Url!="https://nanogames.io/bonus" )
            {
                GoToUrl ( "https://nanogames.io/bonus" );
            }


            Wait ( );


            var OneWindowsVAR = ElementByXPath("//div[@class='bonus-item']/div[@class='am-exchange-wrap img-con']");
            if ( IsVisible ( OneWindowsVAR ) )
            {
                Click ( OneWindowsVAR );
                Wait ( 1 );
                var RollingTheLuckyVAR = ElementByXPath("//div[@class='spin']");
                if ( IsVisible ( RollingTheLuckyVAR ) )
                {
                    Click ( RollingTheLuckyVAR );
                    Wait ( 5 );
                }

            }

            WhereIsCOCOBonus_Function ( ); //call
        }



        if ( GetBoolSetting ( "RollDaily" ) )
        {
            if ( Driver.Url!="https://nanogames.io/bonus" )
            {
                GoToUrl ( "https://nanogames.io/bonus" );
            }
            Wait ( 1 );

            var OneWindowsVAR = ElementByXPath("//div[@class='bonus-item']/div[@class='am-rollpoint-wrap img-con']");
            if ( IsVisible ( OneWindowsVAR ) )
            {
                Click ( OneWindowsVAR );
                Wait ( 1 );
                var Time_RollDaily = ElementByXPath("//div[@class='roll-time']");
                if ( !IsVisible ( Time_RollDaily ) )
                {

                    var RollDailyVAR = ElementByXPath("//div[@class='roll-butwrap']/button"); //button[contains(text(),'ROLL')]
                    if ( IsVisible ( RollDailyVAR ) )
                    {
                        Click ( RollDailyVAR );
                    }

                    Wait ( 2 );

                }
            }



        }


        if ( GetBoolSetting ( "WhereIsCOCOBonus" ) )
        {

            WhereIsCOCOBonus_Function ( ); //call

        }


        //================//
        //Rain_AirDrop_Chat
        //================//	
        if ( GetBoolSetting ( "Rain_AirDrop_Chat" ) )
        {
            if ( Driver.Url!="https://nanogames.io/" )
            {
                GoToUrl ( "https://nanogames.io/" );
                Wait ( 1 );
            }

            var ChatAlready_Close = ElementByXPath("//div[@class='xapp']"); //ChatAlready_Close

            var ChatButton = ElementByXPath("//button[@class='xbutton head-button has-border chat-button xbutton-gray xbadge-wrap']"); //ChatAlready_Close

            if ( IsVisible ( ChatAlready_Close ) )
            {
                Click ( ChatButton );
            }

            Wait ( );
            var ChatInput_VAR = ElementByXPath("//input[@placeholder='Your Message']"); //ChatInput_VAR
            if ( IsVisible ( ChatInput_VAR ) )
            {
                SetText ( ChatInput_VAR , GetSetting ( "MessageChat" ) );
            }

            Wait ( );

            WhereIsCOCOBonus_Function ( ); //call

        }// end Rain_AirDrop_Chat
         //================//



        //================//
        //Menus Vars AllGames
        //================//
        //AllGames_Menu
        var AllGames_Menu_Var = GetSetting("AllGames_Menu");

        //===========================//
        //AllGames - none
        //===========================//

        if ( AllGames_Menu_Var=="none" )
        {
            Log ( "none - no game here " );
        }

        if ( AllGames_Menu_Var=="ATM" )
        {
            ATM_GAME_Function ( ); //CALL TO ATM_GAME_Function
        }

        //===========================//

        return GetWaitSetting ( );

    }
    //==============//
    //DoSolveFaucet
    //==============///

    private bool Coins_Function ( )
    {

        var OpenTabCoins = ElementByXPath("//div[@class='xselect currency-select']");
        if ( !IsVisible ( OpenTabCoins ) )
        {
            return false;
        }
        Click ( OpenTabCoins );
        Wait ( );

        var MenuCoinsVAR = GetSetting("MenuCoins");

        if ( !string.IsNullOrEmpty ( MenuCoinsVAR ) )
        {
            var ChangeCoinButton=ElementByXPath("//span[@class='coin-name' and contains(text(),'"+MenuCoinsVAR+"')]");
            if ( !IsVisible ( ChangeCoinButton ) )
            {
                return false;
            }
            Click ( ChangeCoinButton );
            Wait ( 1 );
            return true;
        }

        return false;
    }



    //====================//	
    //ATM_GAME_Function
    //====================//	
    public void ATM_GAME_Function ( )
    {

        GoToUrl ( "https://nanogames.io/atm" );
        Log ( "ATM_GAME_Function - go to https://nanogames.io/atm - Game - to click once on 'Bet' button " );
        Wait ( 1 );

        Coins_Function ( ); //call to open coin			 

        var BalanceVar = ElementByXPath("//div[2]/div[1]/div/div[1]/div/div/span[1 and @class='coin-amount']"); //JB COIN ONLY
        if ( !IsVisible ( BalanceVar ) )
        {
            return;
        }
        int balance;
        int.TryParse ( BalanceVar.Text , out balance );  //<<< normal way - ".Text" get the text of ElementByXPath

        if ( balance<=0 )         //  ( <=0 - it mean Less and = 0 )  ( ==50 - it mean = 50 )  ( >50 <50 - it Above or less from 50 ) //
        {
            //do not do nothing
            Log ( "ATM_GAME_Function - <= 0" );
        }

        if ( balance>1 )         //  ( <=0 - it mean Less and = 0 )  ( ==50 - it mean = 50 )  ( >50 <50 - it Above or less from 50 ) //
        {
            Log ( "ATM_GAME_Function - balance > 1 - Great" );

            /*
            //BetAmount - NORMAL
            var BetAmountVAR = ElementByXPath("//label[@class='xinput xinput-mini']/input");
            SetText(BetAmountVAR, GetSetting("BetAmount"));	
            */

            //BetAmount - MENU	       
            var ATM_Multiplication_Division_Var = GetSetting("ATM_Multiplication_Division_Menu");

            if ( ATM_Multiplication_Division_Var=="none" )
            {
                Log ( "ATM_Multiplication_Division_Var - none" );
            }
            else
            {
                var Action = ElementByXPath("//button[@class='xbutton xbutton-hole' and contains(text(),'"+ATM_Multiplication_Division_Var+"' | '"+ATM_Multiplication_Division_Var.ToUpper()+"' )]");
                if ( IsVisible ( Action ) )
                {
                    Click ( Action );
                    Wait ( 1 );
                }
            }

            //=============//
            //ATM Function Loop
            //=============//
            int Claims;
            Claims=Convert.ToInt32 ( GetSetting ( "ATM_NumbersOfClaim" ) );
            int Count = 0;

            bool BackToCount=false ;


            while ( !BackToCount ) // "!WhileBack" mean - if WhileBack NOT false = true
            {

                Count++; //	important to put Count++ in start - Count OR store - Similar to the clock begins to count	
                Log ( "Count start" );

                var Bet_Game_Once_VAR = ElementByXPath("//button[@id='crash-bet']");
                while ( !IsVisible ( Bet_Game_Once_VAR ) ) //if text "Bet" apper need to click on "Bet" once,and after go to https://nanogames.io/atm to click again on "Bet" | only then the "Claim" will appear always for free
                                                           //if (!IsVisible(Bet_Game_Once_VAR))                     
                {

                    Wait ( ); //so Wait until the button visible						  
                    Log ( "3rd_DailyTasks_ClaimBonus: click on - Bet_Game_Once_VAR - wait for" );

                    var Bet_Game_Once_2_VAR = ElementByXPath("//button[@id='crash-bet']");
                    if ( IsVisible ( Bet_Game_Once_2_VAR ) ) //if text "Bet" apper need to click on "Bet" once,and after go to https://nanogames.io/atm to click again on "Bet" | only then the "Claim" will appear always for free
                    {
                        Log ( "3rd_DailyTasks_ClaimBonus: click on - Bet_Game_Once_2_VAR - now we click on Game 'Bet' - Success" );
                        Click ( Bet_Game_Once_2_VAR );
                        Wait ( 4 ); //so Wait until the button visible	
                    } //end Bet_Game_Once_2_VAR


                    var Stop_Bet = ElementByXPath("//button[@id='crash-escape']");
                    if ( IsVisible ( Stop_Bet ) ) //if text "Bet" apper need to click on "Bet" once,and after go to https://nanogames.io/atm to click again on "Bet" | only then the "Claim" will appear always for free
                    {
                        Log ( "3rd_DailyTasks_ClaimBonus: click on - wait for - Bet_Game_Stop_While - 'Stop' " );
                        // user wait
                        int SecondToWaitVAR;
                        int.TryParse ( GetSetting ( "ATM_SecondToWait" ) , out SecondToWaitVAR );
                        Wait ( SecondToWaitVAR );

                        Click ( Stop_Bet );
                        Log ( "3rd_DailyTasks_ClaimBonus: click on - Bet_Game_Stop_2_While - now we click on 'Stop' bet quickly to succeed" );

                    } //end Stop_Bet

                    BackToCount=true; //back to the Count++; 

                } //end while Visible

                if ( Count>=Claims )  //IsVisible(YourTextVAR) && 
                {
                    Log ( "break NumbersOfClaim" );
                    CheckFaucetResult ( ); //skip all actions - and call to --> CheckFaucetResult - to make sure That FC mark as "Payout" before									 
                                           //return CheckFaucetResult(); 
                    break; //after break the while
                }

            } //end  while (true)		 



        }//end balance >0


    }//end ATM_GAME_Function
     //====================//	
     //====================//	

    //====================//	
    //WhereIsCOCOBonus_Function
    //====================//	
    public void WhereIsCOCOBonus_Function ( )
    {

        var CocoGeneralButton=ElementByXPath("//div[@id='where-coco']/div[@class='right-top']/img[@class='cocoimg']");
        if ( IsVisible ( CocoGeneralButton ) )
        {
            Click ( CocoGeneralButton );
            Wait ( 1 );
        }

    }

}

