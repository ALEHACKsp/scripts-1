using FaucetCollector.Script;
using System;
using System.Collections.Generic;
using System.Drawing;
//css_inc RecaptchaUtilities
public class YannikScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("http://yannik.biz")
            {
                //We have a setting to get the email address used for Yannik
                new FaucetSetting() { Name = "Email", Display = "Email", Type = EditorType.TextBox, Required = true },
                new FaucetSetting(){Name="Captcha",Display="Captcha:",Type=EditorType.ComboBox,Items=new List<string>{"Solvemedia","Recaptcha","IconCaptcha"}, Default="Solvemedia"},
				//new FaucetSetting(){Name="Bonus24Hours",Display="Claim Bonus after 24 hours",Type=EditorType.CheckBox,Default=true},
            };
        }
    }



    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to close popups
        Title = "Yannik.biz";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//h4[contains(text(),'Captcha is wrong.')]";
        FailXPath = "//div[contains(@class,'alert-danger')and contains(text(), 'Captcha is wrong.')]";

        //Let Faucet Collector start up everything
        base.Start();
    }



    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        GoToUrl("https://yannik.biz/index.php");
        //If there is a visible element time_remaining or free_play_form_button then we are logged in.     
        return ElementByXPath("//button[@data-target='#Loginmodal']") == null;
    }



    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //click on the Login menu item
       

        //let Faucet Collector continue.
        return base.BeforeLogin();
    }




    /// <summary>
    /// This method gets called after BeforeLogin if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        Log("ModalLogin");
        OpenQA.Selenium.IWebElement ModalLogin = ElementByXPath("//button[@data-target='#Loginmodal']");
        if (IsVisible(ModalLogin))
        {
            Wait(1);
            Click(ModalLogin);
            Wait(1);
        }
        //fill in the address details

        
        OpenQA.Selenium.IWebElement signInEmail = ElementByXPath("//input[@type='email']");
        if (signInEmail == null)
        {
           
            return Fail("Email address input not found");
        }

        //fill the Email address into the wallet address input element
        SetText(signInEmail, GetSetting("Email"));

        //Login Button
        OpenQA.Selenium.IWebElement loginButton = ElementByXPath("//button[@class='g-recaptcha btn btn-info'][contains(text(),'Login')]");
        if (loginButton == null)
        {

            return Fail("Login button not found.");
        }
        //Solve Captcha
      
            var result = DoSolveCaptcha();
            if (result > 0)
            {
                return Fail("Fail solve captcha");
            }
            var Bypasser = new RecaptchaUtility(this);
            Bypasser.DoSolve();
            Wait();
        
        if (IsVisible(loginButton))
        {
            Click(loginButton);
        }

        //Let Faucet Collector continue
        return base.DoLogin();
    }



    //======================//
    //start AfterLogin//
    //======================//

    public override int AfterLogin()
    {

        //we don't need to do anything here for this faucet - let Faucet Collector do its stuff.
        return base.AfterLogin();
    }

    //======================//
    //start AfterLogin//
    //======================//








    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        GoToUrl("https://yannik.biz/index.php");
        Wait();
        var Timer = ElementByXPath("//div[@id='claimTimer']//b");
        if(IsVisible(Timer))
        {
            try
            {
                return Convert.ToInt32(Timer.Text);
            }
            catch (Exception)
            {
                return GetWaitSetting();
            }
        }

        return base.GetFaucetWaitTime();
    }




    /// <summary>
    /// This method is called right before a captcha will be solved.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {


        //Let Faucet Collector continue
        return base.BeforeSolveCaptcha();
    }




    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //check for the custom captcha image
        return base.DoSolveCaptcha();
    }






    //======================//
    //start AfterSolveCaptcha//
    //======================//

    public override int AfterSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    //======================//
    //end AfterSolveCaptcha//
    //======================//








    //======================//
    //start BeforeSolveFaucet//
    //======================//

    public override int BeforeSolveFaucet()
    {
   


        //Let Faucet Collector Continue.
        return base.BeforeSolveFaucet();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        if (!Driver.Url.Contains("https://yannik.biz/index.php"))
        {
            GoToUrl("https://yannik.biz/index.php");
        }
        //Find the preSubmit Button 
        OpenQA.Selenium.IWebElement preSubmit = ElementByXPath("//button[contains(text(),'claim now')]|//button[text()='try again']");
        if (!IsVisible(preSubmit))
        {

            return Fail("preSubmit button not found.");
        }


        Click(preSubmit);
        Wait(1);
        //Find the submit button to claim on the faucet
        var ButtonSubmit = ElementByXPath("//button[@class='g-recaptcha btn btn-success']");
        if (IsVisible(ButtonSubmit))
        {
            var result = DoReCaptcha();
            if (result > 0)
            {
                return Fail("Fail solving captcha");
            }
            var RecaptchaUt = new RecaptchaUtility(this);
            RecaptchaUt.DoSolve();
            Wait(1);
        }

        //Let Faucet Collector continue its work
        return base.DoSolveFaucet();
    }





    //======================//
    //start AfterSolveFaucet//
    //======================//
    public override int AfterSolveFaucet()
    {

        //Let Faucet Collector continue
        return base.AfterSolveFaucet();
    }

    //======================//
    //end AfterSolveFaucet//
    //======================//





    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        return base.CheckFaucetResult();

    }
}