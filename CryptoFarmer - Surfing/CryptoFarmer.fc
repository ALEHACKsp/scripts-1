using System;
using FaucetCollector.Script;
using OpenQA.Selenium;

public class CryptoFarmer : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {		
		
            return new FaucetSettings("https://cryptofarmer.com")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="CryptoFarmerExchange",Display="CryptoFarmer - Exchange the blocks",Type=EditorType.CheckBox,Default=true},
				new FaucetSetting(){Name="CryptoFarmerSurfingADS",Display="CryptoFarmer - Surfing ADS ",Type=EditorType.CheckBox,Default=false},	

                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }


	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "cryptofarmer.com|Crypto";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//*[contains(text(),'Вы успешно обменяли блоки на коины')]";
        FailXPath = "//*[contains(text(),'Со склада можно взять минимум 10 блок')]";
 
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
	
    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
	
    public override int DoInit()
    {

        cs = false;
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
		
	   //save Login Cookies - Check if the image of balance is there
       return ElementByXPath("//span[@class='my-icon my-couns']") != null;

    }
//==================//
//save Login Cookies 
//==================//	

	
	
	
    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }


	
	
//================================//
//start DoLogin
//================================//
    public override int DoLogin()
    {

        //go to "Login area" https://cryptofarmer.com/login
		
		//if i already login - go to here
        GoToUrl("https://cryptofarmer.com/cabinet/game/history");

        Wait();

        var Email_Box =ElementByXPath("//input[@id='email']");
        if (IsVisible(Email_Box))
        {
            SetText(Email_Box, GetSetting("user"));
        }
        else
        {
            return Fail("Fail login , user box not found");
        }
		
        Wait();
		
        var Password_Box = ElementByXPath("//input[@id='password']");
        if (IsVisible(Password_Box)){
            SetText(Password_Box, GetPassword("Pass"));
        }
        else
        {
            return Fail("Fail login , pass box not found");
        }
		

        var LoginButtonVar = ElementByXPath("//BUTTON[@type='submit']");
        if (!IsVisible(LoginButtonVar))
        {
            return Fail("LoginButtonVar not visible.");
        }

        //Solve the ReCaptcha
        var result = SolveCaptcha();
        if (result > 0)
        {

            return result;
        }

        Wait();

        //Click on LoginButtonVar
        Click(LoginButtonVar);

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }
//================================//
//end DoLogin
//================================//
	
	
	
	
	
//================================//
//start AfterLogin
//================================//
    public override int AfterLogin()
    {
		
	
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
//================================//
//end AfterLogin
//================================//
	
	
	
	
	
	
    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
		//wait 36 min
        if (cs)
        {
            return 36*60;
        }

        //0 mean let Faucet Collector continue.
        //return 0;
		
		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();

    }

	
	
    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

	
	

	
	
	
	
	
    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
		

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
	
	
	
	//loop
    public static bool cs;
	
	
	
	
    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
		

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	

	
	
	
	
//================================//
//start BeforeSolveFaucet
//================================//
    public override int BeforeSolveFaucet()
    {



        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

//================================//
//end BeforeSolveFaucet
//================================//








//================================//
//end DoSolveFaucet
//================================//
	
    public override int DoSolveFaucet()
    {

		if (GetBoolSetting("CryptoFarmerExchange"))
    {
		//go to "Exchange"
        GoToUrl("https://cryptofarmer.com/cabinet/game/history");


		var ExchangeButtonVar = ElementByXPath("/html/body/section/div/div[3]/div/a");

	
        if (IsVisible(ExchangeButtonVar))
        {
        //go to "button"
        GoToUrl("https://cryptofarmer.com/cabinet/game/clearstorage");
        }

    }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
//================================//
//end DoSolveFaucet
//================================//
	
	
	
	
	
//================//
//AfterSolveFaucet//
//================//
    public override int AfterSolveFaucet()
    {
		
		if (GetBoolSetting("CryptoFarmerSurfingADS"))
    {
		
        GoToUrl("https://cryptofarmer.com/cabinet/bux");

        Wait(2,3);
        var annoncements = ElementsByXPath("//div[contains(@class,'b-setting__item ' )]");
        while (annoncements.Count > 0)
        {
          
            try
            {
                annoncements[0].Click();
            }
            catch (Exception)
            {
               
                ExecuteScript("arguments[0].click();", annoncements[0]);
            }
                
                CheckForPopupsEnabled = false;
                Driver.SwitchTo().Window(Driver.WindowHandles[1]);
                Wait(2,3);
            DateTime t1 = DateTime.Now.AddSeconds(90);
            while (!IsVisible(ElementByXPath("//span[contains(@class,'b-page-captcha__form')]")))
            {
                Wait();
                if (DateTime.Now > t1)
                {
                    break;
                }
            }
            Wait();
            int total = 0;
            var capt = ElementsByXPath("//span[contains(@class,'b-page-captcha__form-text')]");
                var t= ExecuteScript("var a=document.getElementsByClassName('b-page-captcha__form-text');var s=parseInt(a[0].innerHTML)+parseInt(a[1].innerHTML)-a[2].innerHTML;return s");
                int.TryParse(t.ToString(), out total);
                
            var capt_bux = ElementByXPath("//input[@id='capcha_bux']");
            if (IsVisible(capt_bux))
            {
                    capt_bux.SendKeys(total.ToString());
            }
            Wait();
                CheckForPopupsEnabled = true;
                CheckForPopups();
                Driver.SwitchTo().Window(Driver.WindowHandles[0]);
                Wait();
                GoToUrl("https://cryptofarmer.com/cabinet/bux");


            annoncements = ElementsByXPath("//div[contains(@class,'b-setting__item ' )]");
            Wait();
        }
		
		
	}
        cs = true;
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
		
    }
//================================//
//end AfterSolveFaucet
//================================//
	
	
	
	


    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}