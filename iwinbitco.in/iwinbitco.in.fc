

//==================//
//script Written by: ••AviramDayan•• 15/09/2019 03:00AM - Version 1
//Last Update: 15/09/2019 03:00AM - Version 1
//==================//

using System;
using System.Drawing;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Text.RegularExpressions;
//css_inc RecaptchaUtilities
//css_inc ShortLinkUtilities


public class iwinbitco : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://iwinbitco.in/")
            {

                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=true},
                //new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="Address",Display="Wallet Address Btc",Type=EditorType.TextBox,Required=false},				
                new FaucetSetting() { Name = "FaucetClaim", Display = "FaucetClaim", Type = EditorType.CheckBox, Default = true},	
				//new FaucetSetting() { Name = "GetActivityToken", Display = "GetActivityToken - on/off (it's recommended to set the time every 360 min '6 hours') ", Type = EditorType.CheckBox, Default = true},		
                
                //new FaucetSetting() { Name = "AutoSetWallet", Display = "AutoSetWallet - ON/OFF", Type = EditorType.CheckBox, Default = true},	
                //new FaucetSetting() { Name = "AutoWithdraw", Display = "AutoWithdraw - ON/OFF", Type = EditorType.CheckBox, Default = true},	
                //new FaucetSetting() { Name = "LimitWithdraw", Display = "LimitWithdraw - write the full number of satoshi (without point - 0.0 | 1.1 | 2.2 - and etc ) ", Type = EditorType.Numeric, Default = 1000 },

				//new FaucetSetting(){Name="Menu_Bot_Currency",Display="Discordtip Bot | Main - Menu Bot Currency - Select Favorite Currency (correctly available only 'BTC')",Type=EditorType.ComboBox,Default="btc",Items=new System.Collections.Generic.List<string>{"btc","bch","btg","dash","dgb","Btc","eos","eth","ethos","ltc","omg","wax","xzc","zec"}},

				//new FaucetSetting(){Name="MenuTime",Display="MenuTime - Select Favorite Time",Type=EditorType.ComboBox,Default="WebSiteTime",Items=new System.Collections.Generic.List<string>{"WebSiteTime","UserCustomTime"}},
                //new FaucetSetting() { Name = "UserCustomTime", Display = "UserCustomTime", Type = EditorType.Numeric, Default = 75 },				
                //new FaucetSetting(){Name="SelectCaptcha",Display="SelectCaptcha - ON SolveMedia  | OFF Recaptcha",Type=EditorType.CheckBox,Default=true },

				
            };
        }
    }




    //My DomainName
    //string DomainName_String = "https://iwinbitco.in";
	//example - GoToUrl(DomainName_String);
    //==========//

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "I Win Bitcoin";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {
			

		
        //Let Faucet Collector continue.
        return base.DoInit();
    }

	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        //return ElementByXPath("//center/a[contains(text(),'Account')]") != null;
	 
	    return true;
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {
		

     GoToUrl("https://www.iwinbitco.in/faucet");

		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	


	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {


        
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
 
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


            
	

//================//
//GetFaucetWaitTime
//================//
 public override int GetFaucetWaitTime()
 {

     if (ad)
     {
			
		 ad=false;
	     //return GetWaitSetting();
		 
         var TimerExist_VAR = ElementByXPath("//div[@class='countdown']");		
	     if (IsVisible(TimerExist_VAR)) // TimerExist_VAR - visible
	     {
             var MinVAR = ElementByXPath("//div[@id='cd-min']");
             var SecVAR = ElementByXPath("//div[@id='cd-sec']");
			 
             int MinINT, SecINT;
             MinINT = Convert.ToInt32(MinVAR.Text)*60;
             SecINT = Convert.ToInt32(SecVAR.Text);
             return MinINT + SecINT;
		 }
		 
     } //end ad



   //let Faucet Collector continue.
   return base.GetFaucetWaitTime();
 }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {

/*
		//==============//
		//AutoSetWallet//
		//==============//
        if (GetBoolSetting("AutoSetWallet"))
        {
         GoToUrl("https://iwinbitco.in/profile");
         Wait();
         Wait(2);

          var ValueNone = ElementByXPath("//input[@id='change_address_btc_addr' and @value='' ]");
	      if (IsVisible(ValueNone))  //if the value "none" do stuff	
	      {
			 Log("ValueNone - we set Wallet Address");

             var InputAddress = ElementByXPath("//input[@id='change_address_btc_addr' and @placeholder='Bitcoin Address']");		
	         if (IsVisible(InputAddress)) // InputAddress - visible
	         {
              SetText(InputAddress, GetSetting("Address"));
		      Log("InputAddress");
		     }
		 
             Wait(2);
		 
             var InputPassword = ElementByXPath("//input[@id='change_address_pw']");		
	         if (IsVisible(InputPassword)) // InputPassword - visible
	         {
              SetText(InputPassword, GetPassword("Password")); 
		      Log("InputPassword");
		     }	
		 
             Wait(2);
		 
             var ChangeButton = ElementByXPath("//button[@id='change_addr_submit']");		
	         if (IsVisible(ChangeButton)) // ChangeButton - visible
	         {
              Click(ChangeButton); 
		      Log("ChangeButton");
		     }	
	      } // end ValueNone
	
		}//end AutoSetWallet
		//==============//
		

		//==============//
		//AutoWithdraw//
		//==============//
        if (GetBoolSetting("AutoWithdraw"))
        {
         GoToUrl("https://iwinbitco.in/claim");
         Wait();
         Wait(2);

	     AutoWithdraw_Function(); //call 

		}//end AutoWithdraw
		//==============//
	*/



    //========//
	//Login
    //========//
     var ExitButton = ElementByXPath("//center/a[contains(text(),'Account')]");


	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

		GoToUrl("https://iwinbitco.in/login");
		Wait();		
		Wait(2);
/*     
        var StartOpenLogin = ElementByXPath("//div[@class='AuthPage___controls']/button[contains(text(),'Sign In')]");
	    if (IsVisible(StartOpenLogin))
	    { 
        Click(StartOpenLogin);
		}
*/
		Wait(2);
		
		
/*	
        var Address_VAR = ElementByXPath("//input[@id='form-field-wallet_addr']");
        SetText(Address_VAR, GetSetting("Address"));
*/
	
        var box_user = ElementByXPath("//input[@name='email_address']");
        SetText(box_user, GetSetting("Email"));
		
		Wait(2);
		
        var box_adds = ElementByXPath("//input[@name='wallet_address']");
        SetText(box_adds, GetSetting("Address"));


        //SelectCaptcha_Function(); //call to SelectCaptcha
		
		Wait(2);	

        // SolveCaptcha
        var RecaptchaOpenInvisible = ElementByXPath("//iframe[contains(@src,'recaptcha/api2/anchor')]");
        if (IsVisible(RecaptchaOpenInvisible))
		{
		
           //var result = DoSolveCaptcha(); // call to SolveCaptcha

           var result = base.DoSolveCaptcha();
           RecaptchaUtility utility = new RecaptchaUtility(this);
           utility.DoSolve();
           if (result > 0)
           {
              return Fail("fail not solve"); //return to solve again - if something wrong
           }
		
           //ExecuteScript("enableSigninBtn");

        } //end RecaptchaOpenInvisible

		Wait(3);
		
        var ButtonLog = ElementByXPath("//button[@type='submit']");
        Click(ButtonLog);
		
		Wait(2);
/*		
        var Error_Message = ElementByXPath ("//div[@id='add_err']/div/div[@class='message' and contains(text(),'fille' | 'captcha' ) ]");
        if (IsVisible(Error_Message))
        {
            Log("Error_Message - Appear - we return after 1 min ");
            return 1*60; //we return after 1 min
        }
*/		

        //Title = "test Wallet";
		
		Wait();	

	 } // end ExitButton
 //==============//



      //==============//
      //FaucetClaim//
      //==============//
      if (GetBoolSetting("FaucetClaim"))
      {

         GoToUrl("https://www.iwinbitco.in/faucet");
		 Log("FaucetClaim");
         Wait();
         Wait(25);
			
         var TimerExist_VAR = ElementByXPath("//div[@class='countdown']");		
	     if (IsVisible(TimerExist_VAR)) // TimerExist_VAR - visible
	     {
             var MinVAR = ElementByXPath("//div[@id='cd-min']");
             var SecVAR = ElementByXPath("//div[@id='cd-sec']");
			 
             int MinINT, SecINT;
             MinINT = Convert.ToInt32(MinVAR.Text)*60;
             SecINT = Convert.ToInt32(SecVAR.Text);
             return MinINT + SecINT;
		 }
	
	     if (!IsVisible(TimerExist_VAR)) // TimerExist_VAR NOT visible
	     {
		   var RollButton = ElementByXPath("//button[contains(text(),'Claim')]");	
	       if (IsVisible(RollButton))
	       {
             Wait(7);		   
             /*
             var result = base.DoSolveCaptcha();
             RecaptchaUtility utility = new RecaptchaUtility(this);
             utility.DoSolve();
             if (result > 0)
             {
              return Fail("fail not solve"); //return to solve again - if something wrong
			 }
			 */
			 
             //solve icon captcha
             var Icons = ElementsByXPath("//*[@class='captcha-image']");
             if (Icons.Count > 0)
             {
                 DateTime t1 = DateTime.Now.AddSeconds(25);
                 while (Icons.Count == 0 && !IsVisible(Icons[0]))
                 {
                     Wait();
                     Icons = ElementsByXPath("//*[@class='captcha-image']");
                     if (DateTime.Now > t1)
                     {
                         break;
                     }
                 }
                 Wait(2, 3);
                 int solution = GetIconCaptchaSol();
                 if (solution == -1)
                 {
                     return Fail("There is a problem with icon captcha");
                 }
                 solution--;
                 try
                 {
                     ExecuteScript("var a=document.getElementsByClassName('captcha-image');var element =a[0];element.addEventListener('mouseover', function() {console.log('Event triggered');});var event = new MouseEvent('mouseover', {'view': window,'bubbles': true,'cancelable': true});element.dispatchEvent(event);a[" + solution + "].click();");
                 }
                 catch (Exception)
                 {
                     return Fail("Fail Solve icon captcha");
                 }
             }
             //=========//
			 
             Wait(2);
             Wait();
		  
	         Click(RollButton);
	         Log("RollButton");	

             Wait(2);		
 
             Driver.Navigate().Refresh();
		
             Wait();	
             
			 /*
		     var ErrorText = ElementByXPath("//p[contains(text(),'incorrect') ]") ;	
	         if (IsVisible(ErrorText))
	         {	
	          return 1*60;
	          Log("ErrorText - return after 1 min");	
		     }
		     */
			 
	       } //end RollButton
	     }
		 

           //TIME NOT visible at all
	       if (!IsVisible(ElementByXPath ("//div[@class='countdown']") ))  //not visible
	       {
		   Log("Time Not visible - we return after FC time");		
           return GetWaitSetting();
		   } //end TimerExist_VAR NOT visible

	  
      }// end FaucetClaim	 
 
	  
	  
	  ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	
      //return GetWaitSetting();	

      //We are good to continue
      return base.DoSolveFaucet();
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	

	    //===========//
        //AutoWithdraw_Function
	    //===========//
        public void AutoWithdraw_Function()
        {
		  Log("AutoWithdraw_Function");	

/*
        var BalanceVAR = ElementByXPath("//span[@class='my-balance']");
        double BalanceDOUBLE; 
        double.TryParse(BalanceVAR.Text.Trim(), out BalanceDOUBLE); //decimals  0.1  1.1  2.2  etc
  
        double MyAmount;        
        double.TryParse(GetSetting("LimitWheel"), out MyAmount);
*/
	
        var balance = ElementByXPath("//span[@id='user_balance']");
        string BalanceSTRING = balance.Text.Trim().Split('.')[1];
        int BalanceINT = Convert.ToInt32(BalanceSTRING);

        int MyAmount;
        Int32.TryParse(GetSetting("LimitWithdraw"), out MyAmount);

        if (BalanceINT < MyAmount) // - 1000
        {
			Log("AutoWithdraw - Under <");
           //do all stuff
        }
 
        if (BalanceINT > MyAmount) // the Default Limit to withdraw is 1000
        {
			Log("AutoWithdraw - Above >");
            //GoToUrl("https://panel.bither.one/withdraw");
			
			var WithdrawTab = ElementByXPath("//li[1]/a[contains(text(),'Withdraw')]");
            Click(WithdrawTab); 
			
            Wait(2);		

            var WithdrawAllAmount = ElementByXPath("//a[@id='withdraw_set_all']");
	        if (IsVisible(WithdrawAllAmount))  
	        {
			 Log("AutoWithdraw - Click on WithdrawAllAmount");
			 Click(WithdrawAllAmount);
			}
			
            Wait(2);
			
            var WithdrawButton = ElementByXPath("//button[@id='withdraw_submit']");
	        if (IsVisible(WithdrawButton)) 
	        {
			 Log("AutoWithdraw - Click on WithdrawButton");
			 Click(WithdrawButton);
			}
			
			Wait();
        }
		
		
        } //AutoWithdraw_Function
	    //===========//	
	
	

	    //===========//
        //Time_Function
	    //===========//
        public int Time_Function()
        {

         //do stuff

	     return 0;   
		   
        } //MenuExample
	    //===========//	


	    //================//
        //SelectCaptcha_Function
	    //================//
        public void SelectCaptcha_Function()
        {
    	
	    var SelectCaptchaVAR = ElementByXPath("//select[@name='captcha_type']");
        if (IsVisible(SelectCaptchaVAR))
        {
            if (GetBoolSetting("SelectCaptcha"))
            {
                SelectOptionByValue(SelectCaptchaVAR, "1");
            }
            else
            {
                SelectOptionByValue(SelectCaptchaVAR, "2");
            }
            Wait(1);
        }
		
		    /*
            if (GetBoolSetting("SelectCaptcha"))
            {
                var SolveMediaVAR = ElementByXPath("//div[@class='select-items select-hide']/div[contains(text(),'SolveMedia')]");
                Click(SolveMediaVAR);				
            }
            if (!GetBoolSetting("SelectCaptcha"))
            {
                var ReCaptchaVAR = ElementByXPath("//div[@class='select-items select-hide']/div[contains(text(),'ReCaptcha')]");	
                Click(ReCaptchaVAR);
            }
			*/
		  
        } //SelectCaptcha_Function
        //=================//
	

        //=================//
       //ShortLink_Function
        //=================//

        public void ShortLink_Function()
        {
        //call to ShortLink
        var ShortLinkBypasser = new ShortLinkBypasser(this);
        bool ShorBool = ShortLinkBypasser.DoShortLink();
        if (!ShorBool)
        {
            Log("Fail shortlink");
        }
		
        }//end ShortLink_Function
        //=================//




    //=================//
    //GetIconCaptchaSol
    //=================//

    private int GetIconCaptchaSol()
    {
        try
        {
            int sol = 0;

            Bitmap[] icons = new Bitmap[5];

            //var Icons = Driver.FindElements(By.ClassName("captcha-image"));
            var Icons = ElementsByXPath("//*[@class='captcha-image']");

            int cont = 0;

            //   foreach (var icon in Icons)
            //     {
            foreach (var icon in Icons)
            {

                icons[cont] = TakeScreenshot(Base.Captcha.CaptchaService.Manual, icon);
                cont++;

            }


            //   }
            int one_two, one_three, one_four, one_five;

            one_two = CompareImage(icons[0], icons[1]);
            one_three = CompareImage(icons[0], icons[2]);
            one_four = CompareImage(icons[0], icons[3]);
            one_five = CompareImage(icons[0], icons[4]);



            int m = one_two;
            int one_one = (one_five + one_four + one_two + one_three) / 4;
            if (one_one > 2200)
            {
                sol = 1;
                return sol;
            }
            if (m < one_three)
            {
                m = one_three;
            }
            if (m < one_four)
            {
                m = one_four;
            }
            if (m < one_five)
            {
                m = one_five;
            }
            if (m == one_two)
            {
                sol = 2;
            }
            else if (m == one_three)
            {
                sol = 3;
            }
            else if (m == one_four)
            {
                sol = 4;
            }
            else if (m == one_five)
            {
                sol = 5;
            }

            return sol;
        }
        catch (Exception)
        {
            return -1;
        }


    }
   //=================//
	
	
    private int CompareImage(Bitmap image1, Bitmap image2)
    {
        int cont = 0;
        for (int i = 0; i < image1.Height; i++)
        {
            for (int j = 0; j < image1.Width; j++)
            {
                if (image1.GetPixel(j, i) != image2.GetPixel(j, i))
                {

                    cont++;

                }
            }
        }

        return cont;


    }


	
} //end public class

