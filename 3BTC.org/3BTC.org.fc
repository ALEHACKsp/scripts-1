using System;
using System.Collections.Generic;
using FaucetCollector.Script;
using OpenQA.Selenium.Support.UI;


public class TreBTCScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://3btc.org/faucet/")
            {
                //We have a setting to get the email address used for freebitcoin
                new FaucetSetting() { Name = "Email", Display = "Email", Type = EditorType.TextBox, Required = true },
                //And we also need the password
                new FaucetSetting() { Name = "Password", Display = "Password", Type = EditorType.Password, Required = true },
                //Allow the user to select an auto redeem option
                new FaucetSetting() {
                    Name = "Select_Coin",
                    Display = "Select Coin",
                    Type = EditorType.ComboBox,
                    Items = new List<string>
                    {
                        "None",
                        "Bitcoin Cash (BCH)",
                        "Bitcoin Gold (BTG)",
                        "Bitcore (BTX)",
                        "Bytecoin (BCN)",
                        "Dash (DASH)",
			"DigiByte (DGB)",
                        "Dogecoin (DOGE)",
                        "Ethereum (ETH)",
			"Litecoin (LTC)",
			"Monero (XMR)",
                        "Needlecoin (NDG)",
                        "Potcoin (POT)",
                        "Ripple (XRP)",
                        "Stellar (XLM)",
			"ZCash (ZEC)"
                    },
                    Default = "Litecoin (LTC)"
                }
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to close popups
        Title = "3BTC.ORG | Multi Faucet, Web Mining";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[contains(@class,'info')]";
        FailXPath = "//*[@id='free_play_error']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //If there is a visible element time_remaining or free_play_form_button then we are logged in.     
        return IsVisible(ElementById("timer_info")) || IsVisible(ElementById("roll_button"));
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        var loginButton = ElementByXPath("//a[@class='open_right_column_button']");
        if (!IsVisible(loginButton))
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Login button not found.");
        }

        //We are ready to click the login button.
        Click(loginButton);
        Wait(1);
		
        //let Faucet Collector continue.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        //Find the input field that holds the email address
        var signInEmail = ElementByXPath("//form[@id='form_sing_in']//input[@type='email']");
        if (signInEmail == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Signin email input not found.");
        }

        var signInPassword = ElementByXPath("//form[@id='form_sing_in']//input[@type='password']");
        if (signInPassword == null)
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Signin password input not found.");
        }

        //Email and password input found, update the value of the input with the email address and password the user entered in Faucet Collector
        SetText(signInEmail, GetSetting("Email"));
        SetText(signInPassword, GetPassword("Password"));

        //Now we search for the login submit button
        var signinButton = ElementByXPath("//form[@id='form_sing_in']//input[@name='sing_up']");
        if (!IsVisible(signinButton))
        {
            //We couldn't find it. Register it as a fail so it can reload the page and try again in 10-15 seconds.
            return Fail("Signin button not found.");
        }

        //We are ready to click the login button.
        Click(signinButton);

        //Let Faucet Collector continue
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {

        //we don't need to do anything here for this faucet - let Faucet Collector do its stuff.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        //var minutes = Convert.ToString(ExecuteScript("var node = document.evaluate(\"//SPAN[@id='rollTimerValueMinute']\", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; if (node) { return node.innerText; } else { return ''; }"));
        //var seconds = Convert.ToString(ExecuteScript("var node = document.evaluate(\"//SPAN[@id='rollTimerValueSecond']\", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue; if (node) { return node.innerText; } else { return ''; }"));
        //if (string.IsNullOrEmpty(minutes) || string.IsNullOrEmpty(seconds))
        //{
        //    return 0;
        //}

        //var min = Convert.ToInt32(minutes.Trim());
        //var sec = Convert.ToInt32(seconds.Trim());
        //return the total wait time in seconds
        //return (min * 60) + (sec);


        var RollTimerMin = ElementByXPath("//span[@id='rollTimerValueMinute']");
        var RollTimerSeg = ElementByXPath("//span[@id='rollTimerValueSecond']");
        if (IsVisible(RollTimerMin) && IsVisible(RollTimerSeg))
        {
            return Convert.ToInt32(RollTimerMin.Text) * 60 + Convert.ToInt32(RollTimerSeg.Text);
        }

        return base.GetFaucetWaitTime();
    }

    /// <summary>
    /// This method is called right before a captcha will be solved.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //Let Faucet Collector continue
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //check for the custom captcha image
        var captchaImage = ElementByClass("captchasnet_captcha_content");
        if (IsVisible(captchaImage))
        {
            //get the input where the result of the captcha needs to be entered.
            var captchaInput = ElementByClass("captchasnet_captcha_input_box");
            if (!IsVisible(captchaInput))
            {
                return Fail("ImageCaptcha input field not foundd");
            }

            //Let Faucet Collector solve this image
            return DoSolveImageCaptcha(captchaImage, captchaInput);
        }
        else
        {
            //Let Faucet Collector continue. It will check for SolveMedia and reCAPTCHA.
            return base.DoSolveCaptcha();
        }
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    


    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. 
    /// Next methods that will be called are DoSolveFaucet and AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        if (!Driver.Url.Contains("https://3btc.org/faucet/"))
        {
            GoToUrl("https://3btc.org/faucet/");
            Wait(1);
        }
        var dropdown = ElementById("select_coin_list");
		if (!IsVisible(dropdown))
		{
			return Fail("Coin dropdown not found");
		}
 

      var switcher = new SelectElement(dropdown);
        string Coin = GetSetting("Select_Coin");
        switcher.SelectByText(Coin);
        //SelectOptionByValue(dropdown, GetSetting("Select_Coin"));
      

        Wait(1);
        //Dismiss the cookie banner
        ExecuteScript("if($('.cc_btn_accept_all').length > 0) { $('.cc_btn_accept_all')[0].click(); }");

        //Let Faucet Collector Continue.
        return base.BeforeSolveFaucet();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        //Find the submit button to claim on the faucet
        var submitButton = ElementById("roll_button");
        if (!IsVisible(submitButton))
        {
            //Unable to find the submit button - return the failure.
            return Fail("Submit button not found or not visible.");
        }

        //We need to solve the captcha on this page before clicking the Login button.
        //We use the SolveCaptcha method for this. SolveCaptcha will call BeforeSolveCaptcha, DoSolveCaptcha and AfterSolveCaptcha
        //The DoSolveCaptcha method does the actual solving - it checks if there is a SolveMedia Captcha or a reCAPTCHA present on the page 
        //and will solves that one using the selected method entered in Faucet Collector on the Captcha tab.
        //In this script we only override BeforeSolveCaptcha (see above) to be able to solve the custom image captcha if its visible.
        var result = SolveCaptcha();
        if (result > 0)
        {
            //Unable to solve the captcha - return the failure
            return result;
        }

        //The Captcha is solved, click the submit button
        //Click(submitButton);
        ExecuteScript("rollStart();");

        //Let Faucet Collector continue its work
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// This faucet shows a "Processing" window after you click the claim submit button.
    /// We will have to wait for it to disappear before we can check for the results.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //Let Faucet Collector continue
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        Reload = true;
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}