

//==================//
//script Written by: ••AviramDayan•• 23/25/2019 21:09PM
//Last Update: 06/08/2020 22:00PM - Version 4
//==================//

using System;
using FaucetCollector.Script;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
//css_inc recaptchaUtilities

public class mobilebet : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
			
            return new FaucetSettings("https://www.mobilebet.com/casino")
            {
                new FaucetSetting(){Name="Email",Display="Email",Type=EditorType.TextBox,Required=false},
                new FaucetSetting(){Name="Password",Display="Password",Type=EditorType.Password,Required=false},
				
                //new FaucetSetting() { Name = "FaucetClaim", Display = "FaucetClaim", Type = EditorType.CheckBox, Default = true},	
 
				
            };
        }
    }

	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        ad = false;
       
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Mobilebet";

		SuccessXPath = "//*";  //*[@id='']
        FailXPath = "//*"; //*[@id='']
	
        //TimerIsCountingUp = true;
		
        //Let Faucet Collector start up everything
        base.Start();
    }
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//

	
    bool ad; //custom bool


    public override int DoInit()
    {

        //Let Faucet Collector continue.
        return base.DoInit();
    }


	
//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
	    //save Login Cookies - Check if the "Logout" exist
        return ElementByXPath("//span[contains(@class,'balance')]/a[contains(@data-at,'account')]") != null;
		
	    //return true;
	 
        //return base.IsLoggedIn();
    }
//==================//
//save Login Cookies 
//==================//	




//=============//
//BeforeLogin
//=============//
    public override int BeforeLogin()
    {

        //if we already login go to here
        GoToUrl("https://www.mobilebet.com/casino");
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//=============//
//BeforeLogin
//=============//

	

	
//========//
//DoLogin
//========//
    public override int DoLogin()
    {

      var ExitButton = ElementByXPath("//span[contains(@class,'balance')]/a[contains(@data-at,'account')]");

	
	 //if i NOT Login - go to Login Page
	 if (!IsVisible(ExitButton))
	 {

        GoToUrl("https://www.mobilebet.com/casino/explore?sidebar=login");

		Wait();		
		Wait(2);

        var box_user = ElementByXPath("//input[@id='usernameLoginBox'] | //input[@id='email']");
        SetText(box_user, GetSetting("Email"));

		Wait(2);
		
        var box_pass = ElementByXPath("//input[@id='passwordLoginBox'] | //input[@id='password']");
        SetText(box_pass, GetPassword("Password"));
		
		Wait(2);
		
        var LogButton = ElementByXPath("//button[@type='submit']");
        Click(LogButton);
		
        Recaptcha_Function(); //call
		
		Wait(4);
			
	    var AccountClosed = ElementByXPath("//p[contains(text(),'closed') or contains(text(),'Your account is') ]");
	    if (IsVisible(AccountClosed))
	    { 
		Log("AccountClosed - we return after 450 min");
        Driver.Close();  // Close specific chrome window
        Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
        Driver.Dispose();  // Close the chromedriver.exe
        return GetWaitSetting();
		}
		
		Wait();

	 } // end ExitButton

	
       return base.DoLogin();
    }
//========//
//DoLogin
//========//
 


//========//
//AfterLogin
//========//
 public override int AfterLogin()
 {
 
  
    //we are good to continue
    return base.AfterLogin();

 }
//========//
//AfterLogin
//========//


	

//================//
//GetFaucetWaitTime
//================//
    public override int GetFaucetWaitTime()
    {

        if (ad)
        {
		    //Log("return ad");
			ad=false;
			Driver.Close();  // Close specific chrome window
            Driver.Quit();  // also Close the console app, that was used to kick off the chrome window
            Driver.Dispose();  // Close the chromedriver.exe
            return GetWaitSetting();
        }

		//let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
//================//
//GetFaucetWaitTime
//================//



    public override int BeforeSolveCaptcha()
    {
 
        //Return we are ready to proceed
        return base.BeforeSolveFaucet();
    }

	
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //Return we can continue
        return base.BeforeSolveFaucet();
    }
  
	
	
//==============//
//DoSolveFaucet
//==============//
 public override int DoSolveFaucet()
  {
	  
        GoToUrl("https://www.mobilebet.com/casino");
		Log("Go to promotions , we just waiting 30 seconds, to act normal and get 25 point bounos daily");	
		
        Wait();
        Wait(30);
			
		ad = true;    // if i do true - it report as succeed // only one time no multi and also required -> return GetWaitSetting();	
        //return GetWaitSetting();	
	
        //We are good to continue
        return base.DoSolveFaucet();
		
 }
//==============//
//DoSolveFaucet
//==============///
	
	
	
	
	
//==============//
//AfterSolveFaucet
//==============//
  public override int AfterSolveFaucet()
  {

   //This faucet has nothing to do here. We will let Faucet Collector handle it.
   return base.AfterSolveFaucet();
   
  }
	
//==============//
//AfterSolveFaucet
//==============//



    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
		
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
	
	
    //===========//
    //Recaptcha_Function//
    //===========//
    public int Recaptcha_Function()
    {	

       var RecaptchaOpen_Iframe = ElementByXPath ("//iframe[contains(@src,'recaptcha/api2/bframe')]"); // iframe
       if (IsVisible(RecaptchaOpen_Iframe))
       {

         var result = base.DoSolveCaptcha();
         RecaptchaUtility utility = new RecaptchaUtility(this);
         utility.DoSolve();
         if (result > 0)
         {
           //return Fail("fail not solve"); //return to solve again - if something wrong
         }

       }
	
	 return 0;   
    }
    //=========//
	
	
} //end public class

