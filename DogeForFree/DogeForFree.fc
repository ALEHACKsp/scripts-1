
//============================================//
//script Written first by: cgerabit 
//============================================//

//============================================//
//script Written last updates + Features | by: AviramDayan 25/01/2019 10:00AM
//============================================//


using System;
using FaucetCollector.Script;
//css_inc ShortLinkUtilities
public class DogeforFree : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://dogeforfree.info/")
            {
                new FaucetSetting(){Name="WalletAddressLTC",Display="WalletAddress - Litecoin",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="WalletAddressDoge",Display="WalletAddress - Dogecoin",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="FaucetLTC",Display="Faucet Litecoin - on/off",Type=EditorType.CheckBox,Default=true},	
                new FaucetSetting(){Name="FaucetDoge",Display="Faucet Dogecoin - on/off",Type=EditorType.CheckBox,Default=true},	
                new FaucetSetting(){Name="UseSolvemedia",Display="UseSolvemedia",Type=EditorType.CheckBox,Default=true},

                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }


	
//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "DogeForFree - Free Dogecoin Faucet | LTC For Free - Free Litecoin Faucet";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='alert alert-success text-center']";
        FailXPath = "//div[contains(text(),'Wrong Captcha, Please try again!')]";

        //Let Faucet Collector start up everything
        base.Start();
    }

//============================================================//
//the number of "successes" in the script - when are finished  
//============================================================//



//======//
//DoInit
//======//
    public override int DoInit()
    {
        
		//if the message WillBeBackSoon apper so - Disable the script
        var WillBeBackSoon_VAR = ElementByXPath("//small[contains(text(),'Soon')] | //p[contains(text(),'Back On')]");
        if (IsVisible(WillBeBackSoon_VAR))
        {
		Log("WillBeBackSoon message apper so - we Disable the script");	
        Disable(); 
        return 1;
        }

		
        //Let Faucet Collector continue.
        return base.DoInit();
    }
//======//
//DoInit
//======//



//==================//
//save Login Cookies 
//==================//
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//input[@name='address']") == null;
    }
//==================//
//save Login Cookies 
//==================//



//===========//
//BeforeLogin
//===========//
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }
//===========//
//BeforeLogin
//===========//	
	
	
	
//=======//
//DoLogin
//=======//
    public override int DoLogin()
    {
		
		//====//
		//LTC//
		//====//
        if (GetBoolSetting("FaucetLTC"))
        {
		//first go to LTC "home"
        GoToUrl("https://dogeforfree.info/litecoin/");
		
        var AddresBoxLTC = ElementByXPath("//input[@name='address']");
        if (!IsVisible(AddresBoxLTC))
        {
            return Fail("Addres box is not visible");
        }
        SetText(AddresBoxLTC, GetSetting("WalletAddressLTC"));
        Wait(1);
        var ButtonLoginLTC = ElementByXPath("//input[@value='Login']");
        if (!IsVisible(ButtonLoginLTC))
        {
            return Fail("Fail login , Button not found");
        }
        Click(ButtonLoginLTC);
		//===============//	
	    } //end login LTC

		
		//====//
		//doge//
		//====//
        if (GetBoolSetting("FaucetDoge"))
        {
		//first go to doge "home"
        GoToUrl("https://dogeforfree.info/");
		
        var AddresBoxDoge = ElementByXPath("//input[@name='address']");
        if (!IsVisible(AddresBoxDoge))
        {
            return Fail("Addres box is not visible");
        }
        SetText(AddresBoxDoge, GetSetting("WalletAddressDoge"));
        Wait(1);
        var ButtonLoginDoge = ElementByXPath("//input[@value='Login']");
        if (!IsVisible(ButtonLoginDoge))
        {
            return Fail("Fail login , Button not found");
        }
        Click(ButtonLoginDoge);
		//===============//
	    } //end login Doge
		
		
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }
//=======//
//DoLogin
//=======//


	
	
	//==========//
    //AfterLogin//
	//==========//
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }
	//==========//
    //AfterLogin//
	//==========//
	
	
	//==========//
    //GetFaucetWaitTime//
	//==========//
    public override int GetFaucetWaitTime()
    {
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }
	//==========//
    //GetFaucetWaitTime//
	//==========//
	
	
	
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

	
    public override int DoSolveCaptcha()
    {



        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

	
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

	
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }


	
	
	//==========//
    //DoSolveFaucet//
	//==========//
    public override int DoSolveFaucet()
    {
		//====//
		//LTC//
		//====//
        if (GetBoolSetting("FaucetLTC"))
        {
		//first go to LTC
        GoToUrl("https://dogeforfree.info/litecoin/");
		
		//call to SwitchCaptcha Function 
		SwitchCaptchaFunction();
		
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return result;
        }
        Wait(1);
        var ButtonClaim = ElementByXPath("//input[@id='anti_bot_submit']");
        if (!IsVisible(ButtonClaim))
        {
            return Fail("Button claim is not visible");
        }
        Click(ButtonClaim);
        Wait(1);
        var ShortLinkBypasser_ = new ShortLinkBypasser(this);
        bool cs=ShortLinkBypasser_.DoShortLink();
        if (cs)
        {
            //return GetWaitSetting();
        }
		
		} //end LTC
		
		
		//====//
		//doge//
		//====//
        if (GetBoolSetting("FaucetDoge"))
        {
		//first go to doge "home"
        GoToUrl("https://dogeforfree.info/");
		
		//call to SwitchCaptcha Function 
		SwitchCaptchaFunction();
		
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return result;
        }
        Wait(1);
        var ButtonClaim = ElementByXPath("//input[@id='anti_bot_submit']");
        if (!IsVisible(ButtonClaim))
        {
            return Fail("Button claim is not visible");
        }
        Click(ButtonClaim);
        Wait(1);
        var ShortLinkBypasser_ = new ShortLinkBypasser(this);
        bool cs=ShortLinkBypasser_.DoShortLink();
        if (cs)
        {
            return GetWaitSetting();
        }
		
            return GetWaitSetting();
		} //end DOGE
	
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
	//==========//
    //DoSolveFaucet//
	//==========//

	
	
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }

	
	
	    //ADFunction//
        private bool SwitchCaptchaFunction()
        {

            if (!GetBoolSetting("UseSolvemedia"))
            {
                var switchRecaptcha = ElementByXPath("//a[contains(text(),'Switch to reCaptcha')]");
                if (IsVisible(switchRecaptcha))
                {
                    Click(switchRecaptcha);
                }
            }
            else
            {
                var SwitchSolvemedia = ElementByXPath("//a[contains(text(),'Switch to SolveMedia')]");
                if (IsVisible(SwitchSolvemedia))
                {
                    Click(SwitchSolvemedia);
                }
            }

        return true;
        }
		//===========//

	
} //end class
