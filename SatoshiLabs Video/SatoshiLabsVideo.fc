using System;
using System.IO;
using FaucetCollector.Script;

public class SatoshiLabsScript : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://satoshilabs.net/")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                 new FaucetSetting(){Name="See",Type=EditorType.TextBox,Default="1",Display="Number of Views before close"},

                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "SatoshiLabs|More";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//center[contains(text(),'You received')]";
        FailXPath = "//center[contains(text(),'Wrong Captcha')]";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        if (Cleaned)
        {
            Cleaned = false;
            return GetWaitSetting();
        }
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[contains(text(),'Logout')]") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        var ButtonLoginPage = ElementByXPath("//a[contains(text(),'Login')]");
        if (IsVisible(ButtonLoginPage))
        {
            Click(ButtonLoginPage);
            Wait(1);
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        if (!Driver.Url.Contains("https://satoshilabs.net/login.php"))
        {
            GoToUrl("https://satoshilabs.net/login.php");
            Wait(1);
        }
        var userBox = ElementByXPath("//input[@name='username']");
        if (!IsVisible(userBox))
        {
            return Fail("Fail Login, User box not visible");
        }
        SetText(userBox, GetSetting("User"));
        var passBox = ElementByXPath("//input[@name='password']");
        if (!IsVisible(passBox))
        {
            return Fail("Fail login, Password Box not visible");
        }
        SetText(passBox, GetPassword("Pass"));
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solving captcha");
        }
        var button = ElementByXPath("//button[@name='login']");
        if (!IsVisible(button))
        {
            return Fail("Button login not visible");
        }
        Click(button);
        Wait(1);


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        var GoFaucetButton = ElementByXPath("//a[contains(text(),'Faucet')]");
        if (IsVisible(GoFaucetButton))
        {
            Click(GoFaucetButton);
        }
        Wait(1);
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
    

        //let Faucet Collector continue.
        return 0;
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    bool Cleaned = false;
    public override int DoSolveFaucet()
    {
        GoToUrl("https://satoshilabs.net/moretv.php");

        Wait();
        int Views;
        try
        {
            Views = Convert.ToInt32(GetSetting("See"));
        }
        catch (Exception)
        {
            Views = 1;
        }


        int Cont = 0;
        var GoVideo = ElementByXPath("//a[@class='btn btn-success']");
        if (!IsVisible(GoVideo))
        {
            return Fail("Go video not visible");
        }
        int NotFunction = 0;
        int NCaptchasWithoutClaims = 0;
        string Url_Moretv = GoVideo.GetAttribute("href");
        if (Url_Moretv == String.Empty)
        {
            return Fail("Fail getting Url");
        }
        try
        {
            while (Cont < Views)
            {
                if (Driver.Url.Contains("satoshilabs.net") || IsVisible(ElementByXPath("//body[@bgcolor='white']")) && NotFunction >= 14)
                {
                    Log("We are not in moretv site, or site has not correctly charged..... Going to the site");
                    if (!Driver.Url.Contains(Url_Moretv))
                    {
                        GoToUrl(Url_Moretv);
                    }
                    else
                    {
                        Driver.Navigate().Refresh();
                    }
                    NotFunction = 0;
                    Wait();
                }



                Wait(3);
                if (IsVisible(ElementByXPath("//div[@class='bold-red' and contains(text(),'Click on any image')]")))
                {
                    NotFunction = 0;
                    var articles = ElementsByXPath("//article//div//a");
                    DateTime t2 = DateTime.Now.AddSeconds(10);
                    while (articles.Count == 0)
                    {
                        articles = ElementsByXPath("//article//div//a");

                        if (DateTime.Now > t2)
                        {
                            break;
                        }
                        Wait();
                    }
                    if (articles.Count > 0)
                    {
                        Click(articles[0]);
                    }
                    else
                    {
                        CheckForPopups();
                        return Fail("Fail loading articles");
                    }
                }
                else
                {
                    NotFunction++;
                }
                bool IsFinished = false;
                while (!IsFinished)
                {
                    var Progress = ElementByXPath("//div[contains(text(),'Progress')]");
                    if (IsVisible(Progress))
                    {
                        Log(Progress.Text);

                    }
                    if (NotFunction >= 14 || IsVisible(ElementByXPath("//body[@bgcolor='white']")))
                    {
                        break;
                    }
                    var captcha = ElementByXPath("//img[contains(@src,'data:image/png;')]");
                    var solution = ElementByXPath("//input[@name='captcha_solution']");
                    if (IsVisible(captcha) && IsVisible(solution))
                    {
                        if (NCaptchasWithoutClaims > 21)
                        {
                            Log("Captcha Loop detected. Killing Script, trying to clean your data folder");
                            Driver.Manage().Cookies.DeleteAllCookies();
                            string DataFolder = Path.Combine(Directory.GetCurrentDirectory() + "data" + Name);
                            if (Directory.Exists(DataFolder))
                            {
                                Log("Trying delete data folder maybe you will see some error in the log");
                                try
                                {
                                    Driver.Close();
                                    Driver.Quit();
                                    Driver.Dispose();

                                    Directory.Delete(DataFolder, true);
                                    Cleaned = true;

                                }
                                catch (Exception)
                                {

                                }

                            }
                            else
                            {
                                Log("DataFolder not found");
                                Driver.Close();
                                int s = GetWaitSetting();
                                if (s > 0)
                                {
                                    return s;
                                }
                                else
                                {
                                    return 1;
                                }
                            }

                        }
                        NCaptchasWithoutClaims++;
                        NotFunction = 0;
                        DoSolveImageCaptcha(captcha, solution);
                        var buttonSubmit = ElementByXPath("//input[@value='Submit']");
                        if (IsVisible(buttonSubmit))
                        {
                            Click(buttonSubmit);
                            Wait();
                        }
                        if (IsVisible(ElementByXPath("//*[@class='captcha-wrong']")))
                        {

                            Log("Captcha incorrect trying again");
                            continue;

                        }


                    }

                    else
                    {
                        NotFunction++;
                    }
                    var Grecaptcha = ElementByXPath("//div[@class='g-recaptcha']");
                    if (IsVisible(Grecaptcha))
                    {
                        if (NCaptchasWithoutClaims > 21)
                        {
                            Log("Captcha Loop detected. Killing Script, trying to clean your data folder");
                            Driver.Manage().Cookies.DeleteAllCookies();
                            string DataFolder = Path.Combine(Directory.GetCurrentDirectory() + "data" + Name);
                            if (Directory.Exists(DataFolder))
                            {
                                Log("Trying delete data folder maybe you will see some error in the log");
                                try
                                {
                                    Driver.Close();
                                    Driver.Quit();
                                    Driver.Dispose();

                                    Directory.Delete(DataFolder, true);
                                    Cleaned = true;

                                }
                                catch (Exception)
                                {

                                }

                            }
                            else
                            {
                                Log("DataFolder not found");
                                Driver.Close();
                                int s = GetWaitSetting();
                                if (s > 0)
                                {
                                    return s;
                                }
                                else
                                {
                                    return 1;
                                }
                            }

                        }
                        NCaptchasWithoutClaims++;
                        NotFunction = 0;
                        var result = DoSolveCaptcha();
                        if (result > 0)
                        {
                            Log("Fail solving recaptcha");
                        }
                        var buttonSubmit = ElementByXPath("//input[@value='Submit']");
                        if (IsVisible(buttonSubmit))
                        {
                            Click(buttonSubmit);
                            Wait();
                        }
                        if (IsVisible(ElementByXPath("//*[@class='captcha-wrong']")))
                        {

                            Log("Captcha incorrect trying again");
                            continue;

                        }
                    }
                    else
                    {
                        NotFunction++;
                    }
                    if (IsVisible(ElementByXPath("//p[contains(text(),'Congrats! You just got paid!')]")))
                    {
                        NCaptchasWithoutClaims = 0;
                        NotFunction = 0;
                        var Congrats = ElementByXPath("//p[contains(text(),'Congrats! You just got paid!')]");
                        if (IsVisible(Congrats))
                        {
                            Log("Se ha producido una vista exitosa");
                            CheckFaucetResult();
                            var Close = ElementByXPath("//div[@class='modal is-active']//button[@class='delete']");
                            if (IsVisible(Close))
                            {
                                Click(Close);
                                Wait();
                            }

                        }
                        IsFinished = true;
                        break;
                    }
                    else
                    {
                        NotFunction++;
                    }

                    DateTime t1 = DateTime.Now.AddSeconds(10);
                    while (!IsVisible(ElementByXPath("//button[@title='Play Video']")))
                    {
                        if (t1 > DateTime.Now)
                        {
                            break;
                        }
                        Wait();

                    }
                    Wait();
                    var PlayVideo = ElementByXPath("//button[@title='Play Video']");
                    if (IsVisible(PlayVideo))
                    {
                        NotFunction = 0;
                        Click(PlayVideo);
                    }
                    else
                    {
                        NotFunction++;
                    }
                    var ButtonSucess = ElementByXPath("//button[@class='button is-success blinking-button is-medium']");
                    DateTime timeout = DateTime.Now.AddSeconds(20);
                    while (!IsVisible(ButtonSucess))
                    {
                        Wait();
                        ButtonSucess = ElementByXPath("//button[@class='button is-success blinking-button is-medium']");
                        if (DateTime.Now > timeout)
                        {
                            break;
                        }
                    }
                    if (IsVisible(ButtonSucess))
                    {
                        NotFunction = 0;
                        Click(ButtonSucess);
                    }
                    else
                    {
                        NotFunction++;
                    }
                    Wait();
                    var ex = ElementByXPath("//button[@class='button is-success blinking-button is-large show-popup headclass']");
                    if (IsVisible(ex))
                    {
                        NotFunction = 0;
                        Click(ex);
                    }
                    else
                    {
                        NotFunction++;
                    }
                    Wait();
                    if (IsVisible(ElementByXPath("//p[contains(text(),'Congrats! You just got paid!')]")))
                    {
                        NCaptchasWithoutClaims = 0;
                        NotFunction = 0;
                        var Congrats = ElementByXPath("//p[contains(text(),'Congrats! You just got paid!')]");
                        if (IsVisible(Congrats))
                        {
                            Log("Se ha producido una vista exitosa");
                            CheckFaucetResult();
                            var Close = ElementByXPath("//div[@class='modal is-active']//button[@class='delete']");
                            if (IsVisible(Close))
                            {
                                Click(Close);
                                Wait();
                            }

                        }
                        IsFinished = true;
                    }
                    else
                    {
                        NotFunction++;
                    }

                }
                Cont++;
            }

        }
        finally
        {

            CheckForPopupsEnabled = true;
            CheckForPopups();
            Driver.SwitchTo().Window(Driver.WindowHandles[0]);
        }

        if (!Cleaned)
        {
            return GetWaitSetting();
        }
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}
