using System;
using FaucetCollector.Script;
using OpenQA.Selenium.Interactions;
//css_inc RecaptchaUtilities
public class FaucetWow : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://wowfaucet.com/")
            {
                new FaucetSetting(){Name="User",Display="Username",Type=EditorType.TextBox,Required=true},
                new FaucetSetting(){Name="Pass",Display="Password",Type=EditorType.Password,Required=true},
                new FaucetSetting(){Name="UseSolvemedia",Display="Use Solvemedia",Type=EditorType.CheckBox,Default=true},
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Faucet|WoW";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//div[@class='success']";
        FailXPath = "//div[@class='error']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        if (CheckIfCloudFlareRecaptchaIsHere())
        {
            Log("CloudFlare is here trying to bypass");
            var result = DoSolveCaptcha();
            Wait(1);
            var solver = new RecaptchaUtility(this);
            bool solved = solver.DoSolve();

        }

        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
		bool s=IsVisible(ElementByXPath("//a[@class='btn wow' and @href='/logout']"));
		if(!s){   Driver.Manage().Cookies.DeleteAllCookies();}
        return s;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        var login_box = ElementByXPath("//input[@id='username']");
        if (!IsVisible(login_box))
        {
            return Fail("Login box not visible");
        }
        SetText(login_box, GetSetting("User"));
        Wait();
        var login_box_2 = ElementByXPath("//input[@id='password']");
        if (!IsVisible(login_box_2))
        {
            return Fail("Login password box not visible");
        }
        SetText(login_box_2, GetPassword("Pass"));
        Wait();
        var button = ElementByXPath("//button[@type='submit']");
        if (!IsVisible(button))
        {
            return Fail("Fail login - Button not visible");
        }
        Click(button);
        Wait();
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        if (!Driver.Url.Contains("https://wowfaucet.com/faucet/claim"))
        {
            GoToUrl("https://wowfaucet.com/faucet/claim");
        }
        var counter = ElementByXPath("//span[@id='timer-claim']");
        if (IsVisible(counter))
        {
            try
            {
                int min = Convert.ToInt32(counter.Text.Split(':')[0])*60;
                int seg = Convert.ToInt32(counter.Text.Split(':')[1]);
                return min + seg;

            }
            catch (Exception)
            {
                return 900;
            }
        }
        //let Faucet Collector continue.
        return base.GetFaucetWaitTime();
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        if (!CheckIfCloudFlareRecaptchaIsHere())
        {
            var form_s = ElementByXPath("//select[@id='form_captcha']");
            if (GetBoolSetting("UseSolvemedia"))
            {
                SelectOptionByValue(form_s, "solve");
            }
            else
            {
                SelectOptionByValue(form_s, "recap");

            }
            Wait();
        }

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public override int DoSolveFaucet()
    {
        if (!Driver.Url.Contains("https://wowfaucet.com/faucet/claim"))
        {
            GoToUrl("https://wowfaucet.com/faucet/claim");
        }
        Wait(4);
       
        Wait(2, 3);
       var slider = ElementByXPath("//div[@id='captchmeslider']");
        if (IsVisible(slider))
        {
            Actions move = new Actions(Driver).DragAndDropToOffset(slider, 400, 0);
            move.Perform();
            Wait(5, 6);
        }
        var result = DoSolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solve captcha");
        }
        Wait();
        var button_C = ElementByXPath("//button[@id='form_ClaimNow']");
        DateTime t1 = DateTime.Now.AddSeconds(30);
        while (!IsVisible(button_C))
        {
            button_C = ElementByXPath("//button[@id='form_ClaimNow']");
            if (DateTime.Now > t1)
            {
                break;
            
            }
            Wait();
        }
        Click(button_C);
        Wait();

        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }

    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }
    public bool CheckIfCloudFlareRecaptchaIsHere()
    {
        bool IsHere = ElementByXPath("//span[@data-translate='complete_sec_check']") != null;
        return IsHere;

    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
}

