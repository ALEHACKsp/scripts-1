using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using FaucetCollector.Script;
using Tesseract;
using OpenQA.Selenium;

public class faucetcrypto : FaucetScript
{
    /// <summary>
    /// List of Settings that will be shown in the bot when selecting this Faucet in the bot.
    /// You can get the value the user entered with the methods: GetSetting("[Name of the FaucetSetting]"), GetBoolSetting and GetDateTimeSetting
    /// You can also create a new setting value using SetSetting("[Name you want to use]", "value")
    /// </summary>
    public override FaucetSettings Settings
    {
        get
        {
            return new FaucetSettings("https://www.faucetcrypto.com")
            {
                new FaucetSetting()
                {
                    Name="User",Display="EmailAddress",Type=EditorType.TextBox,Required=true,
                },
                 new FaucetSetting()
                {
                    Name="Pass",Display="Password",Type=EditorType.Password,Required=true,
                },
                 new FaucetSetting()
                 {
                     Name="Coin",Display="Coin",Type=EditorType.ComboBox,Items=new List<string>{"zec","nbr","mkt","pura","pivx","bcn","grs","dgb","sys","pink","strat","mnx","rdd","bch","blk","btc","btx","dash","doge","eth","ltc","pot","ppc","xpm"},
                     Default="btc",
                     
                 }
                //insert user settings here
                //new FaucetSetting { 
                //    Name = "Name of your setting", 
                //    Display = "Display shown in Faucet Collector", 
                //    Type = EditorType.TextBox | EditorType.Password | EditorType.CheckBox | EditorType.Wallet | EditorType.Numeric | EditorType.ComboBox | EditorType.CheckComboBox, 
                //    Required = true | false, 
                //    Default = "Optionally a default value" | true | false | null.
                //    Items = new List<string> { "item1", "item2" } (only valid for ComboBox or CheckComboBox)
                //} 
            };
        }
    }

    /// <summary>
    /// This method gets called when the faucet is enabled and the GO button is clicked
    /// </summary>
    public override void Start()
    {
        //Title that shows in the browser. Is used to identify and close popup windows
        Title = "Faucet Crypto|paid";

        //After we did try to claim on the faucet we search for these elements to determine if it was a success or a fail
        SuccessXPath = "//span[@class='text-accent']";
        FailXPath = "//div[@class='toasssst-message']";

        //Let Faucet Collector start up everything
        base.Start();
    }

    /// <summary>
    /// This is the first method to run after the browser is opened and the first page is loaded.
    /// </summary>
    public override int DoInit()
    {
        //Let Faucet Collector continue.
        return base.DoInit();
    }

    /// <summary>
    /// This method gets called after the Start method, here you need to return if we are logged in or not.
    /// If you return false then it will call the BeforeLogin, Login and AfterLogin methods so you can login.
    /// After those Login methods are called it will call this IsLoggedIn method again to see if the login did succeed.
    /// If you return true Faucet Collector will store all cookies so it will probably be already logged in on the next attempt.
    /// </summary>
    public override bool IsLoggedIn()
    {
        //In here we can check for the presence of an element that is only present when you are logged in.
        //In this case we check for en element with the class "loggedIn"
        return ElementByXPath("//a[@href='https://www.faucetcrypto.com/auth/logout']") != null;
    }

    /// <summary>
    /// This method gets called if IsLoggedIn returned false, right before the DoLogin method is called.
    /// </summary>
    public override int BeforeLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeLogin();
    }

    /// <summary>
    /// This method gets called after BeforeLogin, but only if IsLoggedIn returned false.
    /// It can be used to actually login the user/enter wallet details in the faucet
    /// </summary>
    /// <returns></returns>
    public override int DoLogin()
    {
        GoToUrl("https://www.faucetcrypto.com/auth/login");
        Wait();
        var userbox = ElementByXPath("//input[@type='text']");
        if (IsVisible(userbox))
        {
            SetText(userbox, GetSetting("User"));
        }
        else
        {
            return Fail("Userbox no visible");
        }
        var passbox = ElementByXPath("//input[@type='password']");
        if (IsVisible(passbox))
        {
            SetText(passbox, GetPassword("Pass"));
        }
        else
        {
            return Fail("Passbox no visible");
        }
        Wait();
        var result = SolveCaptcha();
        if (result > 0)
        {
            return Fail("Fail solve captcha");
        }
        Wait(2, 4);
        ExecuteScript("LoginSubmit();");
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoLogin();
    }

    /// <summary>
    /// This method gets called after the DoLogin method.
    /// </summary>
    public override int AfterLogin()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterLogin();
    }

    /// <summary>
    /// This method gets called after the login methods are successful, so we are logged into the faucet.
    /// If the faucet is not yet ready to claim you should return a TimeStamp value to return how long it takes before the Faucet claim can be done.
    /// This is used to pause the script while the faucet its timer runs out.
    /// Return the number of seconds the bot should wait.
    /// </summary>
    public override int GetFaucetWaitTime()
    {
        if (cs)
        {
            return 900;
        }

        //let Faucet Collector continue.
        return 0;
    }

    /// <summary>
    /// This method is called right before a captcha will be solved. 
    /// If you call SolveCaptcha() in other methods it will start this flow and tries to solve the captcha on the page.
    /// </summary>
    public override int BeforeSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after BeforeSolveCaptcha and it does the actual captcha solving
    /// It will automatically try to see if there is a SolveMedia captcha active or a reCAPTCHA active. 
    /// If it finds either one it will then use the selected method on the Captcha tab of FaucetCollector to solve the Captcha.
    /// </summary>
    public override int DoSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveCaptcha();
    }

    /// <summary>
    /// This method will get called after DoSolveCaptcha returned it was a success.
    /// </summary>
    /// <returns></returns>
    public override int AfterSolveCaptcha()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveCaptcha();
    }

    /// <summary>
    /// This method is called right before we attempt to claim on the faucet. So we are logged in and good to go.
    /// Next methods that will be called are DoSolveFaucet, AfterSolveFaucet and CheckFaucetResult.
    /// </summary>
    public override int BeforeSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.BeforeSolveCaptcha();
    }

    /// <summary>
    /// This method gets called after the BeforeSolveFaucet. You can do the actual claiming of the faucet in here.
    /// </summary>
    /// <returns></returns>
    public static bool cs = false;
    public override int DoSolveFaucet()
    {
        cs = false;
        int[] img_r = new int[3];
        var coin = GetSetting("Coin");
        Wait(2, 4);
        bool pass = false;
        var cont = 0;
        DateTime start = DateTime.Now.AddMinutes(30);
        do {
            try
            {
               
                
                    if (DateTime.Now > start)
                    {
                        break;
                    }
                    if (!Driver.Url.Contains("www.faucetcrypto.com/faucet/claim/" + coin))
                    {
                        GoToUrl("https://www.faucetcrypto.com/faucet/claim/" + coin);
                    }
                    Wait(2, 3);
                if (IsVisible(ElementByXPath("//p[@class='alert alert-info alert-custom']/child::img")))
                {
                    if (cont == 0)
                    {
                        try
                        {
                            Ocr_on_error = false;
                            var element_p = ElementByXPath("//p[@class='alert alert-info alert-custom']/child::img");
                            string base_64p = element_p.GetAttribute("src");
                            Bitmap main_image = Base64ToImage(base_64p);
                            main_image = ProcessImage(main_image);
                            var element1 = ElementByXPath("/html[1]/body[1]/div[2]/section[1]/div[1]/div[4]/div[1]/div[1]/div[1]/a[1]/img[1]");
                            string base_641 = element1.GetAttribute("src");
                            Bitmap image1 = Base64ToImage(base_641);
                            image1 = ProcessImage(image1);
                            var element2 = ElementByXPath("/html[1]/body[1]/div[2]/section[1]/div[1]/div[4]/div[1]/div[2]/div[1]/a[1]/img[1]");
                            string base_642 = element2.GetAttribute("src");
                            Bitmap image2 = Base64ToImage(base_642);
                            image2 = ProcessImage(image2);
                            var element3 = ElementByXPath("/html[1]/body[1]/div[2]/section[1]/div[1]/div[4]/div[1]/div[3]/div[1]/a[1]/img[1]");
                            string base_643 = element3.GetAttribute("src");
                            Bitmap image3 = Base64ToImage(base_643);
                            image3 = ProcessImage(image3);
                            Bitmap[] icons = new Bitmap[3];
                            icons = Separator(main_image);
                            string[,] result_ocr = new string[3, 2];
                            result_ocr[0, 0] = DoOcr(icons[0]);
                            result_ocr[1, 0] = DoOcr(icons[1]);
                            result_ocr[2, 0] = DoOcr(icons[2]);
                            result_ocr[0, 0] = DoOcr(image1);
                            result_ocr[0, 1] = DoOcr(image2);
                            result_ocr[0, 2] = DoOcr(image3);
                            if (Ocr_on_error)
                            {
                                for (int i = 0; i < 3; i++)
                                {
                                    bool finish = false;
                                    while (!finish)
                                    {
                                        int ale = Random(1, 4);
                                        bool encs = false;
                                        for (int z = 0; z < 3; z++)
                                        {
                                            if (img_r[z] == ale)
                                            {
                                                encs = true;
                                            }
                                        }
                                        if (encs)
                                        {
                                            finish = false;
                                        }
                                        else
                                        {
                                            finish = true;
                                            img_r[i] = ale;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                img_r = getResultOcr(result_ocr);
                            }
                        }
                        catch (Exception)
                        {
                            for (int i = 0; i < 3; i++)
                            {
                                bool finish = false;
                                while (!finish)
                                {
                                    int ale = Random(1, 4);
                                    bool encs = false;
                                    for (int z = 0; z < 3; z++)
                                    {
                                        if (img_r[z] == ale)
                                        {
                                            encs = true;
                                        }
                                    }
                                    if (encs)
                                    {
                                        finish = false;
                                    }
                                    else
                                    {
                                        finish = true;
                                        img_r[i] = ale;
                                    }
                                }
                            }
                        }
                    }
                }
             
               
                var icon1 = ElementByXPath("/html[1]/body[1]/div[2]/section[1]/div[1]/div[4]/div[1]/div[1]/div[1]/a[1]/img[1]");
                var icon2 = ElementByXPath("/html[1]/body[1]/div[2]/section[1]/div[1]/div[4]/div[1]/div[2]/div[1]/a[1]/img[1]");
                var icon3 = ElementByXPath("/html[1]/body[1]/div[2]/section[1]/div[1]/div[4]/div[1]/div[3]/div[1]/a[1]/img[1]");
                if (IsVisible(icon1) && IsVisible(icon2) && IsVisible(icon3))
                {
                    for (int i = 0; i < 3; i++)
                    {
                        if (img_r[i] == 1)
                        {
                            Click(icon1);
                        }
                        if (img_r[i] == 2)
                        {
                            Click(icon2);
                        }
                        if (img_r[i] == 3)
                        {
                            Click(icon3);
                        }
                        Wait(1);
                    }
                }
                Wait();
                var button = ElementByXPath("//button[@id='claim_reward']");
                Click(button);
                Wait(2, 4);
                if (Driver.Url.Contains("faucetcrypto.com"))
                {
                    pass = false;
                    Driver.Navigate().Refresh();
                }
                else
                {
                    pass = true;
                }
                if (cont >= 7)
                {
                    cont = 0;
                }
                cont++;
            }
            catch (Exception)
            {

            }
        } while (!pass);

        doShortLink("faucetcrypto");
        Wait(4, 6);
        cs = true;


        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.DoSolveFaucet();
    }
    public bool doShortLink(string url)
    {

        bool iscorrect = true;
        DateTime t1;
        int cont = 0;
        bool bypassed = false;
        string url_a = Driver.Url;

        do
        {
            Title += "|" + Driver.Title;
            Wait();
            try
            {
                int cont2 = 0;
                while (true)
                {
                    Driver.SwitchTo().Frame(cont2);
                    var b_deny = ElementById("B1");
                    if (IsVisible(b_deny))
                    {
                        Click(b_deny);
                        Wait(1);
                    }

                    cont2++;
                    Driver.SwitchTo().DefaultContent();
                }
            }
            catch (Exception)
            {
                Driver.SwitchTo().DefaultContent();
            }
            Wait();
            if (Driver.Url.Contains("dwindly.io"))
            {
                Wait();
                var but = Driver.FindElement(By.Id("btd1"));
                Click(but);
                Wait(12);
                var but2 = Driver.FindElement(By.Id("btd"));

                Click(but);

            }
            else if (Driver.Url.Contains("faucetcrypto.com/faucet/short/"))
            {

                while(IsVisible(ElementByXPath("//a[@class='btn btn-accent btn-block disabled waves-effect waves-light']")) && !IsVisible(ElementByXPath("//a[@class='btn btn-accent btn-block waves-effect waves-light']")))
                {
                    Wait();
                }
                Wait();
                var button = ElementByXPath("//a[@class='btn btn-accent btn-block waves-effect waves-light']");
                Click(button);
            }
            else if (Driver.Url.Contains("linkshrink.net"))
            {
                Wait();
                var button = ElementByXPath("//a[@id='btd']");
                while (!button.Enabled)
                {
                    Wait();
                }
                Click(button);
            }
            else if (Driver.Url.Contains("zap.in"))
            {
                ExecuteScript("var v = document.getElementsByClassName('btn btn-primary'); v[0].click();");
                var result = SolveCaptcha();

                Wait(5);
                ExecuteScript("var v = document.getElementsByClassName('btn btn-primary'); v[1].click();");


            }
            else
            {

                bool clicked = false;
                Wait();
                var button = ElementById("invisibleCaptchaShortlink");
                if (IsVisible(button))
                {
                    var img = ElementById("adcopy-outer-captchaShortlink");
                    var text = ElementById("adcopy_response-captchaShortlink");
                    if (img != null && text != null)
                    {
                        var result = DoSolveImageCaptcha(img, text);
                    }
                    else
                    {
                        var result = SolveCaptcha();
                        try
                        {
                            ExecuteScript("try{window.grecaptcha.getResponse = function(nr) { return '" + Context.CaptchaResult.Result + "'; }}catch(Exception){};");
                        }
                        catch (Exception)
                        {

                        }
                    }
                    Wait(2, 3);
                    button = ElementById("invisibleCaptchaShortlink");
                    if (button.Enabled == true)
                    {
                        button = ElementById("invisibleCaptchaShortlink");
                        Click(button);
                        clicked = true;
                        Wait();
                    }
                    else
                    {
                        ExecuteScript("var but=document.getElementById(\"invisibleCaptchaShortlink\");but.outerHTML=but.outerHTML.replace('disabled=\"disabled\"','');");
                        Wait(3);
                        button = ElementById("invisibleCaptchaShortlink");
                        Click(button);
                        clicked = true;


                    }
                }
                else
                {
                    var button_2 = Driver.FindElements(By.TagName("button"));
                    foreach (var _button_2 in button_2)
                    {
                        if (_button_2.Text.ToLower().Contains("continue"))
                        {
                            if (_button_2.Enabled == true)
                            {
                                Click(_button_2);
                                clicked = true;
                                Wait();
                                break;
                            }
                            else
                            {
                                ExecuteScript("var but=document.getElementsByTagName('button');for(i=0;i<but.length;i++){if(but[i].outerHTML.search('continue')!=-1){but[i].outerHTML=but[i].outerHTML.replace('disabled=\"disabled\"','');break;}}");
                                Wait(3);
                                Click(_button_2);
                                clicked = true;
                                break;
                            }
                        }
                    }

                }
                if (!clicked)
                {
                    var but = ElementById("btn1");
                    if (IsVisible(but))
                    {
                        Click(but);
                        Wait();
                        var img = ElementById("adcopy-outer-captchaShortlink");
                        var text = ElementById("adcopy_response-captchaShortlink");
                        if (img != null && text != null)
                        {
                            var result = DoSolveImageCaptcha(img, text);
                        }
                        else
                        {
                            var result = SolveCaptcha();
                            try
                            {
                                ExecuteScript("try{window.grecaptcha.getResponse = function(nr) { return '" + Context.CaptchaResult.Result + "'; }}catch(Exception){};");
                            }
                            catch (Exception)
                            {

                            }
                        }
                        Wait();
                        var but1 = ElementByXPath("//a[@class='btn btn-primary']");
                        Wait();
                        Click(but1);
                        var button_p = ElementByXPath("//button[@id='btn2']");
                        t1 = DateTime.Now.AddMinutes(1);
                        while (!button_p.Enabled)
                        {
                            button_p = ElementByXPath("//button[@id='btn2']");
                            Wait();
                            if (DateTime.Now > t1)
                            {
                                break;
                            }
                        }
                        Click(button_p);
                        clicked = true;
                        Wait();

                    }

                }
                if (!clicked)
                {
                    Wait();
                    if (IsVisible(ElementByXPath("//div[@id='pause']")) || IsVisible(ElementById("btd1")))
                    {


                        var but = ElementById("btd1");
                        t1 = DateTime.Now.AddMinutes(1);
                        while (!IsVisible(but))
                        {
                            Wait();
                            but = ElementById("btd1");
                            if (DateTime.Now > t1)
                            {
                                break;
                            }
                        }

                        Click(but);
                        clicked = true;

                    }
                }

                ///// CLICK FIRST BUTTON FINISHED
                if (clicked)
                {
                    bool clicked_2 = false;
                    var button_skip = ElementByXPath("//a[@class='btn btn-success btn-lg get-link']");
                    if (IsVisible(ElementByXPath("//a[@class='btn btn-success btn-lg get-link disabled']")) || IsVisible(ElementByXPath("//a[@class='btn btn-success btn-lg get-link']")))
                    {
                        t1 = DateTime.Now.AddMinutes(1);
                        while (button_skip == null)
                        {
                            Wait();
                            button_skip = ElementByXPath("//a[@class='btn btn-success btn-lg get-link']");
                            if (DateTime.Now > t1)
                            {
                                break;
                            }
                        }
                        Click(button_skip);
                        clicked_2 = true;
                    }

                    if (!clicked_2)
                    {
                        if (IsVisible(ElementByXPath("//div[@class='skip-ad']")) || IsVisible(ElementByXPath("//a[@class='btn']")))
                        {
                            var button_skip_a = ElementByXPath("//a[@class='btn']");
                            t1 = DateTime.Now.AddMinutes(1);
                            while (button_skip_a == null)
                            {
                                Wait();
                                button_skip_a = ElementByXPath("//a[@class='btn']");
                                if (DateTime.Now > t1)
                                {
                                    break;
                                }
                            }
                            Click(button_skip_a);
                            clicked_2 = true;
                        }

                    }
                    if (!clicked_2)
                    {
                        if (IsVisible(ElementByXPath("//a[@class='btn btn-success get-link disabled']")) || IsVisible(ElementByXPath("//a[@class='btn btn-success get-link']")))
                        {
                            var button_skip_a = ElementByXPath("//a[@class='btn btn-success get-link']");
                            t1 = DateTime.Now.AddMinutes(1);
                            while (button_skip_a == null)
                            {
                                Wait();
                                button_skip_a = ElementByXPath("//a[@class='btn btn-success get-link']");
                                if (DateTime.Now > t1)
                                {
                                    break;
                                }
                            }
                            Click(button_skip_a);
                            clicked_2 = true;
                        }
                    }
                    if (!clicked_2)
                    {
                        if (IsVisible(ElementByXPath("//a[@class='btn btn-primary btn-goo get-link disabled']")) || IsVisible(ElementByXPath("//a[@class='btn btn-primary btn-goo get-link']")))
                        {
                            var button_skip_a = ElementByXPath("//a[@class='btn btn-primary btn-goo get-link']");
                            t1 = DateTime.Now;
                            while (!IsVisible(button_skip_a))
                            {
                                Wait();
                                button_skip_a = ElementByXPath("//a[@class='btn btn-primary btn-goo get-link']");
                                if (DateTime.Now > t1)
                                {
                                    break;
                                }
                            }
                            try
                            {
                                button_skip_a.Click();
                                try
                                {
                                    Driver.SwitchTo().Alert().Accept();
                                }
                                catch (Exception)
                                {

                                }
                            }
                            catch (Exception)
                            {
                                Click(button_skip_a);
                            }
                            clicked_2 = true;
                        }
                    }
                    if (!clicked_2)
                    {
                        if (ElementByXPath("//a[@id='btn2']") != null)
                        {
                            var button_skip_a = ElementByXPath("//a[@id='btn2']");
                            t1 = DateTime.Now.AddMinutes(1);
                            while (!button_skip_a.Enabled)
                            {
                                Wait();
                                button_skip_a = ElementByXPath("//a[@id='btn2']");
                                if (DateTime.Now > t1)
                                {
                                    break;
                                }
                            }
                            Click(button_skip_a);
                            clicked_2 = true;
                        }
                    }
                    if (!clicked_2)
                    {
                        if (IsVisible(ElementByXPath("//a[@class='getlinkbtn get-link disabled']")) || IsVisible(ElementByXPath("/a[@class='getlinkbtn get-link']")))
                        {
                            var button_skip_a = ElementByXPath("/a[@class='getlinkbtn get-link']");
                            while (button_skip_a == null)
                            {
                                Wait();
                                button_skip_a = ElementByXPath("/a[@class='getlinkbtn get-link']");
                            }
                            Click(button_skip_a);
                            clicked_2 = true;

                        }
                    }

                }
            }
            try
            {
                Driver.SwitchTo().Alert().Accept();
            }
            catch (Exception)
            {

            }

            if (Driver.Url.Contains(url))
            {
                bypassed = true;

                Wait(3, 4);
            }
            else
            {
                bypassed = false;
                if (Driver.Url.Contains(url_a))
                {
                    Driver.Navigate().Refresh();

                }
                else
                {
                    GoToUrl(url_a);
                }

            }
            if (cont >= 3)
            {
                if (Driver.Url.Contains(url))
                {
                    iscorrect = true;
                }
                else
                {
                    iscorrect = false;
                }

                break;
            }
            cont++;

        } while (!bypassed);
        return iscorrect;


    }
    public static bool Ocr_on_error = false;
    /// <summary>
    /// This method will get called after the DoSolveFaucet is completed and returned it was a success.
    /// For example you can wait for a processing popup to go away until actual faucet claim result is on the page.
    /// </summary>
    public override int AfterSolveFaucet()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.AfterSolveFaucet();
    }

    /// <summary>
    /// This method gets called in the end after the BeforeSolveFaucet/DoSolveFaucet and AfterSolveFaucet methods were done.
    /// The base.CheckFaucetResult will try to find a visible element on the page using the XPath from SuccessXPath and FailXPath (see the Start method)
    /// These properties should contain XPath expressions to find certain elements on the page.
    /// For example if it finds one of the elements from the SuccessXPath, and it is visible, then it will flag the claim attempt as a success.
    /// Or if it finds one of the elements from the FailXPath, and it is visible, then it will flag the claim attempt as a failure.
    /// </summary>
    public override int CheckFaucetResult()
    {
        //This faucet has nothing to do here. We will let Faucet Collector handle it.
        return base.CheckFaucetResult();
    }
    private int[] getResultOcr(string[,] result)
    {
        int[] img_r = new int[3];
        bool[] used = new bool[3];
        for (int i = 0; i < 3; i++)
        {
            img_r[i] = 0;
            used[i] = false;
        }
        if ((result[0, 0].ToLower().Contains("x") && result[0, 0].ToLower().Contains("x") && result[1, 0].Contains("x") && result[2, 0].ToLower().Contains("-") && result[0, 0].Contains("-") && result[1, 0].Contains("-")) || ((result[0, 1].ToLower().Contains("x") && result[1, 1].ToLower().Contains("x") && result[2, 1].Contains("x") && result[0, 1].ToLower().Contains("o") && result[1, 1].Contains("o") && result[2, 1].Contains("o"))))
        {
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 2; j++)
                {
                    result[i, j] = result[i, j].Replace("o", "-").Replace("+", "X");
                }
            }

            for (int i = 0; i < 3; i++)
            {
                int cont_act = 0;
                for (int j = 0; j < 3; j++)
                {
                    if (used[j])
                    {
                        continue;
                    }
                    int cont = 0;
                    for (int z = 0; z < result[j, 1].Length; z++)
                    {
                        if (result[i, 0].ToLower().Contains(result[j, 1][z].ToString()))
                        {
                            cont++;
                        }
                    }
                    if (cont > cont_act)
                    {
                        img_r[i] = j;
                        cont_act = cont;
                    }


                }
                used[img_r[i]] = true;
            }
        }
        else
        {

            for (int i = 0; i < 3; i++)
            {
                int cont_act = 0;
                for (int j = 0; j < 3; j++)
                {
                    if (used[j])
                    {
                        continue;
                    }
                    int cont = 0;
                    for (int z = 0; z < result[j, 1].Length; z++)
                    {
                        if (result[i, 0].ToLower().Contains(result[j, 1][z].ToString()))
                        {
                            cont++;
                        }
                    }
                    if (cont > cont_act)
                    {
                        img_r[i] = j;
                        cont_act = cont;
                    }


                }
                used[img_r[i]] = true;
            }

        }
        bool enc = false;
        for (int i = 0; i < 3; i++)
        {
            if (img_r[i] == 0)
            {
                enc = true;
            }
        }
        if (enc)
        {
            for (int i = 0; i < 3; i++)
            {
                bool finish = false;
                while (!finish)
                {
                    int ale = Random(1, 4);
                    bool encs = false;
                    for (int z = 0; z < 3; z++)
                    {
                        if (img_r[z] == ale)
                        {
                            encs = true;
                        }
                    }
                    if (encs)
                    {
                        finish = false;
                    }
                    else
                    {
                        finish = true;
                        img_r[i] = ale;
                    }
                }
            }
        }
        return img_r;


    }
    private int RomanToArabic(string roman)
    {
        // Initialize the letter map.
        try
        {
            var CharValues = new Dictionary<char, int>();
            CharValues.Add('I', 1);
            CharValues.Add('V', 5);
            CharValues.Add('X', 10);
            CharValues.Add('L', 50);
            CharValues.Add('C', 100);
            CharValues.Add('D', 500);
            CharValues.Add('M', 1000);

            if (roman.Length == 0) return 0;
            roman = roman.ToUpper();

            if (roman[0] == '(')
            {

                int pos = roman.LastIndexOf(')');


                string part1 = roman.Substring(1, pos - 1);
                string part2 = roman.Substring(pos + 1);
                return 1000 * RomanToArabic(part1) + RomanToArabic(part2);
            }


            int total = 0;
            int last_value = 0;
            for (int i = roman.Length - 1; i >= 0; i--)
            {
                int new_value = CharValues[roman[i]];


                if (new_value < last_value)
                    total -= new_value;
                else
                {
                    total += new_value;
                    last_value = new_value;
                }
            }


            return total;
        }
        catch (Exception)
        {
            return 0;
        }
    }
    private string DoOcr(Bitmap image)
    {
        try
        {

            var ocr = new TesseractEngine(@"Tesseract-OCR\tessdata", "eng", EngineMode.TesseractAndCube);

            var result = ocr.Process(image);

            return result.GetText();
        }
        catch (Exception)
        {
            Ocr_on_error = true;
            return "";
        }
    }
    private Bitmap[] Separator(Bitmap cap)
    {
        try
        {
            int[] pixels_i = new int[3];
            int[] pixels_f = new int[3];

            bool[] imagen = new bool[cap.Width];
            for (int x = 0; x < cap.Width; x++)
            {
                int contador2 = 0;
                for (int y = 0; y < cap.Height; y++)
                {
                    if (cap.GetPixel(x, y) != cap.GetPixel(0, 0))
                    {
                        contador2++;
                    }
                }
                if (contador2 >= 2)
                {
                    imagen[x] = true;
                }
                else
                {
                    imagen[x] = false;
                }

            }
            // imagen 1
            int cord_x = 0;
            bool init = false;

            int counter = 0;

            for (int x = 0; x < imagen.Length; x++)
            {
                if (x < imagen.Length - 4)
                {

                    if (imagen[x] == true && imagen[x + 1] == true && imagen[x + 2] == true && imagen[x + 3] == true && imagen[x + 4] == true && init == false)
                    {
                        init = true;
                        pixels_i[0] = cord_x;
                    }
                    if (imagen[x] == false && imagen[x + 1] == false && imagen[x + 2] == false && init == true)
                    {
                        init = false;
                        pixels_f[0] = cord_x;
                        break;
                    }
                    if (init == true)
                    {
                        counter++;
                    }
                    cord_x++;
                }
            }



            counter = 0;
            for (int x = cord_x; x < imagen.Length; x++)
            {
                if (x < imagen.Length - 4)
                {

                    if (imagen[x] == true && imagen[x + 1] == true && imagen[x + 2] == true && imagen[x + 3] == true && imagen[x + 4] == true && init == false)
                    {
                        init = true;
                        pixels_i[1] = cord_x;
                    }
                    if (imagen[x] == false && imagen[x + 1] == false && imagen[x + 2] == false && init == true)
                    {
                        init = false;
                        pixels_f[1] = cord_x;
                        break;
                    }
                    if (init == true)
                    {
                        counter++;
                    }
                    cord_x++;
                }
            }


            counter = 0;
            for (int x = cord_x; x < imagen.Length; x++)
            {
                if (x < imagen.Length - 4)
                {

                    if (imagen[x] == true && imagen[x + 1] == true && imagen[x + 2] == true && imagen[x + 3] == true && imagen[x + 4] == true && init == false)
                    {
                        init = true;
                        pixels_i[2] = cord_x;
                    }
                    if (imagen[x] == false && imagen[x + 1] == false && imagen[x + 2] == false && init == true)
                    {
                        init = false;
                        pixels_f[2] = cord_x;
                        break;
                    }
                    if (init == true)
                    {
                        counter++;
                    }
                    cord_x++;
                }
            }

            Bitmap bmp_icon1 = cap;
            Bitmap[] img = new Bitmap[3];
            Rectangle cropRect_icon1 = new Rectangle(pixels_i[0], 0, pixels_f[0] - pixels_i[0] - 3, 24);
            bmp_icon1 = bmp_icon1.Clone(cropRect_icon1, bmp_icon1.PixelFormat);
            
            Bitmap bmp_icon2 = cap;
            Rectangle cropRect_icon2 = new Rectangle(pixels_i[1], 0, pixels_f[1] - pixels_i[1] - 3, 24);
            bmp_icon2 = bmp_icon2.Clone(cropRect_icon2, bmp_icon2.PixelFormat);

            Bitmap bmp_icon3 = cap;
            Rectangle cropRect_icon3 = new Rectangle(pixels_i[2], 0, pixels_f[2] - pixels_i[2] - 3, 24);
            bmp_icon3 = bmp_icon3.Clone(cropRect_icon3, bmp_icon3.PixelFormat);
           
            img[0] = bmp_icon1;
            img[1] = bmp_icon2;
            img[3] = bmp_icon3;
            return img;
        }
        catch (Exception)
        {
            Ocr_on_error = true;
            Bitmap[] img = new Bitmap[3];
            return img;
        }


    }
    private Bitmap ProcessImage(Bitmap image)
    {
        try
        {
            bool[,] pixels = new bool[image.Width, image.Height];
            Color princ = image.GetPixel(0, 0);
            //IDENTIFY SIMILAR PIXELS
            for (int i = 0; i < image.Width; i++)
            {
                for (int j = 0; j < image.Height; j++)
                {
                    if (image.GetPixel(i, j) == princ)
                    {
                        pixels[i, j] = false;
                    }
                    else
                    {
                        pixels[i, j] = true;
                    }
                }
            }
            //DELETE DISTORCION PIXELS
            for (int i = 0; i < image.Width; i++)
            {
                for (int j = 0; j < image.Height; j++)
                {
                    int cont = 0;
                    if (j < image.Height - 1)
                    {
                        if (pixels[i, j + 1])
                        {
                            cont++;

                        }

                    }
                    if (j != 0)
                    {
                        if (pixels[i, j - 1])
                        {
                            cont++;
                        }
                    }
                    if (i < image.Width - 1)
                    {
                        if (pixels[i + 1, j])
                        {
                            cont++;
                        }
                    }
                    if (i != 0)
                    {
                        if (pixels[i - 1, j])
                        {
                            cont++;
                        }
                    }
                    if (cont >= 1)
                    {

                    }
                    else
                    {
                        image.SetPixel(i, j, princ);
                    }

                }
            }
        }
        catch (Exception)
        {
            Ocr_on_error = true;
        }

        return image;
    }
    public Bitmap Base64ToImage(string base64String)
    {
        try {

            // Convert base 64 string to byte[]
            byte[] imageBytes = Convert.FromBase64String(base64String);
            // Convert byte[] to Image
            using (var ms = new MemoryStream(imageBytes, 0, imageBytes.Length))
            {
                Bitmap image = new Bitmap(Image.FromStream(ms, true));
                return image;
            }
        }
        catch (Exception)
        {
            return null;
        }
        } 
    


}
